/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/bundles/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	var I18n = __webpack_require__(4);

	// standard locales
	I18n.translations.en = __webpack_require__(6).en;

	I18n.addTranslations = function(locale, translations) {
	  if (I18n.translations[locale] === undefined) {
	    I18n.translations[locale] = translations;
	  }
	  else {
	    I18n.translations[locale] = _.merge(I18n.translations[locale], translations);
	  }
	};

	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);

	if (I18n.locale === 'de') {
	  __webpack_require__(10);
	}

	__webpack_require__(11);

	__webpack_require__(12);
	__webpack_require__(13);
	__webpack_require__(14);

	__webpack_require__(15);
	__webpack_require__(16);

	__webpack_require__(20);
	__webpack_require__(21);
	__webpack_require__(3);

	// global
	angular.module('openproject.uiComponents', ['ui.select', 'ngSanitize'])
	.run(['$rootScope', function($rootScope){
	  $rootScope.I18n = I18n;
	}]);
	angular.module('openproject.config', []);
	angular.module(
	  'openproject.services', [
	    'openproject.uiComponents',
	    'openproject.helpers',
	    'openproject.workPackages.config',
	    'openproject.workPackages.helpers'
	  ]);
	angular.module('openproject.helpers', ['openproject.services']);
	angular
	  .module('openproject.models', [
	    'openproject.workPackages.config',
	    'openproject.services'
	  ]);
	angular.module('openproject.viewModels', ['openproject.services']);

	// timelines
	angular.module('openproject.timelines', [
	  'openproject.timelines.controllers',
	  'openproject.timelines.directives',
	  'openproject.uiComponents'
	]);
	angular.module('openproject.timelines.models', ['openproject.helpers']);
	angular
	  .module('openproject.timelines.helpers', []);
	angular.module(
	  'openproject.timelines.controllers', [
	    'openproject.timelines.models'
	  ]);
	angular.module('openproject.timelines.services', [
	  'openproject.timelines.models',
	  'openproject.timelines.helpers'
	]);
	angular.module('openproject.timelines.directives', [
	  'openproject.timelines.models',
	  'openproject.timelines.services',
	  'openproject.uiComponents',
	  'openproject.helpers'
	]);

	// work packages
	angular.module('openproject.workPackages', [
	  'openproject.workPackages.activities',
	  'openproject.workPackages.controllers',
	  'openproject.workPackages.filters',
	  'openproject.workPackages.directives',
	  'openproject.workPackages.tabs',
	  'openproject.uiComponents',
	  'ng-context-menu',
	  'ngFileUpload'
	]);
	angular.module('openproject.workPackages.services', []);
	angular.module(
	  'openproject.workPackages.helpers', [
	    'openproject.helpers',
	    'openproject.workPackages.services'
	  ]);
	angular.module('openproject.workPackages.filters', [
	  'openproject.workPackages.helpers'
	]);
	angular.module('openproject.workPackages.config', []);
	angular.module(
	  'openproject.workPackages.controllers', [
	    'openproject.models',
	    'openproject.viewModels',
	    'openproject.workPackages.helpers',
	    'openproject.services',
	    'openproject.workPackages.config',
	    'openproject.layout',
	    'btford.modal'
	  ]);
	angular.module('openproject.workPackages.models', []);
	angular.module(
	  'openproject.workPackages.directives', [
	    'openproject.uiComponents',
	    'openproject.services',
	    'openproject.workPackages.services',
	    'openproject.workPackages.models'
	  ]);
	angular.module('openproject.workPackages.tabs', []);
	angular.module('openproject.workPackages.activities', []);

	// messages
	angular.module('openproject.messages', [
	  'openproject.messages.controllers'
	]);
	angular.module('openproject.messages.controllers', []);

	// time entries
	angular.module('openproject.timeEntries', [
	  'openproject.timeEntries.controllers'
	]);
	angular.module('openproject.timeEntries.controllers', []);

	angular.module('openproject.layout', [
	  'openproject.layout.controllers',
	  'ui.router'
	]);
	angular.module('openproject.layout.controllers', []);

	angular.module('openproject.api', []);

	angular.module('openproject.templates', []);

	// main app
	var openprojectApp = angular.module('openproject', [
	  'ui.date',
	  'ui.router',
	  'openproject.config',
	  'openproject.uiComponents',
	  'openproject.timelines',
	  'openproject.workPackages',
	  'openproject.messages',
	  'openproject.timeEntries',
	  'ngAnimate',
	  'ngAria',
	  'ngSanitize',
	  'truncate',
	  'feature-flags',
	  'openproject.layout',
	  'cgBusy',
	  'openproject.api',
	  'openproject.templates'
	]);

	window.appBasePath = jQuery('meta[name=app_base_path]').attr('content') ||
	  '';

	openprojectApp
	  .config([
	    '$locationProvider',
	    '$httpProvider',
	    function($locationProvider, $httpProvider) {
	      $locationProvider.html5Mode(true);
	      $httpProvider.defaults.headers.common['X-CSRF-TOKEN'] = jQuery(
	        'meta[name=csrf-token]').attr('content'); // TODO find a more elegant way to keep the session alive
	      $httpProvider.defaults.headers.common['X-Authentication-Scheme'] = 'Session';
	      // prepend a given base path to requests performed via $http
	      //
	      // NOTE: this does not apply to Hyperagent-based queries, which instead use
	      //       jQuery's AJAX implementation.
	      $httpProvider.interceptors.push(function($q) {
	        return {
	          'request': function(config) {
	            // OpenProject can run in a subpath e.g. https://mydomain/open_project.
	            // We append the path found as the base-tag value to all http requests
	            // to the server except:
	            //   * when the path is already appended
	            //   * when we are getting a template
	            if (!config.url.match('(^/templates|\\.html$|^' + window.appBasePath + ')')) {
	              config.url = window.appBasePath + config.url;
	            }

	            return config || $q.when(config);
	          }
	        };
	      });
	    }
	  ])
	  .run([
	    '$http',
	    '$rootScope',
	    '$window',
	    'featureFlags',
	    'TimezoneService',
	    'KeyboardShortcutService',
	    function($http, $rootScope, $window, flags, TimezoneService, KeyboardShortcutService) {
	      $http.defaults.headers.common.Accept = 'application/json';

	      $rootScope.showNavigation =
	        $window.sessionStorage.getItem('openproject:navigation-toggle') !==
	        'collapsed';

	      flags.set($http.get('/javascripts/feature-flags.json'));
	      TimezoneService.setupLocale();
	      KeyboardShortcutService.activate();

	      // at the moment of adding this code it was mostly used to
	      // keep the previous state for the code to know where
	      // to redirect the user on cancel new work package form
	      $rootScope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
	          $rootScope.previousState = {
	            name: from.name,
	            params: fromParams
	          };
	      });
	    }
	  ]);

	__webpack_require__(23);

	angular.module('openproject.config')
	  .service('ConfigurationService', [
	    'PathHelper',
	    '$q',
	    '$http',
	    __webpack_require__(31)
	  ]);

	__webpack_require__(32);
	__webpack_require__(39);
	__webpack_require__(44);
	__webpack_require__(47);
	__webpack_require__(51);
	__webpack_require__(52);
	__webpack_require__(76);
	__webpack_require__(79);
	__webpack_require__(113);
	__webpack_require__(156);

	var requireTemplate = __webpack_require__(250);
	requireTemplate.keys().forEach(requireTemplate);

	__webpack_require__(350);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, _) {/**
	 * @license
	 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
	 * Build: `lodash -o ./dist/lodash.compat.js`
	 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <http://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre ES5 environments */
	  var undefined;

	  /** Used to pool arrays and objects used internally */
	  var arrayPool = [],
	      objectPool = [];

	  /** Used to generate unique IDs */
	  var idCounter = 0;

	  /** Used internally to indicate various things */
	  var indicatorObject = {};

	  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
	  var keyPrefix = +new Date + '';

	  /** Used as the size when optimizations are enabled for large arrays */
	  var largeArraySize = 75;

	  /** Used as the max size of the `arrayPool` and `objectPool` */
	  var maxPoolSize = 40;

	  /** Used to detect and test whitespace */
	  var whitespace = (
	    // whitespace
	    ' \t\x0B\f\xA0\ufeff' +

	    // line terminators
	    '\n\r\u2028\u2029' +

	    // unicode category "Zs" space separators
	    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
	  );

	  /** Used to match empty string literals in compiled template source */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /**
	   * Used to match ES6 template delimiters
	   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match regexp flags from their coerced string values */
	  var reFlags = /\w*$/;

	  /** Used to detected named functions */
	  var reFuncName = /^\s*function[ \n\r\t]+\w/;

	  /** Used to match "interpolate" template delimiters */
	  var reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match leading whitespace and zeros to be removed */
	  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

	  /** Used to ensure capturing order of template delimiters */
	  var reNoMatch = /($^)/;

	  /** Used to detect functions containing a `this` reference */
	  var reThis = /\bthis\b/;

	  /** Used to match unescaped characters in compiled string literals */
	  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

	  /** Used to assign default `context` object properties */
	  var contextProps = [
	    'Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'Number', 'Object',
	    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
	    'parseInt', 'setTimeout'
	  ];

	  /** Used to fix the JScript [[DontEnum]] bug */
	  var shadowedProps = [
	    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	    'toLocaleString', 'toString', 'valueOf'
	  ];

	  /** Used to make template sourceURLs easier to identify */
	  var templateCounter = 0;

	  /** `Object#toString` result shortcuts */
	  var argsClass = '[object Arguments]',
	      arrayClass = '[object Array]',
	      boolClass = '[object Boolean]',
	      dateClass = '[object Date]',
	      errorClass = '[object Error]',
	      funcClass = '[object Function]',
	      numberClass = '[object Number]',
	      objectClass = '[object Object]',
	      regexpClass = '[object RegExp]',
	      stringClass = '[object String]';

	  /** Used to identify object classifications that `_.clone` supports */
	  var cloneableClasses = {};
	  cloneableClasses[funcClass] = false;
	  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
	  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
	  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
	  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

	  /** Used as an internal `_.debounce` options object */
	  var debounceOptions = {
	    'leading': false,
	    'maxWait': 0,
	    'trailing': false
	  };

	  /** Used as the property descriptor for `__bindData__` */
	  var descriptor = {
	    'configurable': false,
	    'enumerable': false,
	    'value': null,
	    'writable': false
	  };

	  /** Used as the data object for `iteratorTemplate` */
	  var iteratorData = {
	    'args': '',
	    'array': null,
	    'bottom': '',
	    'firstArg': '',
	    'init': '',
	    'keys': null,
	    'loop': '',
	    'shadowedProps': null,
	    'support': null,
	    'top': '',
	    'useHas': false
	  };

	  /** Used to determine if values are of the language type Object */
	  var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	  };

	  /** Used to escape characters for inclusion in compiled string literals */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\t': 't',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Used as a reference to the global object */
	  var root = (objectTypes[typeof window] && window) || this;

	  /** Detect free variable `exports` */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module` */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports` */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
	  var freeGlobal = objectTypes[typeof global] && global;
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    root = freeGlobal;
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches
	   * or `fromIndex` constraints.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} [fromIndex=0] The index to search from.
	   * @returns {number} Returns the index of the matched value or `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    var index = (fromIndex || 0) - 1,
	        length = array ? array.length : 0;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * An implementation of `_.contains` for cache objects that mimics the return
	   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
	   *
	   * @private
	   * @param {Object} cache The cache object to inspect.
	   * @param {*} value The value to search for.
	   * @returns {number} Returns `0` if `value` is found, else `-1`.
	   */
	  function cacheIndexOf(cache, value) {
	    var type = typeof value;
	    cache = cache.cache;

	    if (type == 'boolean' || value == null) {
	      return cache[value] ? 0 : -1;
	    }
	    if (type != 'number' && type != 'string') {
	      type = 'object';
	    }
	    var key = type == 'number' ? value : keyPrefix + value;
	    cache = (cache = cache[type]) && cache[key];

	    return type == 'object'
	      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
	      : (cache ? 0 : -1);
	  }

	  /**
	   * Adds a given value to the corresponding cache object.
	   *
	   * @private
	   * @param {*} value The value to add to the cache.
	   */
	  function cachePush(value) {
	    var cache = this.cache,
	        type = typeof value;

	    if (type == 'boolean' || value == null) {
	      cache[value] = true;
	    } else {
	      if (type != 'number' && type != 'string') {
	        type = 'object';
	      }
	      var key = type == 'number' ? value : keyPrefix + value,
	          typeCache = cache[type] || (cache[type] = {});

	      if (type == 'object') {
	        (typeCache[key] || (typeCache[key] = [])).push(value);
	      } else {
	        typeCache[key] = true;
	      }
	    }
	  }

	  /**
	   * Used by `_.max` and `_.min` as the default callback when a given
	   * collection is a string value.
	   *
	   * @private
	   * @param {string} value The character to inspect.
	   * @returns {number} Returns the code unit of given character.
	   */
	  function charAtCallback(value) {
	    return value.charCodeAt(0);
	  }

	  /**
	   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
	   * them in ascending order.
	   *
	   * @private
	   * @param {Object} a The object to compare to `b`.
	   * @param {Object} b The object to compare to `a`.
	   * @returns {number} Returns the sort order indicator of `1` or `-1`.
	   */
	  function compareAscending(a, b) {
	    var ac = a.criteria,
	        bc = b.criteria,
	        index = -1,
	        length = ac.length;

	    while (++index < length) {
	      var value = ac[index],
	          other = bc[index];

	      if (value !== other) {
	        if (value > other || typeof value == 'undefined') {
	          return 1;
	        }
	        if (value < other || typeof other == 'undefined') {
	          return -1;
	        }
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to return the same value for
	    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See http://code.google.com/p/v8/issues/detail?id=90
	    return a.index - b.index;
	  }

	  /**
	   * Creates a cache object to optimize linear searches of large arrays.
	   *
	   * @private
	   * @param {Array} [array=[]] The array to search.
	   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
	   */
	  function createCache(array) {
	    var index = -1,
	        length = array.length,
	        first = array[0],
	        mid = array[(length / 2) | 0],
	        last = array[length - 1];

	    if (first && typeof first == 'object' &&
	        mid && typeof mid == 'object' && last && typeof last == 'object') {
	      return false;
	    }
	    var cache = getObject();
	    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

	    var result = getObject();
	    result.array = array;
	    result.cache = cache;
	    result.push = cachePush;

	    while (++index < length) {
	      result.push(array[index]);
	    }
	    return result;
	  }

	  /**
	   * Used by `template` to escape characters for inclusion in compiled
	   * string literals.
	   *
	   * @private
	   * @param {string} match The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(match) {
	    return '\\' + stringEscapes[match];
	  }

	  /**
	   * Gets an array from the array pool or creates a new one if the pool is empty.
	   *
	   * @private
	   * @returns {Array} The array from the pool.
	   */
	  function getArray() {
	    return arrayPool.pop() || [];
	  }

	  /**
	   * Gets an object from the object pool or creates a new one if the pool is empty.
	   *
	   * @private
	   * @returns {Object} The object from the pool.
	   */
	  function getObject() {
	    return objectPool.pop() || {
	      'array': null,
	      'cache': null,
	      'criteria': null,
	      'false': false,
	      'index': 0,
	      'null': false,
	      'number': null,
	      'object': null,
	      'push': null,
	      'string': null,
	      'true': false,
	      'undefined': false,
	      'value': null
	    };
	  }

	  /**
	   * Checks if `value` is a DOM node in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a DOM node, else `false`.
	   */
	  function isNode(value) {
	    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
	    // methods that are `typeof` "string" and still can coerce nodes to strings
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  }

	  /**
	   * Releases the given array back to the array pool.
	   *
	   * @private
	   * @param {Array} [array] The array to release.
	   */
	  function releaseArray(array) {
	    array.length = 0;
	    if (arrayPool.length < maxPoolSize) {
	      arrayPool.push(array);
	    }
	  }

	  /**
	   * Releases the given object back to the object pool.
	   *
	   * @private
	   * @param {Object} [object] The object to release.
	   */
	  function releaseObject(object) {
	    var cache = object.cache;
	    if (cache) {
	      releaseObject(cache);
	    }
	    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
	    if (objectPool.length < maxPoolSize) {
	      objectPool.push(object);
	    }
	  }

	  /**
	   * Slices the `collection` from the `start` index up to, but not including,
	   * the `end` index.
	   *
	   * Note: This function is used instead of `Array#slice` to support node lists
	   * in IE < 9 and to ensure dense arrays are returned.
	   *
	   * @private
	   * @param {Array|Object|string} collection The collection to slice.
	   * @param {number} start The start index.
	   * @param {number} end The end index.
	   * @returns {Array} Returns the new array.
	   */
	  function slice(array, start, end) {
	    start || (start = 0);
	    if (typeof end == 'undefined') {
	      end = array ? array.length : 0;
	    }
	    var index = -1,
	        length = end - start || 0,
	        result = Array(length < 0 ? 0 : length);

	    while (++index < length) {
	      result[index] = array[start + index];
	    }
	    return result;
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new `lodash` function using the given context object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns the `lodash` function.
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See http://es5.github.io/#x11.1.5.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references */
	    var Array = context.Array,
	        Boolean = context.Boolean,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /**
	     * Used for `Array` method references.
	     *
	     * Normally `Array.prototype` would suffice, however, using an array literal
	     * avoids issues in Narwhal.
	     */
	    var arrayRef = [];

	    /** Used for native method references */
	    var errorProto = Error.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to restore the original `_` reference in `noConflict` */
	    var oldDash = context._;

	    /** Used to resolve the internal [[Class]] of values */
	    var toString = objectProto.toString;

	    /** Used to detect if a method is native */
	    var reNative = RegExp('^' +
	      String(toString)
	        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
	        .replace(/toString| for [^\]]+/g, '.*?') + '$'
	    );

	    /** Native method shortcuts */
	    var ceil = Math.ceil,
	        clearTimeout = context.clearTimeout,
	        floor = Math.floor,
	        fnToString = Function.prototype.toString,
	        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
	        hasOwnProperty = objectProto.hasOwnProperty,
	        push = arrayRef.push,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        setTimeout = context.setTimeout,
	        splice = arrayRef.splice,
	        unshift = arrayRef.unshift;

	    /** Used to set meta data on functions */
	    var defineProperty = (function() {
	      // IE 8 only accepts DOM elements
	      try {
	        var o = {},
	            func = isNative(func = Object.defineProperty) && func,
	            result = func(o, o, o) && func;
	      } catch(e) { }
	      return result;
	    }());

	    /* Native method shortcuts for methods with the same name as other `lodash` methods */
	    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
	        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
	        nativeIsFinite = context.isFinite,
	        nativeIsNaN = context.isNaN,
	        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used to lookup a built-in constructor by [[Class]] */
	    var ctorByClass = {};
	    ctorByClass[arrayClass] = Array;
	    ctorByClass[boolClass] = Boolean;
	    ctorByClass[dateClass] = Date;
	    ctorByClass[funcClass] = Function;
	    ctorByClass[objectClass] = Object;
	    ctorByClass[numberClass] = Number;
	    ctorByClass[regexpClass] = RegExp;
	    ctorByClass[stringClass] = String;

	    /** Used to avoid iterating non-enumerable properties in IE < 9 */
	    var nonEnumProps = {};
	    nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	    nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
	    nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
	    nonEnumProps[objectClass] = { 'constructor': true };

	    (function() {
	      var length = shadowedProps.length;
	      while (length--) {
	        var key = shadowedProps[length];
	        for (var className in nonEnumProps) {
	          if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], key)) {
	            nonEnumProps[className][key] = false;
	          }
	        }
	      }
	    }());

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps the given value to enable intuitive
	     * method chaining.
	     *
	     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
	     * and `unshift`
	     *
	     * Chaining is supported in custom builds as long as the `value` method is
	     * implicitly or explicitly included in the build.
	     *
	     * The chainable wrapper functions are:
	     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
	     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
	     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
	     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
	     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
	     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
	     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
	     * and `zip`
	     *
	     * The non-chainable wrapper functions are:
	     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
	     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
	     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
	     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
	     * `template`, `unescape`, `uniqueId`, and `value`
	     *
	     * The wrapper functions `first` and `last` return wrapped values when `n` is
	     * provided, otherwise they return unwrapped values.
	     *
	     * Explicit chaining can be enabled by using the `_.chain` method.
	     *
	     * @name _
	     * @constructor
	     * @category Chaining
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns a `lodash` instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(sum, num) {
	     *   return sum + num;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(num) {
	     *   return num * num;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
	      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
	       ? value
	       : new lodashWrapper(value);
	    }

	    /**
	     * A fast path for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @param {boolean} chainAll A flag to enable chaining for all methods
	     * @returns {Object} Returns a `lodash` instance.
	     */
	    function lodashWrapper(value, chainAll) {
	      this.__chain__ = !!chainAll;
	      this.__wrapped__ = value;
	    }
	    // ensure `new lodashWrapper` is an instance of `lodash`
	    lodashWrapper.prototype = lodash.prototype;

	    /**
	     * An object used to flag environments features.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    (function() {
	      var ctor = function() { this.x = 1; },
	          object = { '0': 1, 'length': 1 },
	          props = [];

	      ctor.prototype = { 'valueOf': 1, 'y': 1 };
	      for (var key in new ctor) { props.push(key); }
	      for (key in arguments) { }

	      /**
	       * Detect if an `arguments` object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.argsClass = toString.call(arguments) == argsClass;

	      /**
	       * Detect if `arguments` objects are `Object` objects (all but Narwhal and Opera < 10.5).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);

	      /**
	       * Detect if `name` or `message` properties of `Error.prototype` are
	       * enumerable by default. (IE < 9, Safari < 5.1)
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

	      /**
	       * Detect if `prototype` properties are enumerable by default.
	       *
	       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
	       * (if the prototype or a property on the prototype has been set)
	       * incorrectly sets a function's `prototype` property [[Enumerable]]
	       * value to `true`.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

	      /**
	       * Detect if functions can be decompiled by `Function#toString`
	       * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

	      /**
	       * Detect if `Function#name` is supported (all but IE).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcNames = typeof Function.name == 'string';

	      /**
	       * Detect if `arguments` object indexes are non-enumerable
	       * (Firefox < 4, IE < 9, PhantomJS, Safari < 5.1).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.nonEnumArgs = key != 0;

	      /**
	       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	       *
	       * In IE < 9 an objects own properties, shadowing non-enumerable ones, are
	       * made non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.nonEnumShadows = !/valueOf/.test(props);

	      /**
	       * Detect if own properties are iterated after inherited properties (all but IE < 9).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.ownLast = props[0] != 'x';

	      /**
	       * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.
	       *
	       * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
	       * and `splice()` functions that fail to remove the last element, `value[0]`,
	       * of array-like objects even though the `length` property is set to `0`.
	       * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
	       * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);

	      /**
	       * Detect lack of support for accessing string characters by index.
	       *
	       * IE < 8 can't access characters by index and IE 8 can only access
	       * characters by index on string literals.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';

	      /**
	       * Detect if a DOM node's [[Class]] is resolvable (all but IE < 9)
	       * and that the JS engine errors when attempting to coerce an object to
	       * a string without a `toString` function.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.nodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
	      } catch(e) {
	        support.nodeClass = true;
	      }
	    }(1));

	    /**
	     * By default, the template delimiters used by Lo-Dash are similar to those in
	     * embedded Ruby (ERB). Change the following template settings to use alternative
	     * delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': /<%-([\s\S]+?)%>/g,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': /<%([\s\S]+?)%>/g,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*--------------------------------------------------------------------------*/

	    /**
	     * The template used to create iterator functions.
	     *
	     * @private
	     * @param {Object} data The data object used to populate the text.
	     * @returns {string} Returns the interpolated text.
	     */
	    var iteratorTemplate = function(obj) {

	      var __p = 'var index, iterable = ' +
	      (obj.firstArg) +
	      ', result = ' +
	      (obj.init) +
	      ';\nif (!iterable) return result;\n' +
	      (obj.top) +
	      ';';
	       if (obj.array) {
	      __p += '\nvar length = iterable.length; index = -1;\nif (' +
	      (obj.array) +
	      ') {  ';
	       if (support.unindexedChars) {
	      __p += '\n  if (isString(iterable)) {\n    iterable = iterable.split(\'\')\n  }  ';
	       }
	      __p += '\n  while (++index < length) {\n    ' +
	      (obj.loop) +
	      ';\n  }\n}\nelse {  ';
	       } else if (support.nonEnumArgs) {
	      __p += '\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += \'\';\n      ' +
	      (obj.loop) +
	      ';\n    }\n  } else {  ';
	       }

	       if (support.enumPrototypes) {
	      __p += '\n  var skipProto = typeof iterable == \'function\';\n  ';
	       }

	       if (support.enumErrorProps) {
	      __p += '\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n  ';
	       }

	          var conditions = [];    if (support.enumPrototypes) { conditions.push('!(skipProto && index == "prototype")'); }    if (support.enumErrorProps)  { conditions.push('!(skipErrorProps && (index == "message" || index == "name"))'); }

	       if (obj.useHas && obj.keys) {
	      __p += '\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\n      length = ownProps ? ownProps.length : 0;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n';
	          if (conditions.length) {
	      __p += '    if (' +
	      (conditions.join(' && ')) +
	      ') {\n  ';
	       }
	      __p +=
	      (obj.loop) +
	      ';    ';
	       if (conditions.length) {
	      __p += '\n    }';
	       }
	      __p += '\n  }  ';
	       } else {
	      __p += '\n  for (index in iterable) {\n';
	          if (obj.useHas) { conditions.push("hasOwnProperty.call(iterable, index)"); }    if (conditions.length) {
	      __p += '    if (' +
	      (conditions.join(' && ')) +
	      ') {\n  ';
	       }
	      __p +=
	      (obj.loop) +
	      ';    ';
	       if (conditions.length) {
	      __p += '\n    }';
	       }
	      __p += '\n  }    ';
	       if (support.nonEnumShadows) {
	      __p += '\n\n  if (iterable !== objectProto) {\n    var ctor = iterable.constructor,\n        isProto = iterable === (ctor && ctor.prototype),\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n        nonEnum = nonEnumProps[className];\n      ';
	       for (k = 0; k < 7; k++) {
	      __p += '\n    index = \'' +
	      (obj.shadowedProps[k]) +
	      '\';\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))';
	              if (!obj.useHas) {
	      __p += ' || (!nonEnum[index] && iterable[index] !== objectProto[index])';
	       }
	      __p += ') {\n      ' +
	      (obj.loop) +
	      ';\n    }      ';
	       }
	      __p += '\n  }    ';
	       }

	       }

	       if (obj.array || support.nonEnumArgs) {
	      __p += '\n}';
	       }
	      __p +=
	      (obj.bottom) +
	      ';\nreturn result';

	      return __p
	    };

	    /*--------------------------------------------------------------------------*/

	    /**
	     * The base implementation of `_.bind` that creates the bound function and
	     * sets its meta data.
	     *
	     * @private
	     * @param {Array} bindData The bind data array.
	     * @returns {Function} Returns the new bound function.
	     */
	    function baseBind(bindData) {
	      var func = bindData[0],
	          partialArgs = bindData[2],
	          thisArg = bindData[4];

	      function bound() {
	        // `Function#bind` spec
	        // http://es5.github.io/#x15.3.4.5
	        if (partialArgs) {
	          // avoid `arguments` object deoptimizations by using `slice` instead
	          // of `Array.prototype.slice.call` and not assigning `arguments` to a
	          // variable as a ternary expression
	          var args = slice(partialArgs);
	          push.apply(args, arguments);
	        }
	        // mimic the constructor's `return` behavior
	        // http://es5.github.io/#x13.2.2
	        if (this instanceof bound) {
	          // ensure `new bound` is an instance of `func`
	          var thisBinding = baseCreate(func.prototype),
	              result = func.apply(thisBinding, args || arguments);
	          return isObject(result) ? result : thisBinding;
	        }
	        return func.apply(thisArg, args || arguments);
	      }
	      setBindData(bound, bindData);
	      return bound;
	    }

	    /**
	     * The base implementation of `_.clone` without argument juggling or support
	     * for `thisArg` binding.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep=false] Specify a deep clone.
	     * @param {Function} [callback] The function to customize cloning values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, callback, stackA, stackB) {
	      if (callback) {
	        var result = callback(value);
	        if (typeof result != 'undefined') {
	          return result;
	        }
	      }
	      // inspect [[Class]]
	      var isObj = isObject(value);
	      if (isObj) {
	        var className = toString.call(value);
	        if (!cloneableClasses[className] || (!support.nodeClass && isNode(value))) {
	          return value;
	        }
	        var ctor = ctorByClass[className];
	        switch (className) {
	          case boolClass:
	          case dateClass:
	            return new ctor(+value);

	          case numberClass:
	          case stringClass:
	            return new ctor(value);

	          case regexpClass:
	            result = ctor(value.source, reFlags.exec(value));
	            result.lastIndex = value.lastIndex;
	            return result;
	        }
	      } else {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isDeep) {
	        // check for circular references and return corresponding clone
	        var initedStack = !stackA;
	        stackA || (stackA = getArray());
	        stackB || (stackB = getArray());

	        var length = stackA.length;
	        while (length--) {
	          if (stackA[length] == value) {
	            return stackB[length];
	          }
	        }
	        result = isArr ? ctor(value.length) : {};
	      }
	      else {
	        result = isArr ? slice(value) : assign({}, value);
	      }
	      // add array properties assigned by `RegExp#exec`
	      if (isArr) {
	        if (hasOwnProperty.call(value, 'index')) {
	          result.index = value.index;
	        }
	        if (hasOwnProperty.call(value, 'input')) {
	          result.input = value.input;
	        }
	      }
	      // exit for shallow clone
	      if (!isDeep) {
	        return result;
	      }
	      // add the source value to the stack of traversed objects
	      // and associate it with its clone
	      stackA.push(value);
	      stackB.push(result);

	      // recursively populate clone (susceptible to call stack limits)
	      (isArr ? baseEach : forOwn)(value, function(objValue, key) {
	        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
	      });

	      if (initedStack) {
	        releaseArray(stackA);
	        releaseArray(stackB);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    function baseCreate(prototype, properties) {
	      return isObject(prototype) ? nativeCreate(prototype) : {};
	    }
	    // fallback for browsers without `Object.create`
	    if (!nativeCreate) {
	      baseCreate = (function() {
	        function Object() {}
	        return function(prototype) {
	          if (isObject(prototype)) {
	            Object.prototype = prototype;
	            var result = new Object;
	            Object.prototype = null;
	          }
	          return result || context.Object();
	        };
	      }());
	    }

	    /**
	     * The base implementation of `_.createCallback` without support for creating
	     * "_.pluck" or "_.where" style callbacks.
	     *
	     * @private
	     * @param {*} [func=identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of the created callback.
	     * @param {number} [argCount] The number of arguments the callback accepts.
	     * @returns {Function} Returns a callback function.
	     */
	    function baseCreateCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      // exit early for no `thisArg` or already bound by `Function#bind`
	      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
	        return func;
	      }
	      var bindData = func.__bindData__;
	      if (typeof bindData == 'undefined') {
	        if (support.funcNames) {
	          bindData = !func.name;
	        }
	        bindData = bindData || !support.funcDecomp;
	        if (!bindData) {
	          var source = fnToString.call(func);
	          if (!support.funcNames) {
	            bindData = !reFuncName.test(source);
	          }
	          if (!bindData) {
	            // checks if `func` references the `this` keyword and stores the result
	            bindData = reThis.test(source);
	            setBindData(func, bindData);
	          }
	        }
	      }
	      // exit early if there are no `this` references or `func` is bound
	      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 2: return function(a, b) {
	          return func.call(thisArg, a, b);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	      }
	      return bind(func, thisArg);
	    }

	    /**
	     * The base implementation of `createWrapper` that creates the wrapper and
	     * sets its meta data.
	     *
	     * @private
	     * @param {Array} bindData The bind data array.
	     * @returns {Function} Returns the new function.
	     */
	    function baseCreateWrapper(bindData) {
	      var func = bindData[0],
	          bitmask = bindData[1],
	          partialArgs = bindData[2],
	          partialRightArgs = bindData[3],
	          thisArg = bindData[4],
	          arity = bindData[5];

	      var isBind = bitmask & 1,
	          isBindKey = bitmask & 2,
	          isCurry = bitmask & 4,
	          isCurryBound = bitmask & 8,
	          key = func;

	      function bound() {
	        var thisBinding = isBind ? thisArg : this;
	        if (partialArgs) {
	          var args = slice(partialArgs);
	          push.apply(args, arguments);
	        }
	        if (partialRightArgs || isCurry) {
	          args || (args = slice(arguments));
	          if (partialRightArgs) {
	            push.apply(args, partialRightArgs);
	          }
	          if (isCurry && args.length < arity) {
	            bitmask |= 16 & ~32;
	            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
	          }
	        }
	        args || (args = arguments);
	        if (isBindKey) {
	          func = thisBinding[key];
	        }
	        if (this instanceof bound) {
	          thisBinding = baseCreate(func.prototype);
	          var result = func.apply(thisBinding, args);
	          return isObject(result) ? result : thisBinding;
	        }
	        return func.apply(thisBinding, args);
	      }
	      setBindData(bound, bindData);
	      return bound;
	    }

	    /**
	     * The base implementation of `_.difference` that accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to process.
	     * @param {Array} [values] The array of values to exclude.
	     * @returns {Array} Returns a new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array ? array.length : 0,
	          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
	          result = [];

	      if (isLarge) {
	        var cache = createCache(values);
	        if (cache) {
	          indexOf = cacheIndexOf;
	          values = cache;
	        } else {
	          isLarge = false;
	        }
	      }
	      while (++index < length) {
	        var value = array[index];
	        if (indexOf(values, value) < 0) {
	          result.push(value);
	        }
	      }
	      if (isLarge) {
	        releaseObject(values);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` without support for callback
	     * shorthands or `thisArg` binding.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
	     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
	     * @param {number} [fromIndex=0] The index to start from.
	     * @returns {Array} Returns a new flattened array.
	     */
	    function baseFlatten(array, isShallow, isStrict, fromIndex) {
	      var index = (fromIndex || 0) - 1,
	          length = array ? array.length : 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];

	        if (value && typeof value == 'object' && typeof value.length == 'number'
	            && (isArray(value) || isArguments(value))) {
	          // recursively flatten arrays (susceptible to call stack limits)
	          if (!isShallow) {
	            value = baseFlatten(value, isShallow, isStrict);
	          }
	          var valIndex = -1,
	              valLength = value.length,
	              resIndex = result.length;

	          result.length += valLength;
	          while (++valIndex < valLength) {
	            result[resIndex++] = value[valIndex];
	          }
	        } else if (!isStrict) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
	     * that allows partial "_.where" style comparisons.
	     *
	     * @private
	     * @param {*} a The value to compare.
	     * @param {*} b The other value to compare.
	     * @param {Function} [callback] The function to customize comparing values.
	     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
	      // used to indicate that when comparing objects, `a` has at least the properties of `b`
	      if (callback) {
	        var result = callback(a, b);
	        if (typeof result != 'undefined') {
	          return !!result;
	        }
	      }
	      // exit early for identical values
	      if (a === b) {
	        // treat `+0` vs. `-0` as not equal
	        return a !== 0 || (1 / a == 1 / b);
	      }
	      var type = typeof a,
	          otherType = typeof b;

	      // exit early for unlike primitive values
	      if (a === a &&
	          !(a && objectTypes[type]) &&
	          !(b && objectTypes[otherType])) {
	        return false;
	      }
	      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
	      // http://es5.github.io/#x15.3.4.4
	      if (a == null || b == null) {
	        return a === b;
	      }
	      // compare [[Class]] names
	      var className = toString.call(a),
	          otherClass = toString.call(b);

	      if (className == argsClass) {
	        className = objectClass;
	      }
	      if (otherClass == argsClass) {
	        otherClass = objectClass;
	      }
	      if (className != otherClass) {
	        return false;
	      }
	      switch (className) {
	        case boolClass:
	        case dateClass:
	          // coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
	          return +a == +b;

	        case numberClass:
	          // treat `NaN` vs. `NaN` as equal
	          return (a != +a)
	            ? b != +b
	            // but treat `+0` vs. `-0` as not equal
	            : (a == 0 ? (1 / a == 1 / b) : a == +b);

	        case regexpClass:
	        case stringClass:
	          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
	          // treat string primitives and their corresponding object instances as equal
	          return a == String(b);
	      }
	      var isArr = className == arrayClass;
	      if (!isArr) {
	        // unwrap any `lodash` wrapped values
	        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
	            bWrapped = hasOwnProperty.call(b, '__wrapped__');

	        if (aWrapped || bWrapped) {
	          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
	        }
	        // exit for functions and DOM nodes
	        if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
	          return false;
	        }
	        // in older versions of Opera, `arguments` objects have `Array` constructors
	        var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
	            ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

	        // non `Object` object instances with different constructors are not equal
	        if (ctorA != ctorB &&
	              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
	              ('constructor' in a && 'constructor' in b)
	            ) {
	          return false;
	        }
	      }
	      // assume cyclic structures are equal
	      // the algorithm for detecting cyclic structures is adapted from ES 5.1
	      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
	      var initedStack = !stackA;
	      stackA || (stackA = getArray());
	      stackB || (stackB = getArray());

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == a) {
	          return stackB[length] == b;
	        }
	      }
	      var size = 0;
	      result = true;

	      // add `a` and `b` to the stack of traversed objects
	      stackA.push(a);
	      stackB.push(b);

	      // recursively compare objects and arrays (susceptible to call stack limits)
	      if (isArr) {
	        // compare lengths to determine if a deep comparison is necessary
	        length = a.length;
	        size = b.length;
	        result = size == length;

	        if (result || isWhere) {
	          // deep compare the contents, ignoring non-numeric properties
	          while (size--) {
	            var index = length,
	                value = b[size];

	            if (isWhere) {
	              while (index--) {
	                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
	                  break;
	                }
	              }
	            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
	              break;
	            }
	          }
	        }
	      }
	      else {
	        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
	        // which, in this case, is more costly
	        forIn(b, function(value, key, b) {
	          if (hasOwnProperty.call(b, key)) {
	            // count the number of properties.
	            size++;
	            // deep compare each property value.
	            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
	          }
	        });

	        if (result && !isWhere) {
	          // ensure both objects have the same number of properties
	          forIn(a, function(value, key, a) {
	            if (hasOwnProperty.call(a, key)) {
	              // `size` will be `-1` if `a` has more properties than `b`
	              return (result = --size > -1);
	            }
	          });
	        }
	      }
	      stackA.pop();
	      stackB.pop();

	      if (initedStack) {
	        releaseArray(stackA);
	        releaseArray(stackB);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.merge` without argument juggling or support
	     * for `thisArg` binding.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [callback] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     */
	    function baseMerge(object, source, callback, stackA, stackB) {
	      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
	        var found,
	            isArr,
	            result = source,
	            value = object[key];

	        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
	          // avoid merging previously merged cyclic sources
	          var stackLength = stackA.length;
	          while (stackLength--) {
	            if ((found = stackA[stackLength] == source)) {
	              value = stackB[stackLength];
	              break;
	            }
	          }
	          if (!found) {
	            var isShallow;
	            if (callback) {
	              result = callback(value, source);
	              if ((isShallow = typeof result != 'undefined')) {
	                value = result;
	              }
	            }
	            if (!isShallow) {
	              value = isArr
	                ? (isArray(value) ? value : [])
	                : (isPlainObject(value) ? value : {});
	            }
	            // add `source` and associated `value` to the stack of traversed objects
	            stackA.push(source);
	            stackB.push(value);

	            // recursively merge objects and arrays (susceptible to call stack limits)
	            if (!isShallow) {
	              baseMerge(value, source, callback, stackA, stackB);
	            }
	          }
	        }
	        else {
	          if (callback) {
	            result = callback(value, source);
	            if (typeof result == 'undefined') {
	              result = source;
	            }
	          }
	          if (typeof result != 'undefined') {
	            value = result;
	          }
	        }
	        object[key] = value;
	      });
	    }

	    /**
	     * The base implementation of `_.random` without argument juggling or support
	     * for returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns a random number.
	     */
	    function baseRandom(min, max) {
	      return min + floor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * or `thisArg` binding.
	     *
	     * @private
	     * @param {Array} array The array to process.
	     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
	     * @param {Function} [callback] The function called per iteration.
	     * @returns {Array} Returns a duplicate-value-free array.
	     */
	    function baseUniq(array, isSorted, callback) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array ? array.length : 0,
	          result = [];

	      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
	          seen = (callback || isLarge) ? getArray() : result;

	      if (isLarge) {
	        var cache = createCache(seen);
	        indexOf = cacheIndexOf;
	        seen = cache;
	      }
	      while (++index < length) {
	        var value = array[index],
	            computed = callback ? callback(value, index, array) : value;

	        if (isSorted
	              ? !index || seen[seen.length - 1] !== computed
	              : indexOf(seen, computed) < 0
	            ) {
	          if (callback || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      if (isLarge) {
	        releaseArray(seen.array);
	        releaseObject(seen);
	      } else if (callback) {
	        releaseArray(seen);
	      }
	      return result;
	    }

	    /**
	     * Creates a function that aggregates a collection, creating an object composed
	     * of keys generated from the results of running each element of the collection
	     * through a callback. The given `setter` function sets the keys and values
	     * of the composed object.
	     *
	     * @private
	     * @param {Function} setter The setter function.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter) {
	      return function(collection, callback, thisArg) {
	        var result = {};
	        callback = lodash.createCallback(callback, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, callback(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, callback(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that, when called, either curries or invokes `func`
	     * with an optional `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of method flags to compose.
	     *  The bitmask may be composed of the following flags:
	     *  1 - `_.bind`
	     *  2 - `_.bindKey`
	     *  4 - `_.curry`
	     *  8 - `_.curry` (bound)
	     *  16 - `_.partial`
	     *  32 - `_.partialRight`
	     * @param {Array} [partialArgs] An array of arguments to prepend to those
	     *  provided to the new function.
	     * @param {Array} [partialRightArgs] An array of arguments to append to those
	     *  provided to the new function.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new function.
	     */
	    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
	      var isBind = bitmask & 1,
	          isBindKey = bitmask & 2,
	          isCurry = bitmask & 4,
	          isCurryBound = bitmask & 8,
	          isPartial = bitmask & 16,
	          isPartialRight = bitmask & 32;

	      if (!isBindKey && !isFunction(func)) {
	        throw new TypeError;
	      }
	      if (isPartial && !partialArgs.length) {
	        bitmask &= ~16;
	        isPartial = partialArgs = false;
	      }
	      if (isPartialRight && !partialRightArgs.length) {
	        bitmask &= ~32;
	        isPartialRight = partialRightArgs = false;
	      }
	      var bindData = func && func.__bindData__;
	      if (bindData && bindData !== true) {
	        // clone `bindData`
	        bindData = slice(bindData);
	        if (bindData[2]) {
	          bindData[2] = slice(bindData[2]);
	        }
	        if (bindData[3]) {
	          bindData[3] = slice(bindData[3]);
	        }
	        // set `thisBinding` is not previously bound
	        if (isBind && !(bindData[1] & 1)) {
	          bindData[4] = thisArg;
	        }
	        // set if previously bound but not currently (subsequent curried functions)
	        if (!isBind && bindData[1] & 1) {
	          bitmask |= 8;
	        }
	        // set curried arity if not yet set
	        if (isCurry && !(bindData[1] & 4)) {
	          bindData[5] = arity;
	        }
	        // append partial left arguments
	        if (isPartial) {
	          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
	        }
	        // append partial right arguments
	        if (isPartialRight) {
	          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
	        }
	        // merge flags
	        bindData[1] |= bitmask;
	        return createWrapper.apply(null, bindData);
	      }
	      // fast path for `_.bind`
	      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
	      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
	    }

	    /**
	     * Creates compiled iteration functions.
	     *
	     * @private
	     * @param {...Object} [options] The compile options object(s).
	     * @param {string} [options.array] Code to determine if the iterable is an array or array-like.
	     * @param {boolean} [options.useHas] Specify using `hasOwnProperty` checks in the object loop.
	     * @param {Function} [options.keys] A reference to `_.keys` for use in own property iteration.
	     * @param {string} [options.args] A comma separated string of iteration function arguments.
	     * @param {string} [options.top] Code to execute before the iteration branches.
	     * @param {string} [options.loop] Code to execute in the object loop.
	     * @param {string} [options.bottom] Code to execute after the iteration branches.
	     * @returns {Function} Returns the compiled function.
	     */
	    function createIterator() {
	      // data properties
	      iteratorData.shadowedProps = shadowedProps;

	      // iterator options
	      iteratorData.array = iteratorData.bottom = iteratorData.loop = iteratorData.top = '';
	      iteratorData.init = 'iterable';
	      iteratorData.useHas = true;

	      // merge options into a template data object
	      for (var object, index = 0; object = arguments[index]; index++) {
	        for (var key in object) {
	          iteratorData[key] = object[key];
	        }
	      }
	      var args = iteratorData.args;
	      iteratorData.firstArg = /^[^,]+/.exec(args)[0];

	      // create the function factory
	      var factory = Function(
	          'baseCreateCallback, errorClass, errorProto, hasOwnProperty, ' +
	          'indicatorObject, isArguments, isArray, isString, keys, objectProto, ' +
	          'objectTypes, nonEnumProps, stringClass, stringProto, toString',
	        'return function(' + args + ') {\n' + iteratorTemplate(iteratorData) + '\n}'
	      );

	      // return the compiled function
	      return factory(
	        baseCreateCallback, errorClass, errorProto, hasOwnProperty,
	        indicatorObject, isArguments, isArray, isString, iteratorData.keys, objectProto,
	        objectTypes, nonEnumProps, stringClass, stringProto, toString
	      );
	    }

	    /**
	     * Used by `escape` to convert characters to HTML entities.
	     *
	     * @private
	     * @param {string} match The matched character to escape.
	     * @returns {string} Returns the escaped character.
	     */
	    function escapeHtmlChar(match) {
	      return htmlEscapes[match];
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized, this method returns the custom method, otherwise it returns
	     * the `baseIndexOf` function.
	     *
	     * @private
	     * @returns {Function} Returns the "indexOf" function.
	     */
	    function getIndexOf() {
	      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
	      return result;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
	     */
	    function isNative(value) {
	      return typeof value == 'function' && reNative.test(value);
	    }

	    /**
	     * Sets `this` binding data on a given function.
	     *
	     * @private
	     * @param {Function} func The function to set data on.
	     * @param {Array} value The data array to set.
	     */
	    var setBindData = !defineProperty ? noop : function(func, value) {
	      descriptor.value = value;
	      defineProperty(func, '__bindData__', descriptor);
	    };

	    /**
	     * A fallback implementation of `isPlainObject` which checks if a given value
	     * is an object created by the `Object` constructor, assuming objects created
	     * by the `Object` constructor have no inherited enumerable properties and that
	     * there are no `Object.prototype` extensions.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     */
	    function shimIsPlainObject(value) {
	      var ctor,
	          result;

	      // avoid non Object objects, `arguments` objects, and DOM elements
	      if (!(value && toString.call(value) == objectClass) ||
	          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor)) ||
	          (!support.argsClass && isArguments(value)) ||
	          (!support.nodeClass && isNode(value))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      if (support.ownLast) {
	        forIn(value, function(value, key, object) {
	          result = hasOwnProperty.call(object, key);
	          return false;
	        });
	        return result !== false;
	      }
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      forIn(value, function(value, key) {
	        result = key;
	      });
	      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Used by `unescape` to convert HTML entities to characters.
	     *
	     * @private
	     * @param {string} match The matched character to unescape.
	     * @returns {string} Returns the unescaped character.
	     */
	    function unescapeHtmlChar(match) {
	      return htmlUnescapes[match];
	    }

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Checks if `value` is an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
	     * @example
	     *
	     * (function() { return _.isArguments(arguments); })(1, 2, 3);
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return value && typeof value == 'object' && typeof value.length == 'number' &&
	        toString.call(value) == argsClass || false;
	    }
	    // fallback for browsers that can't detect `arguments` objects by [[Class]]
	    if (!support.argsClass) {
	      isArguments = function(value) {
	        return value && typeof value == 'object' && typeof value.length == 'number' &&
	          hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;
	      };
	    }

	    /**
	     * Checks if `value` is an array.
	     *
	     * @static
	     * @memberOf _
	     * @type Function
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
	     * @example
	     *
	     * (function() { return _.isArray(arguments); })();
	     * // => false
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     */
	    var isArray = nativeIsArray || function(value) {
	      return value && typeof value == 'object' && typeof value.length == 'number' &&
	        toString.call(value) == arrayClass || false;
	    };

	    /**
	     * A fallback implementation of `Object.keys` which produces an array of the
	     * given object's own enumerable property names.
	     *
	     * @private
	     * @type Function
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns an array of property names.
	     */
	    var shimKeys = createIterator({
	      'args': 'object',
	      'init': '[]',
	      'top': 'if (!(objectTypes[typeof object])) return result',
	      'loop': 'result.push(index)'
	    });

	    /**
	     * Creates an array composed of the own enumerable property names of an object.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns an array of property names.
	     * @example
	     *
	     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
	     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      if (!isObject(object)) {
	        return [];
	      }
	      if ((support.enumPrototypes && typeof object == 'function') ||
	          (support.nonEnumArgs && object.length && isArguments(object))) {
	        return shimKeys(object);
	      }
	      return nativeKeys(object);
	    };

	    /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */
	    var eachIteratorOptions = {
	      'args': 'collection, callback, thisArg',
	      'top': "callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)",
	      'array': "typeof length == 'number'",
	      'keys': keys,
	      'loop': 'if (callback(iterable[index], index, collection) === false) return result'
	    };

	    /** Reusable iterator options for `assign` and `defaults` */
	    var defaultsIteratorOptions = {
	      'args': 'object, source, guard',
	      'top':
	        'var args = arguments,\n' +
	        '    argsIndex = 0,\n' +
	        "    argsLength = typeof guard == 'number' ? 2 : args.length;\n" +
	        'while (++argsIndex < argsLength) {\n' +
	        '  iterable = args[argsIndex];\n' +
	        '  if (iterable && objectTypes[typeof iterable]) {',
	      'keys': keys,
	      'loop': "if (typeof result[index] == 'undefined') result[index] = iterable[index]",
	      'bottom': '  }\n}'
	    };

	    /** Reusable iterator options for `forIn` and `forOwn` */
	    var forOwnIteratorOptions = {
	      'top': 'if (!objectTypes[typeof iterable]) return result;\n' + eachIteratorOptions.top,
	      'array': false
	    };

	    /**
	     * Used to convert characters to HTML entities:
	     *
	     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
	     * don't require escaping in HTML and have no special meaning unless they're part
	     * of a tag or an unquoted attribute value.
	     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
	     */
	    var htmlEscapes = {
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      "'": '&#39;'
	    };

	    /** Used to convert HTML entities to characters */
	    var htmlUnescapes = invert(htmlEscapes);

	    /** Used to match HTML entities and HTML characters */
	    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
	        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

	    /**
	     * A function compiled to iterate `arguments` objects, arrays, objects, and
	     * strings consistenly across environments, executing the callback for each
	     * element in the collection. The callback is bound to `thisArg` and invoked
	     * with three arguments; (value, index|key, collection). Callbacks may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @type Function
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createIterator(eachIteratorOptions);

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources will overwrite property assignments of previous
	     * sources. If a callback is provided it will be executed to produce the
	     * assigned values. The callback is bound to `thisArg` and invoked with two
	     * arguments; (objectValue, sourceValue).
	     *
	     * @static
	     * @memberOf _
	     * @type Function
	     * @alias extend
	     * @category Objects
	     * @param {Object} object The destination object.
	     * @param {...Object} [source] The source objects.
	     * @param {Function} [callback] The function to customize assigning values.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns the destination object.
	     * @example
	     *
	     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
	     * // => { 'name': 'fred', 'employer': 'slate' }
	     *
	     * var defaults = _.partialRight(_.assign, function(a, b) {
	     *   return typeof a == 'undefined' ? b : a;
	     * });
	     *
	     * var object = { 'name': 'barney' };
	     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
	     * // => { 'name': 'barney', 'employer': 'slate' }
	     */
	    var assign = createIterator(defaultsIteratorOptions, {
	      'top':
	        defaultsIteratorOptions.top.replace(';',
	          ';\n' +
	          "if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n" +
	          '  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n' +
	          "} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n" +
	          '  callback = args[--argsLength];\n' +
	          '}'
	        ),
	      'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'
	    });

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
	     * be cloned, otherwise they will be assigned by reference. If a callback
	     * is provided it will be executed to produce the cloned values. If the
	     * callback returns `undefined` cloning will be handled by the method instead.
	     * The callback is bound to `thisArg` and invoked with one argument; (value).
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep=false] Specify a deep clone.
	     * @param {Function} [callback] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * var shallow = _.clone(characters);
	     * shallow[0] === characters[0];
	     * // => true
	     *
	     * var deep = _.clone(characters, true);
	     * deep[0] === characters[0];
	     * // => false
	     *
	     * _.mixin({
	     *   'clone': _.partialRight(_.clone, function(value) {
	     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
	     *   })
	     * });
	     *
	     * var clone = _.clone(document.body);
	     * clone.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, callback, thisArg) {
	      // allows working with "Collections" methods without using their `index`
	      // and `collection` arguments for `isDeep` and `callback`
	      if (typeof isDeep != 'boolean' && isDeep != null) {
	        thisArg = callback;
	        callback = isDeep;
	        isDeep = false;
	      }
	      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
	    }

	    /**
	     * Creates a deep clone of `value`. If a callback is provided it will be
	     * executed to produce the cloned values. If the callback returns `undefined`
	     * cloning will be handled by the method instead. The callback is bound to
	     * `thisArg` and invoked with one argument; (value).
	     *
	     * Note: This method is loosely based on the structured clone algorithm. Functions
	     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
	     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
	     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to deep clone.
	     * @param {Function} [callback] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * var deep = _.cloneDeep(characters);
	     * deep[0] === characters[0];
	     * // => false
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'node': element
	     * };
	     *
	     * var clone = _.cloneDeep(view, function(value) {
	     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
	     * });
	     *
	     * clone.node == view.node;
	     * // => false
	     */
	    function cloneDeep(value, callback, thisArg) {
	      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
	    }

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties ? assign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional defaults of the same property will be ignored.
	     *
	     * @static
	     * @memberOf _
	     * @type Function
	     * @category Objects
	     * @param {Object} object The destination object.
	     * @param {...Object} [source] The source objects.
	     * @param- {Object} [guard] Allows working with `_.reduce` without using its
	     *  `key` and `object` arguments as sources.
	     * @returns {Object} Returns the destination object.
	     * @example
	     *
	     * var object = { 'name': 'barney' };
	     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
	     * // => { 'name': 'barney', 'employer': 'slate' }
	     */
	    var defaults = createIterator(defaultsIteratorOptions);

	    /**
	     * This method is like `_.findIndex` except that it returns the key of the
	     * first element that passes the callback check, instead of the element itself.
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [callback=identity] The function called per
	     *  iteration. If a property name or object is provided it will be used to
	     *  create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
	     * @example
	     *
	     * var characters = {
	     *   'barney': {  'age': 36, 'blocked': false },
	     *   'fred': {    'age': 40, 'blocked': true },
	     *   'pebbles': { 'age': 1,  'blocked': false }
	     * };
	     *
	     * _.findKey(characters, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (property order is not guaranteed across environments)
	     *
	     * // using "_.where" callback shorthand
	     * _.findKey(characters, { 'age': 1 });
	     * // => 'pebbles'
	     *
	     * // using "_.pluck" callback shorthand
	     * _.findKey(characters, 'blocked');
	     * // => 'fred'
	     */
	    function findKey(object, callback, thisArg) {
	      var result;
	      callback = lodash.createCallback(callback, thisArg, 3);
	      forOwn(object, function(value, key, object) {
	        if (callback(value, key, object)) {
	          result = key;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements
	     * of a `collection` in the opposite order.
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [callback=identity] The function called per
	     *  iteration. If a property name or object is provided it will be used to
	     *  create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
	     * @example
	     *
	     * var characters = {
	     *   'barney': {  'age': 36, 'blocked': true },
	     *   'fred': {    'age': 40, 'blocked': false },
	     *   'pebbles': { 'age': 1,  'blocked': true }
	     * };
	     *
	     * _.findLastKey(characters, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
	     *
	     * // using "_.where" callback shorthand
	     * _.findLastKey(characters, { 'age': 40 });
	     * // => 'fred'
	     *
	     * // using "_.pluck" callback shorthand
	     * _.findLastKey(characters, 'blocked');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, callback, thisArg) {
	      var result;
	      callback = lodash.createCallback(callback, thisArg, 3);
	      forOwnRight(object, function(value, key, object) {
	        if (callback(value, key, object)) {
	          result = key;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * Iterates over own and inherited enumerable properties of an object,
	     * executing the callback for each property. The callback is bound to `thisArg`
	     * and invoked with three arguments; (value, key, object). Callbacks may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @type Function
	     * @category Objects
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * Shape.prototype.move = function(x, y) {
	     *   this.x += x;
	     *   this.y += y;
	     * };
	     *
	     * _.forIn(new Shape, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
	     */
	    var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {
	      'useHas': false
	    });

	    /**
	     * This method is like `_.forIn` except that it iterates over elements
	     * of a `collection` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * Shape.prototype.move = function(x, y) {
	     *   this.x += x;
	     *   this.y += y;
	     * };
	     *
	     * _.forInRight(new Shape, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
	     */
	    function forInRight(object, callback, thisArg) {
	      var pairs = [];

	      forIn(object, function(value, key) {
	        pairs.push(key, value);
	      });

	      var length = pairs.length;
	      callback = baseCreateCallback(callback, thisArg, 3);
	      while (length--) {
	        if (callback(pairs[length--], pairs[length], object) === false) {
	          break;
	        }
	      }
	      return object;
	    }

	    /**
	     * Iterates over own enumerable properties of an object, executing the callback
	     * for each property. The callback is bound to `thisArg` and invoked with three
	     * arguments; (value, key, object). Callbacks may exit iteration early by
	     * explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @type Function
	     * @category Objects
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
	     *   console.log(key);
	     * });
	     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
	     */
	    var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);

	    /**
	     * This method is like `_.forOwn` except that it iterates over elements
	     * of a `collection` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
	     */
	    function forOwnRight(object, callback, thisArg) {
	      var props = keys(object),
	          length = props.length;

	      callback = baseCreateCallback(callback, thisArg, 3);
	      while (length--) {
	        var key = props[length];
	        if (callback(object[key], key, object) === false) {
	          break;
	        }
	      }
	      return object;
	    }

	    /**
	     * Creates a sorted array of property names of all enumerable properties,
	     * own and inherited, of `object` that have function values.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Objects
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns an array of property names that have function values.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
	     */
	    function functions(object) {
	      var result = [];
	      forIn(object, function(value, key) {
	        if (isFunction(value)) {
	          result.push(key);
	        }
	      });
	      return result.sort();
	    }

	    /**
	     * Checks if the specified property name exists as a direct property of `object`,
	     * instead of an inherited property.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to inspect.
	     * @param {string} key The name of the property to check.
	     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
	     * @example
	     *
	     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
	     * // => true
	     */
	    function has(object, key) {
	      return object ? hasOwnProperty.call(object, key) : false;
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of the given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the created inverted object.
	     * @example
	     *
	     * _.invert({ 'first': 'fred', 'second': 'barney' });
	     * // => { 'fred': 'first', 'barney': 'second' }
	     */
	    function invert(object) {
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        result[object[key]] = key;
	      }
	      return result;
	    }

	    /**
	     * Checks if `value` is a boolean value.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
	     * @example
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        value && typeof value == 'object' && toString.call(value) == boolClass || false;
	    }

	    /**
	     * Checks if `value` is a date.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     */
	    function isDate(value) {
	      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     */
	    function isElement(value) {
	      return value && value.nodeType === 1 || false;
	    }

	    /**
	     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
	     * length of `0` and objects with no own enumerable properties are considered
	     * "empty".
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({});
	     * // => true
	     *
	     * _.isEmpty('');
	     * // => true
	     */
	    function isEmpty(value) {
	      var result = true;
	      if (!value) {
	        return result;
	      }
	      var className = toString.call(value),
	          length = value.length;

	      if ((className == arrayClass || className == stringClass ||
	          (support.argsClass ? className == argsClass : isArguments(value))) ||
	          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
	        return !length;
	      }
	      forOwn(value, function() {
	        return (result = false);
	      });
	      return result;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent to each other. If a callback is provided it will be executed
	     * to compare values. If the callback returns `undefined` comparisons will
	     * be handled by the method instead. The callback is bound to `thisArg` and
	     * invoked with two arguments; (a, b).
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} a The value to compare.
	     * @param {*} b The other value to compare.
	     * @param {Function} [callback] The function to customize comparing values.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'name': 'fred' };
	     * var copy = { 'name': 'fred' };
	     *
	     * object == copy;
	     * // => false
	     *
	     * _.isEqual(object, copy);
	     * // => true
	     *
	     * var words = ['hello', 'goodbye'];
	     * var otherWords = ['hi', 'goodbye'];
	     *
	     * _.isEqual(words, otherWords, function(a, b) {
	     *   var reGreet = /^(?:hello|hi)$/i,
	     *       aGreet = _.isString(a) && reGreet.test(a),
	     *       bGreet = _.isString(b) && reGreet.test(b);
	     *
	     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
	     * });
	     * // => true
	     */
	    function isEqual(a, b, callback, thisArg) {
	      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
	    }

	    /**
	     * Checks if `value` is, or can be coerced to, a finite number.
	     *
	     * Note: This is not the same as native `isFinite` which will return true for
	     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
	     * @example
	     *
	     * _.isFinite(-101);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => true
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite('');
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
	    }

	    /**
	     * Checks if `value` is a function.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     */
	    function isFunction(value) {
	      return typeof value == 'function';
	    }
	    // fallback for older versions of Chrome and Safari
	    if (isFunction(/x/)) {
	      isFunction = function(value) {
	        return typeof value == 'function' && toString.call(value) == funcClass;
	      };
	    }

	    /**
	     * Checks if `value` is the language type of Object.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // check if the value is the ECMAScript language type of Object
	      // http://es5.github.io/#x8
	      // and avoid a V8 bug
	      // http://code.google.com/p/v8/issues/detail?id=2291
	      return !!(value && objectTypes[typeof value]);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * Note: This is not the same as native `isNaN` which will return `true` for
	     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // `NaN` as a primitive is the only value that is not equal to itself
	      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(undefined);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is a number.
	     *
	     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4 * 5);
	     * // => true
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        value && typeof value == 'object' && toString.call(value) == numberClass || false;
	    }

	    /**
	     * Checks if `value` is an object created by the `Object` constructor.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * _.isPlainObject(new Shape);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     */
	    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
	      if (!(value && toString.call(value) == objectClass) || (!support.argsClass && isArguments(value))) {
	        return false;
	      }
	      var valueOf = value.valueOf,
	          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

	      return objProto
	        ? (value == objProto || getPrototypeOf(value) == objProto)
	        : shimIsPlainObject(value);
	    };

	    /**
	     * Checks if `value` is a regular expression.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
	     * @example
	     *
	     * _.isRegExp(/fred/);
	     * // => true
	     */
	    function isRegExp(value) {
	      return value && objectTypes[typeof value] && toString.call(value) == regexpClass || false;
	    }

	    /**
	     * Checks if `value` is a string.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('fred');
	     * // => true
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        value && typeof value == 'object' && toString.call(value) == stringClass || false;
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     */
	    function isUndefined(value) {
	      return typeof value == 'undefined';
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through the callback.
	     * The callback is bound to `thisArg` and invoked with three arguments;
	     * (value, key, object).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
	     * // => { 'a': 3, 'b': 6, 'c': 9 }
	     *
	     * var characters = {
	     *   'fred': { 'name': 'fred', 'age': 40 },
	     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using "_.pluck" callback shorthand
	     * _.mapValues(characters, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 }
	     */
	    function mapValues(object, callback, thisArg) {
	      var result = {};
	      callback = lodash.createCallback(callback, thisArg, 3);

	      forOwn(object, function(value, key, object) {
	        result[key] = callback(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * will overwrite property assignments of previous sources. If a callback is
	     * provided it will be executed to produce the merged values of the destination
	     * and source properties. If the callback returns `undefined` merging will
	     * be handled by the method instead. The callback is bound to `thisArg` and
	     * invoked with two arguments; (objectValue, sourceValue).
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The destination object.
	     * @param {...Object} [source] The source objects.
	     * @param {Function} [callback] The function to customize merging properties.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns the destination object.
	     * @example
	     *
	     * var names = {
	     *   'characters': [
	     *     { 'name': 'barney' },
	     *     { 'name': 'fred' }
	     *   ]
	     * };
	     *
	     * var ages = {
	     *   'characters': [
	     *     { 'age': 36 },
	     *     { 'age': 40 }
	     *   ]
	     * };
	     *
	     * _.merge(names, ages);
	     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
	     *
	     * var food = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var otherFood = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(food, otherFood, function(a, b) {
	     *   return _.isArray(a) ? a.concat(b) : undefined;
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
	     */
	    function merge(object) {
	      var args = arguments,
	          length = 2;

	      if (!isObject(object)) {
	        return object;
	      }
	      // allows working with `_.reduce` and `_.reduceRight` without using
	      // their `index` and `collection` arguments
	      if (typeof args[2] != 'number') {
	        length = args.length;
	      }
	      if (length > 3 && typeof args[length - 2] == 'function') {
	        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
	      } else if (length > 2 && typeof args[length - 1] == 'function') {
	        callback = args[--length];
	      }
	      var sources = slice(arguments, 1, length),
	          index = -1,
	          stackA = getArray(),
	          stackB = getArray();

	      while (++index < length) {
	        baseMerge(object, sources[index], callback, stackA, stackB);
	      }
	      releaseArray(stackA);
	      releaseArray(stackB);
	      return object;
	    }

	    /**
	     * Creates a shallow clone of `object` excluding the specified properties.
	     * Property names may be specified as individual arguments or as arrays of
	     * property names. If a callback is provided it will be executed for each
	     * property of `object` omitting the properties the callback returns truey
	     * for. The callback is bound to `thisArg` and invoked with three arguments;
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The source object.
	     * @param {Function|...string|string[]} [callback] The properties to omit or the
	     *  function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns an object without the omitted properties.
	     * @example
	     *
	     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
	     * // => { 'name': 'fred' }
	     *
	     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
	     *   return typeof value == 'number';
	     * });
	     * // => { 'name': 'fred' }
	     */
	    function omit(object, callback, thisArg) {
	      var result = {};
	      if (typeof callback != 'function') {
	        var props = [];
	        forIn(object, function(value, key) {
	          props.push(key);
	        });
	        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

	        var index = -1,
	            length = props.length;

	        while (++index < length) {
	          var key = props[index];
	          result[key] = object[key];
	        }
	      } else {
	        callback = lodash.createCallback(callback, thisArg, 3);
	        forIn(object, function(value, key, object) {
	          if (!callback(value, key, object)) {
	            result[key] = value;
	          }
	        });
	      }
	      return result;
	    }

	    /**
	     * Creates a two dimensional array of an object's key-value pairs,
	     * i.e. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
	     */
	    function pairs(object) {
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates a shallow clone of `object` composed of the specified properties.
	     * Property names may be specified as individual arguments or as arrays of
	     * property names. If a callback is provided it will be executed for each
	     * property of `object` picking the properties the callback returns truey
	     * for. The callback is bound to `thisArg` and invoked with three arguments;
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The source object.
	     * @param {Function|...string|string[]} [callback] The function called per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns an object composed of the picked properties.
	     * @example
	     *
	     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
	     * // => { 'name': 'fred' }
	     *
	     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
	     *   return key.charAt(0) != '_';
	     * });
	     * // => { 'name': 'fred' }
	     */
	    function pick(object, callback, thisArg) {
	      var result = {};
	      if (typeof callback != 'function') {
	        var index = -1,
	            props = baseFlatten(arguments, true, false, 1),
	            length = isObject(object) ? props.length : 0;

	        while (++index < length) {
	          var key = props[index];
	          if (key in object) {
	            result[key] = object[key];
	          }
	        }
	      } else {
	        callback = lodash.createCallback(callback, thisArg, 3);
	        forIn(object, function(value, key, object) {
	          if (callback(value, key, object)) {
	            result[key] = value;
	          }
	        });
	      }
	      return result;
	    }

	    /**
	     * An alternative to `_.reduce` this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable properties through a callback, with each callback execution
	     * potentially mutating the `accumulator` object. The callback is bound to
	     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
	     * Callbacks may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
	     *   num *= num;
	     *   if (num % 2) {
	     *     return result.push(num) < 3;
	     *   }
	     * });
	     * // => [1, 9, 25]
	     *
	     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
	     *   result[key] = num * 3;
	     * });
	     * // => { 'a': 3, 'b': 6, 'c': 9 }
	     */
	    function transform(object, callback, accumulator, thisArg) {
	      var isArr = isArray(object);
	      if (accumulator == null) {
	        if (isArr) {
	          accumulator = [];
	        } else {
	          var ctor = object && object.constructor,
	              proto = ctor && ctor.prototype;

	          accumulator = baseCreate(proto);
	        }
	      }
	      if (callback) {
	        callback = lodash.createCallback(callback, thisArg, 4);
	        (isArr ? baseEach : forOwn)(object, function(value, index, object) {
	          return callback(accumulator, value, index, object);
	        });
	      }
	      return accumulator;
	    }

	    /**
	     * Creates an array composed of the own enumerable property values of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Objects
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns an array of property values.
	     * @example
	     *
	     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
	     * // => [1, 2, 3] (property order is not guaranteed across environments)
	     */
	    function values(object) {
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements from the specified indexes, or keys, of the
	     * `collection`. Indexes may be specified as individual arguments or as arrays
	     * of indexes.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
	     *   to retrieve, specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns a new array of elements corresponding to the
	     *  provided indexes.
	     * @example
	     *
	     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
	     * // => ['a', 'c', 'e']
	     *
	     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
	     * // => ['fred', 'pebbles']
	     */
	    function at(collection) {
	      var args = arguments,
	          index = -1,
	          props = baseFlatten(args, true, false, 1),
	          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
	          result = Array(length);

	      if (support.unindexedChars && isString(collection)) {
	        collection = collection.split('');
	      }
	      while(++index < length) {
	        result[index] = collection[props[index]];
	      }
	      return result;
	    }

	    /**
	     * Checks if a given value is present in a collection using strict equality
	     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
	     * offset from the end of the collection.
	     *
	     * @static
	     * @memberOf _
	     * @alias include
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {*} target The value to check for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
	     * @example
	     *
	     * _.contains([1, 2, 3], 1);
	     * // => true
	     *
	     * _.contains([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.contains('pebbles', 'eb');
	     * // => true
	     */
	    function contains(collection, target, fromIndex) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = collection ? collection.length : 0,
	          result = false;

	      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
	      if (isArray(collection)) {
	        result = indexOf(collection, target, fromIndex) > -1;
	      } else if (typeof length == 'number') {
	        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
	      } else {
	        baseEach(collection, function(value) {
	          if (++index >= fromIndex) {
	            return !(result = value === target);
	          }
	        });
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through the callback. The corresponding value
	     * of each key is the number of times the key was returned by the callback.
	     * The callback is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
	    });

	    /**
	     * Checks if the given callback returns truey value for **all** elements of
	     * a collection. The callback is bound to `thisArg` and invoked with three
	     * arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {boolean} Returns `true` if all elements passed the callback check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes']);
	     * // => false
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.every(characters, 'age');
	     * // => true
	     *
	     * // using "_.where" callback shorthand
	     * _.every(characters, { 'age': 36 });
	     * // => false
	     */
	    function every(collection, callback, thisArg) {
	      var result = true;
	      callback = lodash.createCallback(callback, thisArg, 3);

	      if (isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        while (++index < length) {
	          if (!(result = !!callback(collection[index], index, collection))) {
	            break;
	          }
	        }
	      } else {
	        baseEach(collection, function(value, index, collection) {
	          return (result = !!callback(value, index, collection));
	        });
	      }
	      return result;
	    }

	    /**
	     * Iterates over elements of a collection, returning an array of all elements
	     * the callback returns truey for. The callback is bound to `thisArg` and
	     * invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a new array of elements that passed the callback check.
	     * @example
	     *
	     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
	     * // => [2, 4, 6]
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36, 'blocked': false },
	     *   { 'name': 'fred',   'age': 40, 'blocked': true }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.filter(characters, 'blocked');
	     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
	     *
	     * // using "_.where" callback shorthand
	     * _.filter(characters, { 'age': 36 });
	     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
	     */
	    function filter(collection, callback, thisArg) {
	      var result = [];
	      callback = lodash.createCallback(callback, thisArg, 3);

	      if (isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        while (++index < length) {
	          var value = collection[index];
	          if (callback(value, index, collection)) {
	            result.push(value);
	          }
	        }
	      } else {
	        baseEach(collection, function(value, index, collection) {
	          if (callback(value, index, collection)) {
	            result.push(value);
	          }
	        });
	      }
	      return result;
	    }

	    /**
	     * Iterates over elements of a collection, returning the first element that
	     * the callback returns truey for. The callback is bound to `thisArg` and
	     * invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect, findWhere
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the found element, else `undefined`.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'age': 36, 'blocked': false },
	     *   { 'name': 'fred',    'age': 40, 'blocked': true },
	     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
	     * ];
	     *
	     * _.find(characters, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
	     *
	     * // using "_.where" callback shorthand
	     * _.find(characters, { 'age': 1 });
	     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
	     *
	     * // using "_.pluck" callback shorthand
	     * _.find(characters, 'blocked');
	     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
	     */
	    function find(collection, callback, thisArg) {
	      callback = lodash.createCallback(callback, thisArg, 3);

	      if (isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        while (++index < length) {
	          var value = collection[index];
	          if (callback(value, index, collection)) {
	            return value;
	          }
	        }
	      } else {
	        var result;
	        baseEach(collection, function(value, index, collection) {
	          if (callback(value, index, collection)) {
	            result = value;
	            return false;
	          }
	        });
	        return result;
	      }
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements
	     * of a `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the found element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(num) {
	     *   return num % 2 == 1;
	     * });
	     * // => 3
	     */
	    function findLast(collection, callback, thisArg) {
	      var result;
	      callback = lodash.createCallback(callback, thisArg, 3);
	      forEachRight(collection, function(value, index, collection) {
	        if (callback(value, index, collection)) {
	          result = value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * Iterates over elements of a collection, executing the callback for each
	     * element. The callback is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection). Callbacks may exit iteration early by
	     * explicitly returning `false`.
	     *
	     * Note: As with other "Collections" methods, objects with a `length` property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
	     * // => logs each number and returns '1,2,3'
	     *
	     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
	     * // => logs each number and returns the object (property order is not guaranteed across environments)
	     */
	    function forEach(collection, callback, thisArg) {
	      if (callback && typeof thisArg == 'undefined' && isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        while (++index < length) {
	          if (callback(collection[index], index, collection) === false) {
	            break;
	          }
	        }
	      } else {
	        baseEach(collection, callback, thisArg);
	      }
	      return collection;
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements
	     * of a `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
	     * // => logs each number from right to left and returns '3,2,1'
	     */
	    function forEachRight(collection, callback, thisArg) {
	      var iterable = collection,
	          length = collection ? collection.length : 0;

	      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
	      if (isArray(collection)) {
	        while (length--) {
	          if (callback(collection[length], length, collection) === false) {
	            break;
	          }
	        }
	      } else {
	        if (typeof length != 'number') {
	          var props = keys(collection);
	          length = props.length;
	        } else if (support.unindexedChars && isString(collection)) {
	          iterable = collection.split('');
	        }
	        baseEach(collection, function(value, key, collection) {
	          key = props ? props[--length] : --length;
	          return callback(iterable[key], key, collection);
	        });
	      }
	      return collection;
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of a collection through the callback. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The callback is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using "_.pluck" callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of the collection through the given callback. The corresponding
	     * value of each key is the last element responsible for generating the key.
	     * The callback is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keys = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keys, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method named by `methodName` on each element in the `collection`
	     * returning an array of the results of each invoked method. Additional arguments
	     * will be provided to each invoked method. If `methodName` is a function it
	     * will be invoked for, and `this` bound to, each element in the `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|string} methodName The name of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [arg] Arguments to invoke the method with.
	     * @returns {Array} Returns a new array of the results of each invoked method.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    function invoke(collection, methodName) {
	      var args = slice(arguments, 2),
	          index = -1,
	          isFunc = typeof methodName == 'function',
	          length = collection ? collection.length : 0,
	          result = Array(typeof length == 'number' ? length : 0);

	      forEach(collection, function(value) {
	        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
	      });
	      return result;
	    }

	    /**
	     * Creates an array of values by running each element in the collection
	     * through the callback. The callback is bound to `thisArg` and invoked with
	     * three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a new array of the results of each `callback` execution.
	     * @example
	     *
	     * _.map([1, 2, 3], function(num) { return num * 3; });
	     * // => [3, 6, 9]
	     *
	     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
	     * // => [3, 6, 9] (property order is not guaranteed across environments)
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.map(characters, 'name');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, callback, thisArg) {
	      var index = -1,
	          length = collection ? collection.length : 0,
	          result = Array(typeof length == 'number' ? length : 0);

	      callback = lodash.createCallback(callback, thisArg, 3);
	      if (isArray(collection)) {
	        while (++index < length) {
	          result[index] = callback(collection[index], index, collection);
	        }
	      } else {
	        baseEach(collection, function(value, key, collection) {
	          result[++index] = callback(value, key, collection);
	        });
	      }
	      return result;
	    }

	    /**
	     * Retrieves the maximum value of a collection. If the collection is empty or
	     * falsey `-Infinity` is returned. If a callback is provided it will be executed
	     * for each value in the collection to generate the criterion by which the value
	     * is ranked. The callback is bound to `thisArg` and invoked with three
	     * arguments; (value, index, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(characters, function(chr) { return chr.age; });
	     * // => { 'name': 'fred', 'age': 40 };
	     *
	     * // using "_.pluck" callback shorthand
	     * _.max(characters, 'age');
	     * // => { 'name': 'fred', 'age': 40 };
	     */
	    function max(collection, callback, thisArg) {
	      var computed = -Infinity,
	          result = computed;

	      // allows working with functions like `_.map` without using
	      // their `index` argument as a callback
	      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
	        callback = null;
	      }
	      if (callback == null && isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        while (++index < length) {
	          var value = collection[index];
	          if (value > result) {
	            result = value;
	          }
	        }
	      } else {
	        callback = (callback == null && isString(collection))
	          ? charAtCallback
	          : lodash.createCallback(callback, thisArg, 3);

	        baseEach(collection, function(value, index, collection) {
	          var current = callback(value, index, collection);
	          if (current > computed) {
	            computed = current;
	            result = value;
	          }
	        });
	      }
	      return result;
	    }

	    /**
	     * Retrieves the minimum value of a collection. If the collection is empty or
	     * falsey `Infinity` is returned. If a callback is provided it will be executed
	     * for each value in the collection to generate the criterion by which the value
	     * is ranked. The callback is bound to `thisArg` and invoked with three
	     * arguments; (value, index, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(characters, function(chr) { return chr.age; });
	     * // => { 'name': 'barney', 'age': 36 };
	     *
	     * // using "_.pluck" callback shorthand
	     * _.min(characters, 'age');
	     * // => { 'name': 'barney', 'age': 36 };
	     */
	    function min(collection, callback, thisArg) {
	      var computed = Infinity,
	          result = computed;

	      // allows working with functions like `_.map` without using
	      // their `index` argument as a callback
	      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
	        callback = null;
	      }
	      if (callback == null && isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        while (++index < length) {
	          var value = collection[index];
	          if (value < result) {
	            result = value;
	          }
	        }
	      } else {
	        callback = (callback == null && isString(collection))
	          ? charAtCallback
	          : lodash.createCallback(callback, thisArg, 3);

	        baseEach(collection, function(value, index, collection) {
	          var current = callback(value, index, collection);
	          if (current < computed) {
	            computed = current;
	            result = value;
	          }
	        });
	      }
	      return result;
	    }

	    /**
	     * Retrieves the value of a specified property from all elements in the collection.
	     *
	     * @static
	     * @memberOf _
	     * @type Function
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {string} property The name of the property to pluck.
	     * @returns {Array} Returns a new array of property values.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(characters, 'name');
	     * // => ['barney', 'fred']
	     */
	    var pluck = map;

	    /**
	     * Reduces a collection to a value which is the accumulated result of running
	     * each element in the collection through the callback, where each successive
	     * callback execution consumes the return value of the previous execution. If
	     * `accumulator` is not provided the first element of the collection will be
	     * used as the initial `accumulator` value. The callback is bound to `thisArg`
	     * and invoked with four arguments; (accumulator, value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [accumulator] Initial value of the accumulator.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var sum = _.reduce([1, 2, 3], function(sum, num) {
	     *   return sum + num;
	     * });
	     * // => 6
	     *
	     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
	     *   result[key] = num * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6, 'c': 9 }
	     */
	    function reduce(collection, callback, accumulator, thisArg) {
	      var noaccum = arguments.length < 3;
	      callback = lodash.createCallback(callback, thisArg, 4);

	      if (isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        if (noaccum) {
	          accumulator = collection[++index];
	        }
	        while (++index < length) {
	          accumulator = callback(accumulator, collection[index], index, collection);
	        }
	      } else {
	        baseEach(collection, function(value, index, collection) {
	          accumulator = noaccum
	            ? (noaccum = false, value)
	            : callback(accumulator, value, index, collection)
	        });
	      }
	      return accumulator;
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements
	     * of a `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [callback=identity] The function called per iteration.
	     * @param {*} [accumulator] Initial value of the accumulator.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var list = [[0, 1], [2, 3], [4, 5]];
	     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, callback, accumulator, thisArg) {
	      var noaccum = arguments.length < 3;
	      callback = lodash.createCallback(callback, thisArg, 4);
	      forEachRight(collection, function(value, index, collection) {
	        accumulator = noaccum
	          ? (noaccum = false, value)
	          : callback(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The opposite of `_.filter` this method returns the elements of a
	     * collection that the callback does **not** return truey for.
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a new array of elements that failed the callback check.
	     * @example
	     *
	     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
	     * // => [1, 3, 5]
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36, 'blocked': false },
	     *   { 'name': 'fred',   'age': 40, 'blocked': true }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.reject(characters, 'blocked');
	     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
	     *
	     * // using "_.where" callback shorthand
	     * _.reject(characters, { 'age': 36 });
	     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
	     */
	    function reject(collection, callback, thisArg) {
	      callback = lodash.createCallback(callback, thisArg, 3);
	      return filter(collection, function(value, index, collection) {
	        return !callback(value, index, collection);
	      });
	    }

	    /**
	     * Retrieves a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Allows working with functions like `_.map`
	     *  without using their `index` arguments as `n`.
	     * @returns {Array} Returns the random sample(s) of `collection`.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (collection && typeof collection.length != 'number') {
	        collection = values(collection);
	      } else if (support.unindexedChars && isString(collection)) {
	        collection = collection.split('');
	      }
	      if (n == null || guard) {
	        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
	      }
	      var result = shuffle(collection);
	      result.length = nativeMin(nativeMax(0, n), result.length);
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the Fisher-Yates
	     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns a new shuffled collection.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4, 5, 6]);
	     * // => [4, 1, 6, 3, 5, 2]
	     */
	    function shuffle(collection) {
	      var index = -1,
	          length = collection ? collection.length : 0,
	          result = Array(typeof length == 'number' ? length : 0);

	      forEach(collection, function(value) {
	        var rand = baseRandom(0, ++index);
	        result[index] = result[rand];
	        result[rand] = value;
	      });
	      return result;
	    }

	    /**
	     * Gets the size of the `collection` by returning `collection.length` for arrays
	     * and array-like objects or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns `collection.length` or number of own enumerable properties.
	     * @example
	     *
	     * _.size([1, 2]);
	     * // => 2
	     *
	     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
	     * // => 3
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? collection.length : 0;
	      return typeof length == 'number' ? length : keys(collection).length;
	    }

	    /**
	     * Checks if the callback returns a truey value for **any** element of a
	     * collection. The function returns as soon as it finds a passing value and
	     * does not iterate over the entire collection. The callback is bound to
	     * `thisArg` and invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {boolean} Returns `true` if any element passed the callback check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36, 'blocked': false },
	     *   { 'name': 'fred',   'age': 40, 'blocked': true }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.some(characters, 'blocked');
	     * // => true
	     *
	     * // using "_.where" callback shorthand
	     * _.some(characters, { 'age': 1 });
	     * // => false
	     */
	    function some(collection, callback, thisArg) {
	      var result;
	      callback = lodash.createCallback(callback, thisArg, 3);

	      if (isArray(collection)) {
	        var index = -1,
	            length = collection.length;

	        while (++index < length) {
	          if ((result = callback(collection[index], index, collection))) {
	            break;
	          }
	        }
	      } else {
	        baseEach(collection, function(value, index, collection) {
	          return !(result = callback(value, index, collection));
	        });
	      }
	      return !!result;
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through the callback. This method
	     * performs a stable sort, that is, it will preserve the original sort order
	     * of equal elements. The callback is bound to `thisArg` and invoked with
	     * three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an array of property names is provided for `callback` the collection
	     * will be sorted by each property value.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a new array of sorted elements.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
	     * // => [3, 1, 2]
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'age': 36 },
	     *   { 'name': 'fred',    'age': 40 },
	     *   { 'name': 'barney',  'age': 26 },
	     *   { 'name': 'fred',    'age': 30 }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.map(_.sortBy(characters, 'age'), _.values);
	     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
	     *
	     * // sorting by multiple properties
	     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
	     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
	     */
	    function sortBy(collection, callback, thisArg) {
	      var index = -1,
	          isArr = isArray(callback),
	          length = collection ? collection.length : 0,
	          result = Array(typeof length == 'number' ? length : 0);

	      if (!isArr) {
	        callback = lodash.createCallback(callback, thisArg, 3);
	      }
	      forEach(collection, function(value, key, collection) {
	        var object = result[++index] = getObject();
	        if (isArr) {
	          object.criteria = map(callback, function(key) { return value[key]; });
	        } else {
	          (object.criteria = getArray())[0] = callback(value, key, collection);
	        }
	        object.index = index;
	        object.value = value;
	      });

	      length = result.length;
	      result.sort(compareAscending);
	      while (length--) {
	        var object = result[length];
	        result[length] = object.value;
	        if (!isArr) {
	          releaseArray(object.criteria);
	        }
	        releaseObject(object);
	      }
	      return result;
	    }

	    /**
	     * Converts the `collection` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to convert.
	     * @returns {Array} Returns the new converted array.
	     * @example
	     *
	     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
	     * // => [2, 3, 4]
	     */
	    function toArray(collection) {
	      if (collection && typeof collection.length == 'number') {
	        return (support.unindexedChars && isString(collection))
	          ? collection.split('')
	          : slice(collection);
	      }
	      return values(collection);
	    }

	    /**
	     * Performs a deep comparison of each element in a `collection` to the given
	     * `properties` object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * @static
	     * @memberOf _
	     * @type Function
	     * @category Collections
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Object} props The object of property values to filter by.
	     * @returns {Array} Returns a new array of elements that have the given properties.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
	     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.where(characters, { 'age': 36 });
	     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
	     *
	     * _.where(characters, { 'pets': ['dino'] });
	     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
	     */
	    var where = filter;

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are all falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns a new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all values of the provided arrays using strict
	     * equality for comparisons, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to process.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns a new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
	     * // => [1, 3, 4]
	     */
	    function difference(array) {
	      return baseDifference(array, baseFlatten(arguments, true, true, 1));
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element that passes the callback check, instead of the element itself.
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'age': 36, 'blocked': false },
	     *   { 'name': 'fred',    'age': 40, 'blocked': true },
	     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
	     * ];
	     *
	     * _.findIndex(characters, function(chr) {
	     *   return chr.age < 20;
	     * });
	     * // => 2
	     *
	     * // using "_.where" callback shorthand
	     * _.findIndex(characters, { 'age': 36 });
	     * // => 0
	     *
	     * // using "_.pluck" callback shorthand
	     * _.findIndex(characters, 'blocked');
	     * // => 1
	     */
	    function findIndex(array, callback, thisArg) {
	      var index = -1,
	          length = array ? array.length : 0;

	      callback = lodash.createCallback(callback, thisArg, 3);
	      while (++index < length) {
	        if (callback(array[index], index, array)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of a `collection` from right to left.
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'age': 36, 'blocked': true },
	     *   { 'name': 'fred',    'age': 40, 'blocked': false },
	     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
	     * ];
	     *
	     * _.findLastIndex(characters, function(chr) {
	     *   return chr.age > 30;
	     * });
	     * // => 1
	     *
	     * // using "_.where" callback shorthand
	     * _.findLastIndex(characters, { 'age': 36 });
	     * // => 0
	     *
	     * // using "_.pluck" callback shorthand
	     * _.findLastIndex(characters, 'blocked');
	     * // => 2
	     */
	    function findLastIndex(array, callback, thisArg) {
	      var length = array ? array.length : 0;
	      callback = lodash.createCallback(callback, thisArg, 3);
	      while (length--) {
	        if (callback(array[length], length, array)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Gets the first element or first `n` elements of an array. If a callback
	     * is provided elements at the beginning of the array are returned as long
	     * as the callback returns truey. The callback is bound to `thisArg` and
	     * invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head, take
	     * @category Arrays
	     * @param {Array} array The array to query.
	     * @param {Function|Object|number|string} [callback] The function called
	     *  per element or the number of elements to return. If a property name or
	     *  object is provided it will be used to create a "_.pluck" or "_.where"
	     *  style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the first element(s) of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.first([1, 2, 3], function(num) {
	     *   return num < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
	     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
	     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.first(characters, 'blocked');
	     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
	     *
	     * // using "_.where" callback shorthand
	     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
	     * // => ['barney', 'fred']
	     */
	    function first(array, callback, thisArg) {
	      var n = 0,
	          length = array ? array.length : 0;

	      if (typeof callback != 'number' && callback != null) {
	        var index = -1;
	        callback = lodash.createCallback(callback, thisArg, 3);
	        while (++index < length && callback(array[index], index, array)) {
	          n++;
	        }
	      } else {
	        n = callback;
	        if (n == null || thisArg) {
	          return array ? array[0] : undefined;
	        }
	      }
	      return slice(array, 0, nativeMin(nativeMax(0, n), length));
	    }

	    /**
	     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
	     * is truey, the array will only be flattened a single level. If a callback
	     * is provided each element of the array is passed through the callback before
	     * flattening. The callback is bound to `thisArg` and invoked with three
	     * arguments; (value, index, array).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2], [3, [[4]]]]);
	     * // => [1, 2, 3, 4];
	     *
	     * _.flatten([1, [2], [3, [[4]]]], true);
	     * // => [1, 2, 3, [[4]]];
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
	     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.flatten(characters, 'pets');
	     * // => ['hoppy', 'baby puss', 'dino']
	     */
	    function flatten(array, isShallow, callback, thisArg) {
	      // juggle arguments
	      if (typeof isShallow != 'boolean' && isShallow != null) {
	        thisArg = callback;
	        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
	        isShallow = false;
	      }
	      if (callback != null) {
	        array = map(array, callback, thisArg);
	      }
	      return baseFlatten(array, isShallow);
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found using
	     * strict equality for comparisons, i.e. `===`. If the array is already sorted
	     * providing `true` for `fromIndex` will run a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value or `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
	     * // => 1
	     *
	     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
	     * // => 4
	     *
	     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      if (typeof fromIndex == 'number') {
	        var length = array ? array.length : 0;
	        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
	      } else if (fromIndex) {
	        var index = sortedIndex(array, value);
	        return array[index] === value ? index : -1;
	      }
	      return baseIndexOf(array, value, fromIndex);
	    }

	    /**
	     * Gets all but the last element or last `n` elements of an array. If a
	     * callback is provided elements at the end of the array are excluded from
	     * the result as long as the callback returns truey. The callback is bound
	     * to `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to query.
	     * @param {Function|Object|number|string} [callback=1] The function called
	     *  per element or the number of elements to exclude. If a property name or
	     *  object is provided it will be used to create a "_.pluck" or "_.where"
	     *  style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.initial([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.initial([1, 2, 3], function(num) {
	     *   return num > 1;
	     * });
	     * // => [1]
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
	     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
	     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.initial(characters, 'blocked');
	     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
	     *
	     * // using "_.where" callback shorthand
	     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
	     * // => ['barney', 'fred']
	     */
	    function initial(array, callback, thisArg) {
	      var n = 0,
	          length = array ? array.length : 0;

	      if (typeof callback != 'number' && callback != null) {
	        var index = length;
	        callback = lodash.createCallback(callback, thisArg, 3);
	        while (index-- && callback(array[index], index, array)) {
	          n++;
	        }
	      } else {
	        n = (callback == null || thisArg) ? 1 : callback || n;
	      }
	      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
	    }

	    /**
	     * Creates an array of unique values present in all provided arrays using
	     * strict equality for comparisons, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {...Array} [array] The arrays to inspect.
	     * @returns {Array} Returns an array of shared values.
	     * @example
	     *
	     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
	     * // => [1, 2]
	     */
	    function intersection() {
	      var args = [],
	          argsIndex = -1,
	          argsLength = arguments.length,
	          caches = getArray(),
	          indexOf = getIndexOf(),
	          trustIndexOf = indexOf === baseIndexOf,
	          seen = getArray();

	      while (++argsIndex < argsLength) {
	        var value = arguments[argsIndex];
	        if (isArray(value) || isArguments(value)) {
	          args.push(value);
	          caches.push(trustIndexOf && value.length >= largeArraySize &&
	            createCache(argsIndex ? args[argsIndex] : seen));
	        }
	      }
	      var array = args[0],
	          index = -1,
	          length = array ? array.length : 0,
	          result = [];

	      outer:
	      while (++index < length) {
	        var cache = caches[0];
	        value = array[index];

	        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
	          argsIndex = argsLength;
	          (cache || seen).push(value);
	          while (--argsIndex) {
	            cache = caches[argsIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	      }
	      while (argsLength--) {
	        cache = caches[argsLength];
	        if (cache) {
	          releaseObject(cache);
	        }
	      }
	      releaseArray(caches);
	      releaseArray(seen);
	      return result;
	    }

	    /**
	     * Gets the last element or last `n` elements of an array. If a callback is
	     * provided elements at the end of the array are returned as long as the
	     * callback returns truey. The callback is bound to `thisArg` and invoked
	     * with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to query.
	     * @param {Function|Object|number|string} [callback] The function called
	     *  per element or the number of elements to return. If a property name or
	     *  object is provided it will be used to create a "_.pluck" or "_.where"
	     *  style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {*} Returns the last element(s) of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     *
	     * _.last([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.last([1, 2, 3], function(num) {
	     *   return num > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
	     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
	     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.pluck(_.last(characters, 'blocked'), 'name');
	     * // => ['fred', 'pebbles']
	     *
	     * // using "_.where" callback shorthand
	     * _.last(characters, { 'employer': 'na' });
	     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
	     */
	    function last(array, callback, thisArg) {
	      var n = 0,
	          length = array ? array.length : 0;

	      if (typeof callback != 'number' && callback != null) {
	        var index = length;
	        callback = lodash.createCallback(callback, thisArg, 3);
	        while (index-- && callback(array[index], index, array)) {
	          n++;
	        }
	      } else {
	        n = callback;
	        if (n == null || thisArg) {
	          return array ? array[length - 1] : undefined;
	        }
	      }
	      return slice(array, nativeMax(0, length - n));
	    }

	    /**
	     * Gets the index at which the last occurrence of `value` is found using strict
	     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
	     * as the offset from the end of the collection.
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value or `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
	     * // => 4
	     *
	     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var index = array ? array.length : 0;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from the given array using strict equality for
	     * comparisons, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to modify.
	     * @param {...*} [value] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull(array) {
	      var args = arguments,
	          argsIndex = 0,
	          argsLength = args.length,
	          length = array ? array.length : 0;

	      while (++argsIndex < argsLength) {
	        var index = -1,
	            value = args[argsIndex];
	        while (++index < length) {
	          if (array[index] === value) {
	            splice.call(array, index--, 1);
	            length--;
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to but not including `end`. If `start` is less than `stop` a
	     * zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns a new range array.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      start = +start || 0;
	      step = typeof step == 'number' ? step : (+step || 1);

	      if (end == null) {
	        end = start;
	        start = 0;
	      }
	      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
	      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
	      var index = -1,
	          length = nativeMax(0, ceil((end - start) / (step || 1))),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Removes all elements from an array that the callback returns truey for
	     * and returns an array of removed elements. The callback is bound to `thisArg`
	     * and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4, 5, 6];
	     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
	     *
	     * console.log(array);
	     * // => [1, 3, 5]
	     *
	     * console.log(evens);
	     * // => [2, 4, 6]
	     */
	    function remove(array, callback, thisArg) {
	      var index = -1,
	          length = array ? array.length : 0,
	          result = [];

	      callback = lodash.createCallback(callback, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (callback(value, index, array)) {
	          result.push(value);
	          splice.call(array, index--, 1);
	          length--;
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.initial` this method gets all but the first element or
	     * first `n` elements of an array. If a callback function is provided elements
	     * at the beginning of the array are excluded from the result as long as the
	     * callback returns truey. The callback is bound to `thisArg` and invoked
	     * with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias drop, tail
	     * @category Arrays
	     * @param {Array} array The array to query.
	     * @param {Function|Object|number|string} [callback=1] The function called
	     *  per element or the number of elements to exclude. If a property name or
	     *  object is provided it will be used to create a "_.pluck" or "_.where"
	     *  style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.rest([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.rest([1, 2, 3], function(num) {
	     *   return num < 3;
	     * });
	     * // => [3]
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
	     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
	     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
	     * ];
	     *
	     * // using "_.pluck" callback shorthand
	     * _.pluck(_.rest(characters, 'blocked'), 'name');
	     * // => ['fred', 'pebbles']
	     *
	     * // using "_.where" callback shorthand
	     * _.rest(characters, { 'employer': 'slate' });
	     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
	     */
	    function rest(array, callback, thisArg) {
	      if (typeof callback != 'number' && callback != null) {
	        var n = 0,
	            index = -1,
	            length = array ? array.length : 0;

	        callback = lodash.createCallback(callback, thisArg, 3);
	        while (++index < length && callback(array[index], index, array)) {
	          n++;
	        }
	      } else {
	        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
	      }
	      return slice(array, n);
	    }

	    /**
	     * Uses a binary search to determine the smallest index at which a value
	     * should be inserted into a given sorted array in order to maintain the sort
	     * order of the array. If a callback is provided it will be executed for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * callback is bound to `thisArg` and invoked with one argument; (value).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([20, 30, 50], 40);
	     * // => 2
	     *
	     * // using "_.pluck" callback shorthand
	     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 2
	     *
	     * var dict = {
	     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
	     * };
	     *
	     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
	     *   return dict.wordToNumber[word];
	     * });
	     * // => 2
	     *
	     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
	     *   return this.wordToNumber[word];
	     * }, dict);
	     * // => 2
	     */
	    function sortedIndex(array, value, callback, thisArg) {
	      var low = 0,
	          high = array ? array.length : low;

	      // explicitly reference `identity` for better inlining in Firefox
	      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
	      value = callback(value);

	      while (low < high) {
	        var mid = (low + high) >>> 1;
	        (callback(array[mid]) < value)
	          ? low = mid + 1
	          : high = mid;
	      }
	      return low;
	    }

	    /**
	     * Creates an array of unique values, in order, of the provided arrays using
	     * strict equality for comparisons, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {...Array} [array] The arrays to inspect.
	     * @returns {Array} Returns an array of combined values.
	     * @example
	     *
	     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
	     * // => [1, 2, 3, 5, 4]
	     */
	    function union() {
	      return baseUniq(baseFlatten(arguments, true, true));
	    }

	    /**
	     * Creates a duplicate-value-free version of an array using strict equality
	     * for comparisons, i.e. `===`. If the array is sorted, providing
	     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
	     * each element of `array` is passed through the callback before uniqueness
	     * is computed. The callback is bound to `thisArg` and invoked with three
	     * arguments; (value, index, array).
	     *
	     * If a property name is provided for `callback` the created "_.pluck" style
	     * callback will return the property value of the given element.
	     *
	     * If an object is provided for `callback` the created "_.where" style callback
	     * will return `true` for elements that have the properties of the given object,
	     * else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Arrays
	     * @param {Array} array The array to process.
	     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
	     * @param {Function|Object|string} [callback=identity] The function called
	     *  per iteration. If a property name or object is provided it will be used
	     *  to create a "_.pluck" or "_.where" style callback, respectively.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns a duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([1, 2, 1, 3, 1]);
	     * // => [1, 2, 3]
	     *
	     * _.uniq([1, 1, 2, 2, 3], true);
	     * // => [1, 2, 3]
	     *
	     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
	     * // => ['A', 'b', 'C']
	     *
	     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
	     * // => [1, 2.5, 3]
	     *
	     * // using "_.pluck" callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, callback, thisArg) {
	      // juggle arguments
	      if (typeof isSorted != 'boolean' && isSorted != null) {
	        thisArg = callback;
	        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
	        isSorted = false;
	      }
	      if (callback != null) {
	        callback = lodash.createCallback(callback, thisArg, 3);
	      }
	      return baseUniq(array, isSorted, callback);
	    }

	    /**
	     * Creates an array excluding all provided values using strict equality for
	     * comparisons, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {Array} array The array to filter.
	     * @param {...*} [value] The values to exclude.
	     * @returns {Array} Returns a new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
	     * // => [2, 3, 4]
	     */
	    function without(array) {
	      return baseDifference(array, slice(arguments, 1));
	    }

	    /**
	     * Creates an array that is the symmetric difference of the provided arrays.
	     * See http://en.wikipedia.org/wiki/Symmetric_difference.
	     *
	     * @static
	     * @memberOf _
	     * @category Arrays
	     * @param {...Array} [array] The arrays to inspect.
	     * @returns {Array} Returns an array of values.
	     * @example
	     *
	     * _.xor([1, 2, 3], [5, 2, 1, 4]);
	     * // => [3, 5, 4]
	     *
	     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
	     * // => [1, 4, 5]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArray(array) || isArguments(array)) {
	          var result = result
	            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
	            : array;
	        }
	      }
	      return result || [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second
	     * elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @alias unzip
	     * @category Arrays
	     * @param {...Array} [array] Arrays to process.
	     * @returns {Array} Returns a new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    function zip() {
	      var array = arguments.length > 1 ? arguments : arguments[0],
	          index = -1,
	          length = array ? max(pluck(array, 'length')) : 0,
	          result = Array(length < 0 ? 0 : length);

	      while (++index < length) {
	        result[index] = pluck(array, index);
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed from arrays of `keys` and `values`. Provide
	     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
	     * or two arrays, one of `keys` and one of corresponding `values`.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Arrays
	     * @param {Array} keys The array of keys.
	     * @param {Array} [values=[]] The array of values.
	     * @returns {Object} Returns an object composed of the given keys and
	     *  corresponding values.
	     * @example
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(keys, values) {
	      var index = -1,
	          length = keys ? keys.length : 0,
	          result = {};

	      if (!values && length && !isArray(keys[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = keys[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Creates a function that executes `func`, with  the `this` binding and
	     * arguments of the created function, only after being called `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {number} n The number of times the function must be called before
	     *  `func` is executed.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('Done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'Done saving!', after all saves have completed
	     */
	    function after(n, func) {
	      if (!isFunction(func)) {
	        throw new TypeError;
	      }
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that, when called, invokes `func` with the `this`
	     * binding of `thisArg` and prepends any additional `bind` arguments to those
	     * provided to the bound function.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {...*} [arg] Arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var func = function(greeting) {
	     *   return greeting + ' ' + this.name;
	     * };
	     *
	     * func = _.bind(func, { 'name': 'fred' }, 'hi');
	     * func();
	     * // => 'hi fred'
	     */
	    function bind(func, thisArg) {
	      return arguments.length > 2
	        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
	        : createWrapper(func, 1, null, null, thisArg);
	    }

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all the function properties
	     * of `object` will be bound.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...string} [methodName] The object method names to
	     *  bind, specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() { console.log('clicked ' + this.label); }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs', when the button is clicked
	     */
	    function bindAll(object) {
	      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
	          index = -1,
	          length = funcs.length;

	      while (++index < length) {
	        var key = funcs[index];
	        object[key] = createWrapper(object[key], 1, null, null, object);
	      }
	      return object;
	    }

	    /**
	     * Creates a function that, when called, invokes the method at `object[key]`
	     * and prepends any additional `bindKey` arguments to those provided to the bound
	     * function. This method differs from `_.bind` by allowing bound functions to
	     * reference methods that will be redefined or don't yet exist.
	     * See http://michaux.ca/articles/lazy-function-definition-pattern.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [arg] Arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'name': 'fred',
	     *   'greet': function(greeting) {
	     *     return greeting + ' ' + this.name;
	     *   }
	     * };
	     *
	     * var func = _.bindKey(object, 'greet', 'hi');
	     * func();
	     * // => 'hi fred'
	     *
	     * object.greet = function(greeting) {
	     *   return greeting + 'ya ' + this.name + '!';
	     * };
	     *
	     * func();
	     * // => 'hiya fred!'
	     */
	    function bindKey(object, key) {
	      return arguments.length > 2
	        ? createWrapper(key, 19, slice(arguments, 2), null, object)
	        : createWrapper(key, 3, null, null, object);
	    }

	    /**
	     * Creates a function that is the composition of the provided functions,
	     * where each function consumes the return value of the function that follows.
	     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
	     * Each function is executed with the `this` binding of the composed function.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {...Function} [func] Functions to compose.
	     * @returns {Function} Returns the new composed function.
	     * @example
	     *
	     * var realNameMap = {
	     *   'pebbles': 'penelope'
	     * };
	     *
	     * var format = function(name) {
	     *   name = realNameMap[name.toLowerCase()] || name;
	     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
	     * };
	     *
	     * var greet = function(formatted) {
	     *   return 'Hiya ' + formatted + '!';
	     * };
	     *
	     * var welcome = _.compose(greet, format);
	     * welcome('pebbles');
	     * // => 'Hiya Penelope!'
	     */
	    function compose() {
	      var funcs = arguments,
	          length = funcs.length;

	      while (length--) {
	        if (!isFunction(funcs[length])) {
	          throw new TypeError;
	        }
	      }
	      return function() {
	        var args = arguments,
	            length = funcs.length;

	        while (length--) {
	          args = [funcs[length].apply(this, args)];
	        }
	        return args[0];
	      };
	    }

	    /**
	     * Creates a function which accepts one or more arguments of `func` that when
	     * invoked either executes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` can be specified
	     * if `func.length` is not sufficient.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var curried = _.curry(function(a, b, c) {
	     *   console.log(a + b + c);
	     * });
	     *
	     * curried(1)(2)(3);
	     * // => 6
	     *
	     * curried(1, 2)(3);
	     * // => 6
	     *
	     * curried(1, 2, 3);
	     * // => 6
	     */
	    function curry(func, arity) {
	      arity = typeof arity == 'number' ? arity : (+arity || func.length);
	      return createWrapper(func, 4, null, null, null, arity);
	    }

	    /**
	     * Creates a function that will delay the execution of `func` until after
	     * `wait` milliseconds have elapsed since the last time it was invoked.
	     * Provide an options object to indicate that `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
	     * to the debounced function will return the result of the last `func` call.
	     *
	     * Note: If `leading` and `trailing` options are `true` `func` will be called
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to debounce.
	     * @param {number} wait The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
	     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * var lazyLayout = _.debounce(calculateLayout, 150);
	     * jQuery(window).on('resize', lazyLayout);
	     *
	     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * });
	     *
	     * // ensure `batchLog` is executed once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * source.addEventListener('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }, false);
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (!isFunction(func)) {
	        throw new TypeError;
	      }
	      wait = nativeMax(0, wait) || 0;
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = options.leading;
	        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
	        trailing = 'trailing' in options ? options.trailing : trailing;
	      }
	      var delayed = function() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0) {
	          if (maxTimeoutId) {
	            clearTimeout(maxTimeoutId);
	          }
	          var isCalled = trailingCall;
	          maxTimeoutId = timeoutId = trailingCall = undefined;
	          if (isCalled) {
	            lastCalled = now();
	            result = func.apply(thisArg, args);
	            if (!timeoutId && !maxTimeoutId) {
	              args = thisArg = null;
	            }
	          }
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      };

	      var maxDelayed = function() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (trailing || (maxWait !== wait)) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = null;
	          }
	        }
	      };

	      return function() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	        return result;
	      };
	    }

	    /**
	     * Defers executing the `func` function until the current call stack has cleared.
	     * Additional arguments will be provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to defer.
	     * @param {...*} [arg] Arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) { console.log(text); }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    function defer(func) {
	      if (!isFunction(func)) {
	        throw new TypeError;
	      }
	      var args = slice(arguments, 1);
	      return setTimeout(function() { func.apply(undefined, args); }, 1);
	    }

	    /**
	     * Executes the `func` function after `wait` milliseconds. Additional arguments
	     * will be provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay execution.
	     * @param {...*} [arg] Arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) { console.log(text); }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    function delay(func, wait) {
	      if (!isFunction(func)) {
	        throw new TypeError;
	      }
	      var args = slice(arguments, 2);
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it will be used to determine the cache key for storing the result
	     * based on the arguments provided to the memoized function. By default, the
	     * first argument provided to the memoized function is used as the cache key.
	     * The `func` is executed with the `this` binding of the memoized function.
	     * The result cache is exposed as the `cache` property on the memoized function.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] A function used to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var fibonacci = _.memoize(function(n) {
	     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
	     * });
	     *
	     * fibonacci(9)
	     * // => 34
	     *
	     * var data = {
	     *   'fred': { 'name': 'fred', 'age': 40 },
	     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // modifying the result cache
	     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
	     * get('pebbles');
	     * // => { 'name': 'pebbles', 'age': 1 }
	     *
	     * get.cache.pebbles.name = 'penelope';
	     * get('pebbles');
	     * // => { 'name': 'penelope', 'age': 1 }
	     */
	    function memoize(func, resolver) {
	      if (!isFunction(func)) {
	        throw new TypeError;
	      }
	      var memoized = function() {
	        var cache = memoized.cache,
	            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

	        return hasOwnProperty.call(cache, key)
	          ? cache[key]
	          : (cache[key] = func.apply(this, arguments));
	      }
	      memoized.cache = {};
	      return memoized;
	    }

	    /**
	     * Creates a function that is restricted to execute `func` once. Repeat calls to
	     * the function will return the value of the first call. The `func` is executed
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` executes `createApplication` once
	     */
	    function once(func) {
	      var ran,
	          result;

	      if (!isFunction(func)) {
	        throw new TypeError;
	      }
	      return function() {
	        if (ran) {
	          return result;
	        }
	        ran = true;
	        result = func.apply(this, arguments);

	        // clear the `func` variable so the function may be garbage collected
	        func = null;
	        return result;
	      };
	    }

	    /**
	     * Creates a function that, when called, invokes `func` with any additional
	     * `partial` arguments prepended to those provided to the new function. This
	     * method is similar to `_.bind` except it does **not** alter the `this` binding.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [arg] Arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) { return greeting + ' ' + name; };
	     * var hi = _.partial(greet, 'hi');
	     * hi('fred');
	     * // => 'hi fred'
	     */
	    function partial(func) {
	      return createWrapper(func, 16, slice(arguments, 1));
	    }

	    /**
	     * This method is like `_.partial` except that `partial` arguments are
	     * appended to those provided to the new function.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [arg] Arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
	     *
	     * var options = {
	     *   'variable': 'data',
	     *   'imports': { 'jq': $ }
	     * };
	     *
	     * defaultsDeep(options, _.templateSettings);
	     *
	     * options.variable
	     * // => 'data'
	     *
	     * options.imports
	     * // => { '_': _, 'jq': $ }
	     */
	    function partialRight(func) {
	      return createWrapper(func, 32, null, slice(arguments, 1));
	    }

	    /**
	     * Creates a function that, when executed, will only call the `func` function
	     * at most once per every `wait` milliseconds. Provide an options object to
	     * indicate that `func` should be invoked on the leading and/or trailing edge
	     * of the `wait` timeout. Subsequent calls to the throttled function will
	     * return the result of the last `func` call.
	     *
	     * Note: If `leading` and `trailing` options are `true` `func` will be called
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {Function} func The function to throttle.
	     * @param {number} wait The number of milliseconds to throttle executions to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * var throttled = _.throttle(updatePosition, 100);
	     * jQuery(window).on('scroll', throttled);
	     *
	     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (!isFunction(func)) {
	        throw new TypeError;
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? options.leading : leading;
	        trailing = 'trailing' in options ? options.trailing : trailing;
	      }
	      debounceOptions.leading = leading;
	      debounceOptions.maxWait = wait;
	      debounceOptions.trailing = trailing;

	      return debounce(func, wait, debounceOptions);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Additional arguments provided to the function are appended
	     * to those provided to the wrapper function. The wrapper is executed with
	     * the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Functions
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('Fred, Wilma, & Pebbles');
	     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return createWrapper(wrapper, 16, [value]);
	    }

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'name': 'fred' };
	     * var getter = _.constant(object);
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Produces a callback bound to an optional `thisArg`. If `func` is a property
	     * name the created callback will return the property value for a given element.
	     * If `func` is an object the created callback will return `true` for elements
	     * that contain the equivalent object properties, otherwise it will return `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {*} [func=identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of the created callback.
	     * @param {number} [argCount] The number of arguments the callback accepts.
	     * @returns {Function} Returns a callback function.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
	     *   return !match ? func(callback, thisArg) : function(object) {
	     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(characters, 'age__gt38');
	     * // => [{ 'name': 'fred', 'age': 40 }]
	     */
	    function createCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (func == null || type == 'function') {
	        return baseCreateCallback(func, thisArg, argCount);
	      }
	      // handle "_.pluck" style callback shorthands
	      if (type != 'object') {
	        return property(func);
	      }
	      var props = keys(func),
	          key = props[0],
	          a = func[key];

	      // handle "_.where" style callback shorthands
	      if (props.length == 1 && a === a && !isObject(a)) {
	        // fast path the common case of providing an object with a single
	        // property containing a primitive value
	        return function(object) {
	          var b = object[key];
	          return a === b && (a !== 0 || (1 / a == 1 / b));
	        };
	      }
	      return function(object) {
	        var length = props.length,
	            result = false;

	        while (length--) {
	          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
	            break;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
	     * corresponding HTML entities.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {string} string The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('Fred, Wilma, & Pebbles');
	     * // => 'Fred, Wilma, &amp; Pebbles'
	     */
	    function escape(string) {
	      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'name': 'fred' };
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Adds function properties of a source object to the destination object.
	     * If `object` is a function methods will be added to its prototype as well.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {Function|Object} [object=lodash] object The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
	     * @example
	     *
	     * function capitalize(string) {
	     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
	     * }
	     *
	     * _.mixin({ 'capitalize': capitalize });
	     * _.capitalize('fred');
	     * // => 'Fred'
	     *
	     * _('fred').capitalize().value();
	     * // => 'Fred'
	     *
	     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
	     * _('fred').capitalize();
	     * // => 'Fred'
	     */
	    function mixin(object, source, options) {
	      var chain = true,
	          methodNames = source && functions(source);

	      if (!source || (!options && !methodNames.length)) {
	        if (options == null) {
	          options = source;
	        }
	        ctor = lodashWrapper;
	        source = object;
	        object = lodash;
	        methodNames = functions(source);
	      }
	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      var ctor = object,
	          isFunc = isFunction(ctor);

	      forEach(methodNames, function(methodName) {
	        var func = object[methodName] = source[methodName];
	        if (isFunc) {
	          ctor.prototype[methodName] = function() {
	            var chainAll = this.__chain__,
	                value = this.__wrapped__,
	                args = [value];

	            push.apply(args, arguments);
	            var result = func.apply(object, args);
	            if (chain || chainAll) {
	              if (value === result && isObject(result)) {
	                return this;
	              }
	              result = new ctor(result);
	              result.__chain__ = chainAll;
	            }
	            return result;
	          };
	        }
	      });
	    }

	    /**
	     * Reverts the '_' variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      context._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @example
	     *
	     * var object = { 'name': 'fred' };
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // no operation performed
	    }

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @example
	     *
	     * var stamp = _.now();
	     * _.defer(function() { console.log(_.now() - stamp); });
	     * // => logs the number of milliseconds it took for the deferred function to be called
	     */
	    var now = isNative(now = Date.now) && now || function() {
	      return new Date().getTime();
	    };

	    /**
	     * Converts the given value into an integer of the specified radix.
	     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
	     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
	     * implementations. See http://es5.github.io/#E.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {string} value The value to parse.
	     * @param {number} [radix] The radix used to interpret the value to parse.
	     * @returns {number} Returns the new integer value.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     */
	    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
	      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
	      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
	    };

	    /**
	     * Creates a "_.pluck" style function, which returns the `key` value of a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {string} key The name of the property to retrieve.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'fred',   'age': 40 },
	     *   { 'name': 'barney', 'age': 36 }
	     * ];
	     *
	     * var getName = _.property('name');
	     *
	     * _.map(characters, getName);
	     * // => ['barney', 'fred']
	     *
	     * _.sortBy(characters, getName);
	     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
	     */
	    function property(key) {
	      return function(object) {
	        return object[key];
	      };
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number will be
	     * returned. If `floating` is truey or either `min` or `max` are floats a
	     * floating-point number will be returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating=false] Specify returning a floating-point number.
	     * @returns {number} Returns a random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (typeof min == 'boolean' && noMax) {
	          floating = min;
	          min = 1;
	        }
	        else if (!noMax && typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /**
	     * Resolves the value of property `key` on `object`. If `key` is a function
	     * it will be invoked with the `this` binding of `object` and its result returned,
	     * else the property value is returned. If `object` is falsey then `undefined`
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {Object} object The object to inspect.
	     * @param {string} key The name of the property to resolve.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = {
	     *   'cheese': 'crumpets',
	     *   'stuff': function() {
	     *     return 'nonsense';
	     *   }
	     * };
	     *
	     * _.result(object, 'cheese');
	     * // => 'crumpets'
	     *
	     * _.result(object, 'stuff');
	     * // => 'nonsense'
	     */
	    function result(object, key) {
	      if (object) {
	        var value = object[key];
	        return isFunction(value) ? object[key]() : value;
	      }
	    }

	    /**
	     * A micro-templating method that handles arbitrary delimiters, preserves
	     * whitespace, and correctly escapes quotes within interpolated code.
	     *
	     * Note: In the development build, `_.template` utilizes sourceURLs for easier
	     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
	     *
	     * For more information on precompiling templates see:
	     * http://lodash.com/custom-builds
	     *
	     * For more information on Chrome extension sandboxes see:
	     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {string} text The template text.
	     * @param {Object} data The data object used to populate the text.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as local variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [variable] The data object variable name.
	     * @returns {Function|string} Returns a compiled function when no `data` object
	     *  is given, else it returns the interpolated text.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= name %>');
	     * compiled({ 'name': 'fred' });
	     * // => 'hello fred'
	     *
	     * // using the "escape" delimiter to escape HTML in data property values
	     * _.template('<b><%- value %></b>', { 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to generate HTML
	     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
	     * _.template(list, { 'people': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
	     * _.template('hello ${ name }', { 'name': 'pebbles' });
	     * // => 'hello pebbles'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using a custom template delimiters
	     * _.templateSettings = {
	     *   'interpolate': /{{([\s\S]+?)}}/g
	     * };
	     *
	     * _.template('hello {{ name }}!', { 'name': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using the `imports` option to import jQuery
	     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
	     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     *   var __t, __p = '', __e = _.escape;
	     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
	     *   return __p;
	     * }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(text, data, options) {
	      // based on John Resig's `tmpl` implementation
	      // http://ejohn.org/blog/javascript-micro-templating/
	      // and Laura Doktorova's doT.js
	      // https://github.com/olado/doT
	      var settings = lodash.templateSettings;
	      text = String(text || '');

	      // avoid missing dependencies when `iteratorTemplate` is not defined
	      options = defaults({}, options, settings);

	      var imports = defaults({}, options.imports, settings.imports),
	          importsKeys = keys(imports),
	          importsValues = values(imports);

	      var isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // compile the regexp to match each delimiter
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // escape characters that cannot be included in string literals
	        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // replace delimiters with snippets
	        if (escapeValue) {
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // the JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value
	        return match;
	      });

	      source += "';\n";

	      // if `variable` is not specified, wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain
	      var variable = options.variable,
	          hasVariable = variable;

	      if (!hasVariable) {
	        variable = 'obj';
	        source = 'with (' + variable + ') {\n' + source + '\n}\n';
	      }
	      // cleanup code by stripping empty strings
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // frame code as the function body
	      source = 'function(' + variable + ') {\n' +
	        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
	        "var __t, __p = '', __e = _.escape" +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      // Use a sourceURL for easier debugging.
	      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
	      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

	      try {
	        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
	      } catch(e) {
	        e.source = source;
	        throw e;
	      }
	      if (data) {
	        return result(data);
	      }
	      // provide the compiled function's source by its `toString` method, in
	      // supported environments, or the `source` property as a convenience for
	      // inlining compiled templates during the build process
	      result.source = source;
	      return result;
	    }

	    /**
	     * Executes the callback `n` times, returning an array of the results
	     * of each callback execution. The callback is bound to `thisArg` and invoked
	     * with one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {number} n The number of times to execute the callback.
	     * @param {Function} callback The function called per iteration.
	     * @param {*} [thisArg] The `this` binding of `callback`.
	     * @returns {Array} Returns an array of the results of each `callback` execution.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) { mage.castSpell(n); });
	     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
	     *
	     * _.times(3, function(n) { this.cast(n); }, mage);
	     * // => also calls `mage.castSpell(n)` three times
	     */
	    function times(n, callback, thisArg) {
	      n = (n = +n) > -1 ? n : 0;
	      var index = -1,
	          result = Array(n);

	      callback = baseCreateCallback(callback, thisArg, 1);
	      while (++index < n) {
	        result[index] = callback(index);
	      }
	      return result;
	    }

	    /**
	     * The inverse of `_.escape` this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
	     * corresponding characters.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {string} string The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('Fred, Barney &amp; Pebbles');
	     * // => 'Fred, Barney & Pebbles'
	     */
	    function unescape(string) {
	      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utilities
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return String(prefix == null ? '' : prefix) + id;
	    }

	    /*--------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps the given value with explicit
	     * method chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chaining
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney',  'age': 36 },
	     *   { 'name': 'fred',    'age': 40 },
	     *   { 'name': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(characters)
	     *     .sortBy('age')
	     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
	     *     .first()
	     *     .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      value = new lodashWrapper(value);
	      value.__chain__ = true;
	      return value;
	    }

	    /**
	     * Invokes `interceptor` with the `value` as the first argument and then
	     * returns `value`. The purpose of this method is to "tap into" a method
	     * chain in order to perform operations on intermediate results within
	     * the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chaining
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3, 4])
	     *  .tap(function(array) { array.pop(); })
	     *  .reverse()
	     *  .value();
	     * // => [3, 2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chaining
	     * @returns {*} Returns the wrapper object.
	     * @example
	     *
	     * var characters = [
	     *   { 'name': 'barney', 'age': 36 },
	     *   { 'name': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(characters).first();
	     * // => { 'name': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(characters).chain()
	     *   .first()
	     *   .pick('age')
	     *   .value();
	     * // => { 'age': 36 }
	     */
	    function wrapperChain() {
	      this.__chain__ = true;
	      return this;
	    }

	    /**
	     * Produces the `toString` result of the wrapped value.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chaining
	     * @returns {string} Returns the string result.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return String(this.__wrapped__);
	    }

	    /**
	     * Extracts the wrapped value.
	     *
	     * @name valueOf
	     * @memberOf _
	     * @alias value
	     * @category Chaining
	     * @returns {*} Returns the wrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).valueOf();
	     * // => [1, 2, 3]
	     */
	    function wrapperValueOf() {
	      return this.__wrapped__;
	    }

	    /*--------------------------------------------------------------------------*/

	    // add functions that return wrapped values when chaining
	    lodash.after = after;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.chain = chain;
	    lodash.compact = compact;
	    lodash.compose = compose;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.createCallback = createCallback;
	    lodash.curry = curry;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.map = map;
	    lodash.mapValues = mapValues;
	    lodash.max = max;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.min = min;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.pull = pull;
	    lodash.range = range;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.shuffle = shuffle;
	    lodash.sortBy = sortBy;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.values = values;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;

	    // add aliases
	    lodash.collect = map;
	    lodash.drop = rest;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;
	    lodash.unzip = zip;

	    // add functions to `lodash.prototype`
	    mixin(lodash);

	    /*--------------------------------------------------------------------------*/

	    // add functions that return unwrapped values when chaining
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.contains = contains;
	    lodash.escape = escape;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.indexOf = indexOf;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isNaN = isNaN;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isUndefined = isUndefined;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.mixin = mixin;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.result = result;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.template = template;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;

	    // add aliases
	    lodash.all = every;
	    lodash.any = some;
	    lodash.detect = find;
	    lodash.findWhere = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.include = contains;
	    lodash.inject = reduce;

	    mixin(function() {
	      var source = {}
	      forOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }(), false);

	    /*--------------------------------------------------------------------------*/

	    // add functions capable of returning wrapped and unwrapped values when chaining
	    lodash.first = first;
	    lodash.last = last;
	    lodash.sample = sample;

	    // add aliases
	    lodash.take = first;
	    lodash.head = first;

	    forOwn(lodash, function(func, methodName) {
	      var callbackable = methodName !== 'sample';
	      if (!lodash.prototype[methodName]) {
	        lodash.prototype[methodName]= function(n, guard) {
	          var chainAll = this.__chain__,
	              result = func(this.__wrapped__, n, guard);

	          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
	            ? result
	            : new lodashWrapper(result, chainAll);
	        };
	      }
	    });

	    /*--------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = '2.4.1';

	    // add "Chaining" functions to the wrapper
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.value = wrapperValueOf;
	    lodash.prototype.valueOf = wrapperValueOf;

	    // add `Array` functions that return unwrapped values
	    baseEach(['join', 'pop', 'shift'], function(methodName) {
	      var func = arrayRef[methodName];
	      lodash.prototype[methodName] = function() {
	        var chainAll = this.__chain__,
	            result = func.apply(this.__wrapped__, arguments);

	        return chainAll
	          ? new lodashWrapper(result, chainAll)
	          : result;
	      };
	    });

	    // add `Array` functions that return the existing wrapped value
	    baseEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
	      var func = arrayRef[methodName];
	      lodash.prototype[methodName] = function() {
	        func.apply(this.__wrapped__, arguments);
	        return this;
	      };
	    });

	    // add `Array` functions that return new wrapped values
	    baseEach(['concat', 'slice', 'splice'], function(methodName) {
	      var func = arrayRef[methodName];
	      lodash.prototype[methodName] = function() {
	        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
	      };
	    });

	    // avoid array-like object bugs with `Array#shift` and `Array#splice`
	    // in IE < 9, Firefox < 10, Narwhal, and RingoJS
	    if (!support.spliceObjects) {
	      baseEach(['pop', 'shift', 'splice'], function(methodName) {
	        var func = arrayRef[methodName],
	            isSplice = methodName == 'splice';

	        lodash.prototype[methodName] = function() {
	          var chainAll = this.__chain__,
	              value = this.__wrapped__,
	              result = func.apply(value, arguments);

	          if (value.length === 0) {
	            delete value[0];
	          }
	          return (chainAll || isSplice)
	            ? new lodashWrapper(result, chainAll)
	            : result;
	        };
	      });
	    }

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // expose Lo-Dash
	  var _ = runInContext();

	  // some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose Lo-Dash to the global object even when an AMD loader is present in
	    // case Lo-Dash is loaded with a RequireJS shim config.
	    // See http://requirejs.org/docs/api.html#config-shim
	    root._ = _;

	    // define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // check for `exports` after `define` in case a build optimizer adds an `exports` object
	  else if (freeExports && freeModule) {
	    // in Node.js or RingoJS
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // in Narwhal or Rhino -require
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // in a browser or Rhino
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module), (function() { return this; }()), __webpack_require__(1)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 3 */
/***/ function(module, exports) {

	/**!
	 * AngularJS file upload/drop directive and service with progress and abort
	 * @author  Danial  <danial.farid@gmail.com>
	 * @version 5.0.9
	 */

	if (window.XMLHttpRequest && !(window.FileAPI && FileAPI.shouldLoad)) {
	  window.XMLHttpRequest.prototype.setRequestHeader = (function (orig) {
	    return function (header, value) {
	      if (header === '__setXHR_') {
	        var val = value(this);
	        // fix for angular < 1.2.0
	        if (val instanceof Function) {
	          val(this);
	        }
	      } else {
	        orig.apply(this, arguments);
	      }
	    };
	  })(window.XMLHttpRequest.prototype.setRequestHeader);
	}

	var ngFileUpload = angular.module('ngFileUpload', []);

	ngFileUpload.version = '5.0.9';
	ngFileUpload.service('Upload', ['$http', '$q', '$timeout', function ($http, $q, $timeout) {
	  function sendHttp(config) {
	    config.method = config.method || 'POST';
	    config.headers = config.headers || {};

	    var deferred = $q.defer();
	    var promise = deferred.promise;

	    config.headers.__setXHR_ = function () {
	      return function (xhr) {
	        if (!xhr) return;
	        config.__XHR = xhr;
	        if (config.xhrFn) config.xhrFn(xhr);
	        xhr.upload.addEventListener('progress', function (e) {
	          e.config = config;
	          if (deferred.notify) {
	            deferred.notify(e);
	          } else if (promise.progressFunc) {
	            $timeout(function () {
	              promise.progressFunc(e);
	            });
	          }
	        }, false);
	        //fix for firefox not firing upload progress end, also IE8-9
	        xhr.upload.addEventListener('load', function (e) {
	          if (e.lengthComputable) {
	            e.config = config;
	            if (deferred.notify) {
	              deferred.notify(e);
	            } else if (promise.progressFunc) {
	              $timeout(function () {
	                promise.progressFunc(e);
	              });
	            }
	          }
	        }, false);
	      };
	    };

	    $http(config).then(function (r) {
	      deferred.resolve(r);
	    }, function (e) {
	      deferred.reject(e);
	    }, function (n) {
	      deferred.notify(n);
	    });

	    promise.success = function (fn) {
	      promise.then(function (response) {
	        fn(response.data, response.status, response.headers, config);
	      });
	      return promise;
	    };

	    promise.error = function (fn) {
	      promise.then(null, function (response) {
	        fn(response.data, response.status, response.headers, config);
	      });
	      return promise;
	    };

	    promise.progress = function (fn) {
	      promise.progressFunc = fn;
	      promise.then(null, null, function (update) {
	        fn(update);
	      });
	      return promise;
	    };
	    promise.abort = function () {
	      if (config.__XHR) {
	        $timeout(function () {
	          config.__XHR.abort();
	        });
	      }
	      return promise;
	    };
	    promise.xhr = function (fn) {
	      config.xhrFn = (function (origXhrFn) {
	        return function () {
	          if (origXhrFn) origXhrFn.apply(promise, arguments);
	          fn.apply(promise, arguments);
	        };
	      })(config.xhrFn);
	      return promise;
	    };

	    return promise;
	  }

	  this.upload = function (config) {
	    function addFieldToFormData(formData, val, key) {
	      if (val !== undefined) {
	        if (angular.isDate(val)) {
	          val = val.toISOString();
	        }
	        if (angular.isString(val)) {
	          formData.append(key, val);
	        } else if (config.sendFieldsAs === 'form') {
	          if (angular.isObject(val)) {
	            for (var k in val) {
	              if (val.hasOwnProperty(k)) {
	                addFieldToFormData(formData, val[k], key + '[' + k + ']');
	              }
	            }
	          } else {
	            formData.append(key, val);
	          }
	        } else {
	          val = angular.isString(val) ? val : JSON.stringify(val);
	          if (config.sendFieldsAs === 'json-blob') {
	            formData.append(key, new Blob([val], {type: 'application/json'}));
	          } else {
	            formData.append(key, val);
	          }
	        }
	      }
	    }

	    config.headers = config.headers || {};
	    config.headers['Content-Type'] = undefined;
	    config.transformRequest = config.transformRequest ?
	      (angular.isArray(config.transformRequest) ?
	        config.transformRequest : [config.transformRequest]) : [];
	    config.transformRequest.push(function (data) {
	      var formData = new FormData();
	      var allFields = {};
	      var key;
	      for (key in config.fields) {
	        if (config.fields.hasOwnProperty(key)) {
	          allFields[key] = config.fields[key];
	        }
	      }
	      if (data) allFields.data = data;
	      for (key in allFields) {
	        if (allFields.hasOwnProperty(key)) {
	          var val = allFields[key];
	          if (config.formDataAppender) {
	            config.formDataAppender(formData, key, val);
	          } else {
	            addFieldToFormData(formData, val, key);
	          }
	        }
	      }

	      if (config.file != null) {
	        var fileFormName = config.fileFormDataName || 'file';

	        if (angular.isArray(config.file)) {
	          var isFileFormNameString = angular.isString(fileFormName);
	          for (var i = 0; i < config.file.length; i++) {
	            formData.append(isFileFormNameString ? fileFormName : fileFormName[i], config.file[i],
	              (config.fileName && config.fileName[i]) || config.file[i].name);
	          }
	        } else {
	          formData.append(fileFormName, config.file, config.fileName || config.file.name);
	        }
	      }
	      return formData;
	    });

	    return sendHttp(config);
	  };

	  this.http = function (config) {
	    config.transformRequest = config.transformRequest || function (data) {
	        if ((window.ArrayBuffer && data instanceof window.ArrayBuffer) || data instanceof Blob) {
	          return data;
	        }
	        return $http.defaults.transformRequest[0](arguments);
	      };
	    return sendHttp(config);
	  };
	}

	]);

	(function () {
	    ngFileUpload.directive('ngfSelect', ['$parse', '$timeout', '$compile',
	        function ($parse, $timeout, $compile) {
	            return {
	                restrict: 'AEC',
	                require: '?ngModel',
	                link: function (scope, elem, attr, ngModel) {
	                    linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile);
	                }
	            };
	        }]);

	    function linkFileSelect(scope, elem, attr, ngModel, $parse, $timeout, $compile) {
	        /** @namespace attr.ngfSelect */
	        /** @namespace attr.ngfChange */
	        /** @namespace attr.ngModel */
	        /** @namespace attr.ngModelRejected */
	        /** @namespace attr.ngfMultiple */
	        /** @namespace attr.ngfCapture */
	        /** @namespace attr.ngfAccept */
	        /** @namespace attr.ngfMaxSize */
	        /** @namespace attr.ngfMinSize */
	        /** @namespace attr.ngfResetOnClick */
	        /** @namespace attr.ngfResetModelOnClick */
	        /** @namespace attr.ngfKeep */
	        /** @namespace attr.ngfKeepDistinct */

	        if (elem.attr('__ngf_gen__')) {
	            return;
	        }

	        scope.$on('$destroy', function () {
	            if (elem.$$ngfRefElem) elem.$$ngfRefElem.remove();
	        });

	        var disabled = false;
	        if (attr.ngfSelect.search(/\W+$files\W+/) === -1) {
	            scope.$watch(attr.ngfSelect, function (val) {
	                disabled = val === false;
	            });
	        }
	        function isInputTypeFile() {
	            return elem[0].tagName.toLowerCase() === 'input' && attr.type && attr.type.toLowerCase() === 'file';
	        }

	        var isUpdating = false;

	        function changeFn(evt) {
	            if (!isUpdating) {
	                isUpdating = true;
	                try {
	                    var fileList = evt.__files_ || (evt.target && evt.target.files);
	                    var files = [], rejFiles = [];

	                    for (var i = 0; i < fileList.length; i++) {
	                        var file = fileList.item(i);
	                        if (validate(scope, $parse, attr, file, evt)) {
	                            files.push(file);
	                        } else {
	                            rejFiles.push(file);
	                        }
	                    }
	                    updateModel($parse, $timeout, scope, ngModel, attr, attr.ngfChange || attr.ngfSelect, files, rejFiles, evt);
	                    if (files.length === 0) evt.target.value = files;
	//                if (evt.target && evt.target.getAttribute('__ngf_gen__')) {
	//                    angular.element(evt.target).remove();
	//                }
	                } finally {
	                    isUpdating = false;
	                }
	            }
	        }

	        function bindAttrToFileInput(fileElem) {
	            if (attr.ngfMultiple) fileElem.attr('multiple', $parse(attr.ngfMultiple)(scope));
	            if (attr.ngfCapture) fileElem.attr('capture', $parse(attr.ngfCapture)(scope));
	            if (attr.accept) fileElem.attr('accept', attr.accept);
	            for (var i = 0; i < elem[0].attributes.length; i++) {
	                var attribute = elem[0].attributes[i];
	                if ((isInputTypeFile() && attribute.name !== 'type') ||
	                    (attribute.name !== 'type' && attribute.name !== 'class' &&
	                    attribute.name !== 'id' && attribute.name !== 'style')) {
	                    fileElem.attr(attribute.name, attribute.value);
	                }
	            }
	        }

	        function createFileInput(evt, resetOnClick) {
	            if (!resetOnClick && (evt || isInputTypeFile())) return elem.$$ngfRefElem || elem;

	            var fileElem = angular.element('<input type="file">');
	            bindAttrToFileInput(fileElem);

	            if (isInputTypeFile()) {
	                elem.replaceWith(fileElem);
	                elem = fileElem;
	                fileElem.attr('__ngf_gen__', true);
	                $compile(elem)(scope);
	            } else {
	                fileElem.css('visibility', 'hidden').css('position', 'absolute').css('overflow', 'hidden')
	                    .css('width', '0px').css('height', '0px').css('z-index', '-100000').css('border', 'none')
	                    .css('margin', '0px').css('padding', '0px').attr('tabindex', '-1');
	                if (elem.$$ngfRefElem) {
	                    elem.$$ngfRefElem.remove();
	                }
	                elem.$$ngfRefElem = fileElem;
	                document.body.appendChild(fileElem[0]);
	            }

	            return fileElem;
	        }

	        function resetModel(evt) {
	            updateModel($parse, $timeout, scope, ngModel, attr, attr.ngfChange || attr.ngfSelect, [], [], evt, true);
	        }

	        function clickHandler(evt) {
	            if (elem.attr('disabled') || disabled) return false;
	            if (evt != null) {
	                evt.preventDefault();
	                evt.stopPropagation();
	            }
	            var resetOnClick = $parse(attr.ngfResetOnClick)(scope) !== false;
	            var fileElem = createFileInput(evt, resetOnClick);

	            function clickAndAssign(evt) {
	                if (evt) {
	                    fileElem[0].click();
	                }
	                if (isInputTypeFile() || !evt) {
	                    elem.bind('click touchend', clickHandler);
	                }
	            }

	            if (fileElem) {
	                if (!evt || resetOnClick) fileElem.bind('change', changeFn);
	                if (evt && resetOnClick && $parse(attr.ngfResetModelOnClick)(scope) !== false) resetModel(evt);

	                // fix for android native browser < 4.4
	                if (shouldClickLater(navigator.userAgent)) {
	                    setTimeout(function () {
	                        clickAndAssign(evt);
	                    }, 0);
	                } else {
	                    clickAndAssign(evt);
	                }
	            }
	            return false;
	        }

	        if (window.FileAPI && window.FileAPI.ngfFixIE) {
	            window.FileAPI.ngfFixIE(elem, createFileInput, bindAttrToFileInput, changeFn);
	        } else {
	            clickHandler();
	            //if (!isInputTypeFile()) {
	            //  elem.bind('click touchend', clickHandler);
	            //}
	        }
	    }

	    function shouldClickLater(ua) {
	        // android below 4.4
	        var m = ua.match(/Android[^\d]*(\d+)\.(\d+)/);
	        if (m && m.length > 2) {
	            return parseInt(m[1]) < 4 || (parseInt(m[1]) === 4 && parseInt(m[2]) < 4);
	        }

	        // safari on windows
	        return /.*Windows.*Safari.*/.test(ua);
	    }

	    ngFileUpload.validate = function (scope, $parse, attr, file, evt) {
	        function globStringToRegex(str) {
	            if (str.length > 2 && str[0] === '/' && str[str.length - 1] === '/') {
	                return str.substring(1, str.length - 1);
	            }
	            var split = str.split(','), result = '';
	            if (split.length > 1) {
	                for (var i = 0; i < split.length; i++) {
	                    result += '(' + globStringToRegex(split[i]) + ')';
	                    if (i < split.length - 1) {
	                        result += '|';
	                    }
	                }
	            } else {
	                if (str.indexOf('.') === 0) {
	                    str = '*' + str;
	                }
	                result = '^' + str.replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\' + '-]', 'g'), '\\$&') + '$';
	                result = result.replace(/\\\*/g, '.*').replace(/\\\?/g, '.');
	            }
	            return result;
	        }

	        var accept = $parse(attr.ngfAccept)(scope, {$file: file, $event: evt});
	        var fileSizeMax = $parse(attr.ngfMaxSize)(scope, {$file: file, $event: evt}) || 9007199254740991;
	        var fileSizeMin = $parse(attr.ngfMinSize)(scope, {$file: file, $event: evt}) || -1;
	        if (accept != null && angular.isString(accept)) {
	            var regexp = new RegExp(globStringToRegex(accept), 'gi');
	            accept = (file.type != null && regexp.test(file.type.toLowerCase())) ||
	                (file.name != null && regexp.test(file.name.toLowerCase()));
	        }
	        return (accept == null || accept) && (file.size == null || (file.size < fileSizeMax && file.size > fileSizeMin));
	    };

	    ngFileUpload.updateModel = function ($parse, $timeout, scope, ngModel, attr, fileChange,
	                                         files, rejFiles, evt, noDelay) {
	        function update() {
	            if ($parse(attr.ngfKeep)(scope) === true) {
	                var prevFiles = (ngModel.$modelValue || []).slice(0);
	                if (!files || !files.length) {
	                    files = prevFiles;
	                } else if ($parse(attr.ngfKeepDistinct)(scope) === true) {
	                    var len = prevFiles.length;
	                    for (var i = 0; i < files.length; i++) {
	                        for (var j = 0; j < len; j++) {
	                            if (files[i].name === prevFiles[j].name) break;
	                        }
	                        if (j === len) {
	                            prevFiles.push(files[i]);
	                        }
	                    }
	                    files = prevFiles;
	                } else {
	                    files = prevFiles.concat(files);
	                }
	            }
	            if (ngModel) {
	                $parse(attr.ngModel).assign(scope, files);
	                $timeout(function () {
	                    if (ngModel) {
	                        ngModel.$setViewValue(files != null && files.length === 0 ? null : files);
	                    }
	                });
	            }
	            if (attr.ngModelRejected) {
	                $parse(attr.ngModelRejected).assign(scope, rejFiles);
	            }
	            if (fileChange) {
	                $parse(fileChange)(scope, {
	                    $files: files,
	                    $rejectedFiles: rejFiles,
	                    $event: evt
	                });
	            }
	        }

	        if (noDelay) {
	            update();
	        } else {
	            $timeout(function () {
	                update();
	            });
	        }
	    };

	    var validate = ngFileUpload.validate;
	    var updateModel = ngFileUpload.updateModel;

	})();

	(function () {
	  var validate = ngFileUpload.validate;
	  var updateModel = ngFileUpload.updateModel;

	  ngFileUpload.directive('ngfDrop', ['$parse', '$timeout', '$location', function ($parse, $timeout, $location) {
	    return {
	      restrict: 'AEC',
	      require: '?ngModel',
	      link: function (scope, elem, attr, ngModel) {
	        linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $location);
	      }
	    };
	  }]);

	  ngFileUpload.directive('ngfNoFileDrop', function () {
	    return function (scope, elem) {
	      if (dropAvailable()) elem.css('display', 'none');
	    };
	  });

	  ngFileUpload.directive('ngfDropAvailable', ['$parse', '$timeout', function ($parse, $timeout) {
	    return function (scope, elem, attr) {
	      if (dropAvailable()) {
	        var fn = $parse(attr.ngfDropAvailable);
	        $timeout(function () {
	          fn(scope);
	          if (fn.assign) {
	            fn.assign(scope, true);
	          }
	        });
	      }
	    };
	  }]);

	  function linkDrop(scope, elem, attr, ngModel, $parse, $timeout, $location) {
	    var available = dropAvailable();
	    if (attr.dropAvailable) {
	      $timeout(function () {
	        if (scope[attr.dropAvailable]) {
	          scope[attr.dropAvailable].value = available;
	        } else {
	          scope[attr.dropAvailable] = available;
	        }
	      });
	    }
	    if (!available) {
	      if ($parse(attr.ngfHideOnDropNotAvailable)(scope) === true) {
	        elem.css('display', 'none');
	      }
	      return;
	    }

	    var disabled = false;
	    if (attr.ngfDrop.search(/\W+$files\W+/) === -1) {
	      scope.$watch(attr.ngfDrop, function(val) {
	        disabled = val === false;
	      });
	    }

	    var leaveTimeout = null;
	    var stopPropagation = $parse(attr.ngfStopPropagation);
	    var dragOverDelay = 1;
	    var actualDragOverClass;

	    elem[0].addEventListener('dragover', function (evt) {
	      if (elem.attr('disabled') || disabled) return;
	      evt.preventDefault();
	      if (stopPropagation(scope)) evt.stopPropagation();
	      // handling dragover events from the Chrome download bar
	      if (navigator.userAgent.indexOf('Chrome') > -1) {
	        var b = evt.dataTransfer.effectAllowed;
	        evt.dataTransfer.dropEffect = ('move' === b || 'linkMove' === b) ? 'move' : 'copy';
	      }
	      $timeout.cancel(leaveTimeout);
	      if (!scope.actualDragOverClass) {
	        actualDragOverClass = calculateDragOverClass(scope, attr, evt);
	      }
	      elem.addClass(actualDragOverClass);
	    }, false);
	    elem[0].addEventListener('dragenter', function (evt) {
	      if (elem.attr('disabled') || disabled) return;
	      evt.preventDefault();
	      if (stopPropagation(scope)) evt.stopPropagation();
	    }, false);
	    elem[0].addEventListener('dragleave', function () {
	      if (elem.attr('disabled') || disabled) return;
	      leaveTimeout = $timeout(function () {
	        elem.removeClass(actualDragOverClass);
	        actualDragOverClass = null;
	      }, dragOverDelay || 1);
	    }, false);
	    elem[0].addEventListener('drop', function (evt) {
	      if (elem.attr('disabled') || disabled) return;
	      evt.preventDefault();
	      if (stopPropagation(scope)) evt.stopPropagation();
	      elem.removeClass(actualDragOverClass);
	      actualDragOverClass = null;
	      extractFiles(evt, function (files, rejFiles) {
	        updateModel($parse, $timeout, scope, ngModel, attr,
	          attr.ngfChange || attr.ngfDrop, files, rejFiles, evt);
	      }, $parse(attr.ngfAllowDir)(scope) !== false, attr.multiple || $parse(attr.ngfMultiple)(scope));
	    }, false);

	    function calculateDragOverClass(scope, attr, evt) {
	      var accepted = true;
	      var items = evt.dataTransfer.items;
	      if (items != null) {
	        for (var i = 0; i < items.length && accepted; i++) {
	          accepted = accepted &&
	            (items[i].kind === 'file' || items[i].kind === '') &&
	            validate(scope, $parse, attr, items[i], evt);
	        }
	      }
	      var clazz = $parse(attr.ngfDragOverClass)(scope, {$event: evt});
	      if (clazz) {
	        if (clazz.delay) dragOverDelay = clazz.delay;
	        if (clazz.accept) clazz = accepted ? clazz.accept : clazz.reject;
	      }
	      return clazz || attr.ngfDragOverClass || 'dragover';
	    }

	    function extractFiles(evt, callback, allowDir, multiple) {
	      var files = [], rejFiles = [], items = evt.dataTransfer.items, processing = 0;

	      function addFile(file) {
	        if (validate(scope, $parse, attr, file, evt)) {
	          files.push(file);
	        } else {
	          rejFiles.push(file);
	        }
	      }

	      function traverseFileTree(files, entry, path) {
	        if (entry != null) {
	          if (entry.isDirectory) {
	            var filePath = (path || '') + entry.name;
	            addFile({name: entry.name, type: 'directory', path: filePath});
	            var dirReader = entry.createReader();
	            var entries = [];
	            processing++;
	            var readEntries = function () {
	              dirReader.readEntries(function (results) {
	                try {
	                  if (!results.length) {
	                    for (var i = 0; i < entries.length; i++) {
	                      traverseFileTree(files, entries[i], (path ? path : '') + entry.name + '/');
	                    }
	                    processing--;
	                  } else {
	                    entries = entries.concat(Array.prototype.slice.call(results || [], 0));
	                    readEntries();
	                  }
	                } catch (e) {
	                  processing--;
	                  console.error(e);
	                }
	              }, function () {
	                processing--;
	              });
	            };
	            readEntries();
	          } else {
	            processing++;
	            entry.file(function (file) {
	              try {
	                processing--;
	                file.path = (path ? path : '') + file.name;
	                addFile(file);
	              } catch (e) {
	                processing--;
	                console.error(e);
	              }
	            }, function () {
	              processing--;
	            });
	          }
	        }
	      }

	      if (items && items.length > 0 && $location.protocol() !== 'file') {
	        for (var i = 0; i < items.length; i++) {
	          if (items[i].webkitGetAsEntry && items[i].webkitGetAsEntry() && items[i].webkitGetAsEntry().isDirectory) {
	            var entry = items[i].webkitGetAsEntry();
	            if (entry.isDirectory && !allowDir) {
	              continue;
	            }
	            if (entry != null) {
	              traverseFileTree(files, entry);
	            }
	          } else {
	            var f = items[i].getAsFile();
	            if (f != null) addFile(f);
	          }
	          if (!multiple && files.length > 0) break;
	        }
	      } else {
	        var fileList = evt.dataTransfer.files;
	        if (fileList != null) {
	          for (var j = 0; j < fileList.length; j++) {
	            addFile(fileList.item(j));
	            if (!multiple && files.length > 0) {
	              break;
	            }
	          }
	        }
	      }
	      var delays = 0;
	      (function waitForProcess(delay) {
	        $timeout(function () {
	          if (!processing) {
	            if (!multiple && files.length > 1) {
	              i = 0;
	              while (files[i].type === 'directory') i++;
	              files = [files[i]];
	            }
	            callback(files, rejFiles);
	          } else {
	            if (delays++ * 10 < 20 * 1000) {
	              waitForProcess(10);
	            }
	          }
	        }, delay || 0);
	      })();
	    }
	  }

	  ngFileUpload.directive('ngfSrc', ['$parse', '$timeout', function ($parse, $timeout) {
	    return {
	      restrict: 'AE',
	      link: function (scope, elem, attr) {
	        if (window.FileReader) {
	          scope.$watch(attr.ngfSrc, function (file) {
	            if (file &&
	              validate(scope, $parse, attr, file, null) &&
	              (!window.FileAPI || navigator.userAgent.indexOf('MSIE 8') === -1 || file.size < 20000) &&
	              (!window.FileAPI || navigator.userAgent.indexOf('MSIE 9') === -1 || file.size < 4000000)) {
	              $timeout(function () {
	                //prefer URL.createObjectURL for handling refrences to files of all sizes
	                //since it doesn´t build a large string in memory
	                var URL = window.URL || window.webkitURL;
	                if (URL && URL.createObjectURL) {
	                  elem.attr('src', URL.createObjectURL(file));
	                } else {
	                  var fileReader = new FileReader();
	                  fileReader.readAsDataURL(file);
	                  fileReader.onload = function (e) {
	                    $timeout(function () {
	                      elem.attr('src', e.target.result);
	                    });
	                  };
	                }
	              });
	            } else {
	              elem.attr('src', attr.ngfDefaultSrc || '');
	            }
	          });
	        }
	      }
	    };
	  }]);

	  function dropAvailable() {
	    var div = document.createElement('div');
	    return ('draggable' in div) && ('ondrop' in div);
	  }

	})();


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["I18n"] = __webpack_require__(5);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// Extracted from https://github.com/fnando/i18n-js
	// Commit: 839979169d13a3d43a84a15f8dea8d40adbc3924

	// I18n.js
	// =======
	//
	// This small library provides the Rails I18n API on the Javascript.
	// You don't actually have to use Rails (or even Ruby) to use I18n.js.
	// Just make sure you export all translations in an object like this:
	//
	//     I18n.translations.en = {
	//       hello: "Hello World"
	//     };
	//
	// See tests for specific formatting like numbers and dates.
	//
	;(function(I18n){
	  "use strict";

	  // Just cache the Array#slice function.
	  var slice = Array.prototype.slice;

	  // Apply number padding.
	  var padding = function(number) {
	    return ("0" + number.toString()).substr(-2);
	  };

	  // Set default days/months translations.
	  var DATE = {
	      day_names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
	    , abbr_day_names: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
	    , month_names: [null, "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
	    , abbr_month_names: [null, "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	    , meridian: ["AM", "PM"]
	  };

	  // Set default number format.
	  var NUMBER_FORMAT = {
	      precision: 3
	    , separator: "."
	    , delimiter: ","
	    , strip_insignificant_zeros: false
	  };

	  // Set default currency format.
	  var CURRENCY_FORMAT = {
	      unit: "$"
	    , precision: 2
	    , format: "%u%n"
	    , delimiter: ","
	    , separator: "."
	  };

	  // Set default percentage format.
	  var PERCENTAGE_FORMAT = {
	      precision: 3
	    , separator: "."
	    , delimiter: ""
	  };

	  // Set default size units.
	  var SIZE_UNITS = [null, "kb", "mb", "gb", "tb"];

	  // Other default options
	  var DEFAULT_OPTIONS = {
	    defaultLocale: "en",
	    locale: "en",
	    defaultSeparator: ".",
	    placeholder: /(?:\{\{|%\{)(.*?)(?:\}\}?)/gm,
	    fallbacks: false,
	    translations: {}
	  };

	  I18n.reset = function() {
	    // Set default locale. This locale will be used when fallback is enabled and
	    // the translation doesn't exist in a particular locale.
	    this.defaultLocale = DEFAULT_OPTIONS.defaultLocale;

	    // Set the current locale to `en`.
	    this.locale = DEFAULT_OPTIONS.locale;

	    // Set the translation key separator.
	    this.defaultSeparator = DEFAULT_OPTIONS.defaultSeparator;

	    // Set the placeholder format. Accepts `{{placeholder}}` and `%{placeholder}`.
	    this.placeholder = DEFAULT_OPTIONS.placeholder;

	    // Set if engine should fallback to the default locale when a translation
	    // is missing.
	    this.fallbacks = DEFAULT_OPTIONS.fallbacks;

	    // Set the default translation object.
	    this.translations = DEFAULT_OPTIONS.translations;
	  };

	  // Much like `reset`, but only assign options if not already assigned
	  I18n.initializeOptions = function() {
	    if (typeof(this.defaultLocale) === "undefined" && this.defaultLocale !== null)
	      this.defaultLocale = DEFAULT_OPTIONS.defaultLocale;

	    if (typeof(this.locale) === "undefined" && this.locale !== null)
	      this.locale = DEFAULT_OPTIONS.locale;

	    if (typeof(this.defaultSeparator) === "undefined" && this.defaultSeparator !== null)
	      this.defaultSeparator = DEFAULT_OPTIONS.defaultSeparator;

	    if (typeof(this.placeholder) === "undefined" && this.placeholder !== null)
	      this.placeholder = DEFAULT_OPTIONS.placeholder;

	    if (typeof(this.fallbacks) === "undefined" && this.fallbacks !== null)
	      this.fallbacks = DEFAULT_OPTIONS.fallbacks;

	    if (typeof(this.translations) === "undefined" && this.translations !== null)
	      this.translations = DEFAULT_OPTIONS.translations;
	  };
	  I18n.initializeOptions();

	  // Return a list of all locales that must be tried before returning the
	  // missing translation message. By default, this will consider the inline option,
	  // current locale and fallback locale.
	  //
	  //     I18n.locales.get("de-DE");
	  //     // ["de-DE", "de", "en"]
	  //
	  // You can define custom rules for any locale. Just make sure you return a array
	  // containing all locales.
	  //
	  //     // Default the Wookie locale to English.
	  //     I18n.locales["wk"] = function(locale) {
	  //       return ["en"];
	  //     };
	  //
	  I18n.locales = {};

	  // Retrieve locales based on inline locale, current locale or default to
	  // I18n's detection.
	  I18n.locales.get = function(locale) {
	    var result = this[locale] || this[I18n.locale] || this["default"];

	    if (typeof(result) === "function") {
	      result = result(locale);
	    }

	    if (result instanceof Array === false) {
	      result = [result];
	    }

	    return result;
	  };

	  // The default locale list.
	  I18n.locales["default"] = function(locale) {
	    var locales = []
	      , list = []
	      , countryCode
	      , count
	    ;

	    // Handle the inline locale option that can be provided to
	    // the `I18n.t` options.
	    if (locale) {
	      locales.push(locale);
	    }

	    // Add the current locale to the list.
	    if (!locale && I18n.locale) {
	      locales.push(I18n.locale);
	    }

	    // Add the default locale if fallback strategy is enabled.
	    if (I18n.fallbacks && I18n.defaultLocale) {
	      locales.push(I18n.defaultLocale);
	    }

	    // Compute each locale with its country code.
	    // So this will return an array containing both
	    // `de-DE` and `de` locales.
	    locales.forEach(function(locale){
	      countryCode = locale.split("-")[0];

	      if (!~list.indexOf(locale)) {
	        list.push(locale);
	      }

	      if (I18n.fallbacks && countryCode && countryCode !== locale && !~list.indexOf(countryCode)) {
	        list.push(countryCode);
	      }
	    });

	    // No locales set? English it is.
	    if (!locales.length) {
	      locales.push("en");
	    }

	    return list;
	  };

	  // Hold pluralization rules.
	  I18n.pluralization = {};

	  // Return the pluralizer for a specific locale.
	  // If no specify locale is found, then I18n's default will be used.
	  I18n.pluralization.get = function(locale) {
	    return this[locale] || this[I18n.locale] || this["default"];
	  };

	  // The default pluralizer rule.
	  // It detects the `zero`, `one`, and `other` scopes.
	  I18n.pluralization["default"] = function(count) {
	    switch (count) {
	      case 0: return ["zero", "other"];
	      case 1: return ["one"];
	      default: return ["other"];
	    }
	  };

	  // Return current locale. If no locale has been set, then
	  // the current locale will be the default locale.
	  I18n.currentLocale = function() {
	    return this.locale || this.defaultLocale;
	  };

	  // Check if value is different than undefined and null;
	  I18n.isSet = function(value) {
	    return value !== undefined && value !== null;
	  };

	  // Find and process the translation using the provided scope and options.
	  // This is used internally by some functions and should not be used as an
	  // public API.
	  I18n.lookup = function(scope, options) {
	    options = this.prepareOptions(options);

	    var locales = this.locales.get(options.locale).slice()
	      , requestedLocale = locales[0]
	      , locale
	      , scopes
	      , translations
	    ;

	    // Deal with the scope as an array.
	    if (scope.constructor === Array) {
	      scope = scope.join(this.defaultSeparator);
	    }

	    // Deal with the scope option provided through the second argument.
	    //
	    //    I18n.t('hello', {scope: 'greetings'});
	    //
	    if (options.scope) {
	      scope = [options.scope, scope].join(this.defaultSeparator);
	    }

	    while (locales.length) {
	      locale = locales.shift();
	      scopes = scope.split(this.defaultSeparator);
	      translations = this.translations[locale];

	      if (!translations) {
	        continue;
	      }

	      while (scopes.length) {
	        translations = translations[scopes.shift()];

	        if (translations === undefined || translations === null) {
	          break;
	        }
	      }

	      if (translations !== undefined && translations !== null) {
	        return translations;
	      }
	    }

	    if (this.isSet(options.defaultValue)) {
	      return options.defaultValue;
	    }
	  };

	  // Rails changed the way the meridian is stored.
	  // It started with `date.meridian` returning an array,
	  // then it switched to `time.am` and `time.pm`.
	  // This function abstracts this difference and returns
	  // the correct meridian or the default value when none is provided.
	  I18n.meridian = function() {
	    var time = this.lookup("time");
	    var date = this.lookup("date");

	    if (time && time.am && time.pm) {
	      return [time.am, time.pm];
	    } else if (date && date.meridian) {
	      return date.meridian;
	    } else {
	      return DATE.meridian;
	    }
	  };

	  // Merge serveral hash options, checking if value is set before
	  // overwriting any value. The precedence is from left to right.
	  //
	  //     I18n.prepareOptions({name: "John Doe"}, {name: "Mary Doe", role: "user"});
	  //     #=> {name: "John Doe", role: "user"}
	  //
	  I18n.prepareOptions = function() {
	    var args = slice.call(arguments)
	      , options = {}
	      , subject
	    ;

	    while (args.length) {
	      subject = args.shift();

	      if (typeof(subject) != "object") {
	        continue;
	      }

	      for (var attr in subject) {
	        if (!subject.hasOwnProperty(attr)) {
	          continue;
	        }

	        if (this.isSet(options[attr])) {
	          continue;
	        }

	        options[attr] = subject[attr];
	      }
	    }

	    return options;
	  };

	  // Generate a list of translation options for default fallbacks.
	  // `defaultValue` is also deleted from options as it is returned as part of
	  // the translationOptions array.
	  I18n.createTranslationOptions = function(scope, options) {
	    var translationOptions = [{scope: scope}];

	    // Defaults should be an array of hashes containing either
	    // fallback scopes or messages
	    if (this.isSet(options.defaults)) {
	      translationOptions = translationOptions.concat(options.defaults);
	    }

	    // Maintain support for defaultValue. Since it is always a message
	    // insert it in to the translation options as such.
	    if (this.isSet(options.defaultValue)) {
	      translationOptions.push({ message: options.defaultValue });
	      delete options.defaultValue;
	    }

	    return translationOptions;
	  };

	  // Translate the given scope with the provided options.
	  I18n.translate = function(scope, options) {
	    options = this.prepareOptions(options);

	    var translationOptions = this.createTranslationOptions(scope, options);

	    var translation;
	    // Iterate through the translation options until a translation
	    // or message is found.
	    var translationFound =
	      translationOptions.some(function(translationOption) {
	        if (this.isSet(translationOption.scope)) {
	          translation = this.lookup(translationOption.scope, options);
	        } else if (this.isSet(translationOption.message)) {
	          translation = translationOption.message;
	        }

	        if (translation !== undefined && translation !== null) {
	          return true;
	        }
	      }, this);

	    if (!translationFound) {
	      return this.missingTranslation(scope);
	    }

	    if (typeof(translation) === "string") {
	      translation = this.interpolate(translation, options);
	    } else if (translation instanceof Object && this.isSet(options.count)) {
	      translation = this.pluralize(options.count, translation, options);
	    }

	    return translation;
	  };

	  // This function interpolates the all variables in the given message.
	  I18n.interpolate = function(message, options) {
	    options = this.prepareOptions(options);
	    var matches = message.match(this.placeholder)
	      , placeholder
	      , value
	      , name
	      , regex
	    ;

	    if (!matches) {
	      return message;
	    }

	    var value;

	    while (matches.length) {
	      placeholder = matches.shift();
	      name = placeholder.replace(this.placeholder, "$1");

	      if (this.isSet(options[name])) {
	        value = options[name].toString().replace(/\$/gm, "_#$#_");
	      } else {
	        value = this.missingPlaceholder(placeholder, message);
	      }

	      regex = new RegExp(placeholder.replace(/\{/gm, "\\{").replace(/\}/gm, "\\}"));
	      message = message.replace(regex, value);
	    }

	    return message.replace(/_#\$#_/g, "$");
	  };

	  // Pluralize the given scope using the `count` value.
	  // The pluralized translation may have other placeholders,
	  // which will be retrieved from `options`.
	  I18n.pluralize = function(count, scope, options) {
	    options = this.prepareOptions(options);
	    var translations, pluralizer, keys, key, message;

	    if (scope instanceof Object) {
	      translations = scope;
	    } else {
	      translations = this.lookup(scope, options);
	    }

	    if (!translations) {
	      return this.missingTranslation(scope);
	    }

	    pluralizer = this.pluralization.get(options.locale);
	    keys = pluralizer(Math.abs(count));

	    while (keys.length) {
	      key = keys.shift();

	      if (this.isSet(translations[key])) {
	        message = translations[key];
	        break;
	      }
	    }

	    options.count = String(count);
	    return this.interpolate(message, options);
	  };

	  // Return a missing translation message for the given parameters.
	  I18n.missingTranslation = function(scope) {
	    var message = '[missing "';

	    message += this.currentLocale() + ".";
	    message += slice.call(arguments).join(".");
	    message += '" translation]';

	    return message;
	  };

	  // Return a missing placeholder message for given parameters
	  I18n.missingPlaceholder = function(placeholder, message) {
	    return "[missing " + placeholder + " value]";
	  };

	  // Format number using localization rules.
	  // The options will be retrieved from the `number.format` scope.
	  // If this isn't present, then the following options will be used:
	  //
	  // - `precision`: `3`
	  // - `separator`: `"."`
	  // - `delimiter`: `","`
	  // - `strip_insignificant_zeros`: `false`
	  //
	  // You can also override these options by providing the `options` argument.
	  //
	  I18n.toNumber = function(number, options) {
	    options = this.prepareOptions(
	        options
	      , this.lookup("number.format")
	      , NUMBER_FORMAT
	    );

	    var negative = number < 0
	      , string = Math.abs(number).toFixed(options.precision).toString()
	      , parts = string.split(".")
	      , precision
	      , buffer = []
	      , formattedNumber
	    ;

	    number = parts[0];
	    precision = parts[1];

	    while (number.length > 0) {
	      buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));
	      number = number.substr(0, number.length -3);
	    }

	    formattedNumber = buffer.join(options.delimiter);

	    if (options.strip_insignificant_zeros && precision) {
	      precision = precision.replace(/0+$/, "");
	    }

	    if (options.precision > 0 && precision) {
	      formattedNumber += options.separator + precision;
	    }

	    if (negative) {
	      formattedNumber = "-" + formattedNumber;
	    }

	    return formattedNumber;
	  };

	  // Format currency with localization rules.
	  // The options will be retrieved from the `number.currency.format` and
	  // `number.format` scopes, in that order.
	  //
	  // Any missing option will be retrieved from the `I18n.toNumber` defaults and
	  // the following options:
	  //
	  // - `unit`: `"$"`
	  // - `precision`: `2`
	  // - `format`: `"%u%n"`
	  // - `delimiter`: `","`
	  // - `separator`: `"."`
	  //
	  // You can also override these options by providing the `options` argument.
	  //
	  I18n.toCurrency = function(number, options) {
	    options = this.prepareOptions(
	        options
	      , this.lookup("number.currency.format")
	      , this.lookup("number.format")
	      , CURRENCY_FORMAT
	    );

	    number = this.toNumber(number, options);
	    number = options.format
	      .replace("%u", options.unit)
	      .replace("%n", number)
	    ;

	    return number;
	  };

	  // Localize several values.
	  // You can provide the following scopes: `currency`, `number`, or `percentage`.
	  // If you provide a scope that matches the `/^(date|time)/` regular expression
	  // then the `value` will be converted by using the `I18n.toTime` function.
	  //
	  // It will default to the value's `toString` function.
	  //
	  I18n.localize = function(scope, value) {
	    switch (scope) {
	      case "currency":
	        return this.toCurrency(value);
	      case "number":
	        scope = this.lookup("number.format");
	        return this.toNumber(value, scope);
	      case "percentage":
	        return this.toPercentage(value);
	      default:
	        if (scope.match(/^(date|time)/)) {
	          return this.toTime(scope, value);
	        } else {
	          return value.toString();
	        }
	    }
	  };

	  // Parse a given `date` string into a JavaScript Date object.
	  // This function is time zone aware.
	  //
	  // The following string formats are recognized:
	  //
	  //    yyyy-mm-dd
	  //    yyyy-mm-dd[ T]hh:mm::ss
	  //    yyyy-mm-dd[ T]hh:mm::ss
	  //    yyyy-mm-dd[ T]hh:mm::ssZ
	  //    yyyy-mm-dd[ T]hh:mm::ss+0000
	  //    yyyy-mm-dd[ T]hh:mm::ss+00:00
	  //    yyyy-mm-dd[ T]hh:mm::ss.123Z
	  //
	  I18n.parseDate = function(date) {
	    var matches, convertedDate, fraction;
	    // we have a date, so just return it.
	    if (typeof(date) == "object") {
	      return date;
	    };

	    matches = date.toString().match(/(\d{4})-(\d{2})-(\d{2})(?:[ T](\d{2}):(\d{2}):(\d{2})([\.,]\d{1,3})?)?(Z|\+00:?00)?/);

	    if (matches) {
	      for (var i = 1; i <= 6; i++) {
	        matches[i] = parseInt(matches[i], 10) || 0;
	      }

	      // month starts on 0
	      matches[2] -= 1;

	      fraction = matches[7] ? 1000 * ("0" + matches[7]) : null;

	      if (matches[8]) {
	        convertedDate = new Date(Date.UTC(matches[1], matches[2], matches[3], matches[4], matches[5], matches[6], fraction));
	      } else {
	        convertedDate = new Date(matches[1], matches[2], matches[3], matches[4], matches[5], matches[6], fraction);
	      }
	    } else if (typeof(date) == "number") {
	      // UNIX timestamp
	      convertedDate = new Date();
	      convertedDate.setTime(date);
	    } else if (date.match(/([A-Z][a-z]{2}) ([A-Z][a-z]{2}) (\d+) (\d+:\d+:\d+) ([+-]\d+) (\d+)/)) {
	      // This format `Wed Jul 20 13:03:39 +0000 2011` is parsed by
	      // webkit/firefox, but not by IE, so we must parse it manually.
	      convertedDate = new Date();
	      convertedDate.setTime(Date.parse([
	        RegExp.$1, RegExp.$2, RegExp.$3, RegExp.$6, RegExp.$4, RegExp.$5
	      ].join(" ")));
	    } else if (date.match(/\d+ \d+:\d+:\d+ [+-]\d+ \d+/)) {
	      // a valid javascript format with timezone info
	      convertedDate = new Date();
	      convertedDate.setTime(Date.parse(date));
	    } else {
	      // an arbitrary javascript string
	      convertedDate = new Date();
	      convertedDate.setTime(Date.parse(date));
	    }

	    return convertedDate;
	  };

	  // Formats time according to the directives in the given format string.
	  // The directives begins with a percent (%) character. Any text not listed as a
	  // directive will be passed through to the output string.
	  //
	  // The accepted formats are:
	  //
	  //     %a  - The abbreviated weekday name (Sun)
	  //     %A  - The full weekday name (Sunday)
	  //     %b  - The abbreviated month name (Jan)
	  //     %B  - The full month name (January)
	  //     %c  - The preferred local date and time representation
	  //     %d  - Day of the month (01..31)
	  //     %-d - Day of the month (1..31)
	  //     %H  - Hour of the day, 24-hour clock (00..23)
	  //     %-H - Hour of the day, 24-hour clock (0..23)
	  //     %I  - Hour of the day, 12-hour clock (01..12)
	  //     %-I - Hour of the day, 12-hour clock (1..12)
	  //     %m  - Month of the year (01..12)
	  //     %-m - Month of the year (1..12)
	  //     %M  - Minute of the hour (00..59)
	  //     %-M - Minute of the hour (0..59)
	  //     %p  - Meridian indicator (AM  or  PM)
	  //     %S  - Second of the minute (00..60)
	  //     %-S - Second of the minute (0..60)
	  //     %w  - Day of the week (Sunday is 0, 0..6)
	  //     %y  - Year without a century (00..99)
	  //     %-y - Year without a century (0..99)
	  //     %Y  - Year with century
	  //     %z  - Timezone offset (+0545)
	  //
	  I18n.strftime = function(date, format) {
	    var options = this.lookup("date")
	      , meridianOptions = I18n.meridian()
	    ;

	    if (!options) {
	      options = {};
	    }

	    options = this.prepareOptions(options, DATE);

	    var weekDay = date.getDay()
	      , day = date.getDate()
	      , year = date.getFullYear()
	      , month = date.getMonth() + 1
	      , hour = date.getHours()
	      , hour12 = hour
	      , meridian = hour > 11 ? 1 : 0
	      , secs = date.getSeconds()
	      , mins = date.getMinutes()
	      , offset = date.getTimezoneOffset()
	      , absOffsetHours = Math.floor(Math.abs(offset / 60))
	      , absOffsetMinutes = Math.abs(offset) - (absOffsetHours * 60)
	      , timezoneoffset = (offset > 0 ? "-" : "+") +
	          (absOffsetHours.toString().length < 2 ? "0" + absOffsetHours : absOffsetHours) +
	          (absOffsetMinutes.toString().length < 2 ? "0" + absOffsetMinutes : absOffsetMinutes)
	    ;

	    if (hour12 > 12) {
	      hour12 = hour12 - 12;
	    } else if (hour12 === 0) {
	      hour12 = 12;
	    }

	    format = format.replace("%a", options.abbr_day_names[weekDay]);
	    format = format.replace("%A", options.day_names[weekDay]);
	    format = format.replace("%b", options.abbr_month_names[month]);
	    format = format.replace("%B", options.month_names[month]);
	    format = format.replace("%d", padding(day));
	    format = format.replace("%e", day);
	    format = format.replace("%-d", day);
	    format = format.replace("%H", padding(hour));
	    format = format.replace("%-H", hour);
	    format = format.replace("%I", padding(hour12));
	    format = format.replace("%-I", hour12);
	    format = format.replace("%m", padding(month));
	    format = format.replace("%-m", month);
	    format = format.replace("%M", padding(mins));
	    format = format.replace("%-M", mins);
	    format = format.replace("%p", meridianOptions[meridian]);
	    format = format.replace("%S", padding(secs));
	    format = format.replace("%-S", secs);
	    format = format.replace("%w", weekDay);
	    format = format.replace("%y", padding(year));
	    format = format.replace("%-y", padding(year).replace(/^0+/, ""));
	    format = format.replace("%Y", year);
	    format = format.replace("%z", timezoneoffset);

	    return format;
	  };

	  // Convert the given dateString into a formatted date.
	  I18n.toTime = function(scope, dateString) {
	    var date = this.parseDate(dateString)
	      , format = this.lookup(scope)
	    ;

	    if (date.toString().match(/invalid/i)) {
	      return date.toString();
	    }

	    if (!format) {
	      return date.toString();
	    }

	    return this.strftime(date, format);
	  };

	  // Convert a number into a formatted percentage value.
	  I18n.toPercentage = function(number, options) {
	    options = this.prepareOptions(
	        options
	      , this.lookup("number.percentage.format")
	      , this.lookup("number.format")
	      , PERCENTAGE_FORMAT
	    );

	    number = this.toNumber(number, options);
	    return number + "%";
	  };

	  // Convert a number into a readable size representation.
	  I18n.toHumanSize = function(number, options) {
	    var kb = 1024
	      , size = number
	      , iterations = 0
	      , unit
	      , precision
	    ;

	    while (size >= kb && iterations < 4) {
	      size = size / kb;
	      iterations += 1;
	    }

	    if (iterations === 0) {
	      unit = this.t("number.human.storage_units.units.byte", {count: size});
	      precision = 0;
	    } else {
	      unit = this.t("number.human.storage_units.units." + SIZE_UNITS[iterations]);
	      precision = (size - Math.floor(size) === 0) ? 0 : 1;
	    }

	    options = this.prepareOptions(
	        options
	      , {precision: precision, format: "%n%u", delimiter: ""}
	    );

	    number = this.toNumber(size, options);
	    number = options.format
	      .replace("%u", unit)
	      .replace("%n", number)
	    ;

	    return number;
	  };

	  // Set aliases, so we can save some typing.
	  I18n.t = I18n.translate;
	  I18n.l = I18n.localize;
	  I18n.p = I18n.pluralize;
	})(false ? (this.I18n || (this.I18n = {})) : exports);


/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = {
		"en": {
			"js": {
				"ajax": {
					"hide": "Hide",
					"loading": "Loading ..."
				},
				"close_popup_title": "Close popup",
				"clipboard": {
					"browser_error": "Your browser doesn't support copying to clipboard. Please copy the selected text manually.",
					"copied_successful": "Sucessfully copied to clipboard!"
				},
				"button_add_watcher": "Add watcher",
				"button_cancel": "Cancel",
				"button_check_all": "Check all",
				"button_copy": "Copy",
				"button_delete": "Delete",
				"button_delete_watcher": "Delete watcher",
				"button_details_view": "Details view",
				"button_duplicate": "Duplicate",
				"button_edit": "Edit",
				"button_filter": "Filter",
				"button_list_view": "List view",
				"button_log_time": "Log time",
				"button_more": "More",
				"button_move": "Move",
				"button_open_details": "Open details view",
				"button_quote": "Quote",
				"button_save": "Save",
				"button_settings": "Settings",
				"button_uncheck_all": "Uncheck all",
				"button_update": "Update",
				"description_available_columns": "Available Columns",
				"description_select_work_package": "Select work package",
				"description_selected_columns": "Selected Columns",
				"description_subwork_package": "Sub work package of",
				"filter": {
					"noneElement": "(none)"
				},
				"general_text_no": "no",
				"general_text_yes": "yes",
				"general_text_No": "No",
				"general_text_Yes": "Yes",
				"label_activate": "Activate",
				"label_add_columns": "Add selected columns",
				"label_add_comment": "Add comment",
				"label_add_comment_title": "Add your comments here",
				"label_added_by": "added by",
				"label_added_time_by": "Added by %{author} %{age}",
				"label_ago": "days ago",
				"label_all": "all",
				"label_all_work_packages": "all work packages",
				"label_ascending": "Ascending",
				"label_board_locked": "Locked",
				"label_board_sticky": "Sticky",
				"label_date": "Date",
				"label_deactivate": "Deactivate",
				"label_descending": "Descending",
				"label_description": "Description",
				"label_closed_work_packages": "closed",
				"label_collapse": "Collapse",
				"label_collapsed": "collapsed",
				"label_collapse_all": "Collapse all",
				"label_committed_at": "%{committed_revision_link} at %{date}",
				"label_committed_link": "committed revision %{revision_identifier}",
				"label_contains": "contains",
				"label_created_on": "created on",
				"label_equals": "is",
				"label_expand": "Expand",
				"label_expanded": "expanded",
				"label_expand_all": "Expand all",
				"label_export": "Export",
				"label_filename": "File",
				"label_filesize": "Size",
				"label_format_atom": "Atom",
				"label_format_csv": "CSV",
				"label_format_pdf": "PDF",
				"label_format_pdf_with_descriptions": "PDF with descriptions",
				"label_greater_or_equal": ">=",
				"label_group_by": "Group by",
				"label_hide_attributes": "Hide empty",
				"label_hide_column": "Hide column",
				"label_in": "in",
				"label_in_less_than": "in less than",
				"label_in_more_than": "in more than",
				"label_latest_activity": "Latest Activity",
				"label_last_updated_on": "Last updated on",
				"label_less_or_equal": "<=",
				"label_less_than_ago": "less than days ago",
				"label_loading": "Loading...",
				"label_me": "me",
				"label_menu_collapse": "collapse",
				"label_menu_expand": "expand",
				"label_more_than_ago": "more than days ago",
				"label_next": "Next",
				"label_no_data": "No data to display",
				"label_no_due_date": "no end date",
				"label_no_start_date": "no start date",
				"label_none": "none",
				"label_not_contains": "doesn't contain",
				"label_not_equals": "is not",
				"label_on": "on",
				"label_open_menu": "Open menu",
				"label_open_work_packages": "open",
				"label_previous": "Previous",
				"label_per_page": "Per page:",
				"label_remove_columns": "Remove selected columns",
				"label_save_as": "Save as",
				"label_select_watcher": "Select a watcher...",
				"label_selected_filter_list": "Selected filters",
				"label_share": "Share",
				"label_show_attributes": "Show all",
				"label_show_in_menu": "Show page in menu",
				"label_sort_by": "Sort by",
				"label_sorted_by": "sorted by",
				"label_sort_higher": "Move up",
				"label_sort_lower": "Move down",
				"label_sorting": "Sorting",
				"label_sum_for": "Sum for",
				"label_subject": "Subject",
				"label_this_week": "this week",
				"label_today": "today",
				"label_total_progress": "%{percent}% Total progress",
				"label_visible_for_others": "Page visible for others",
				"label_updated_on": "updated on",
				"label_work_package": "Work package",
				"label_watch_work_package": "Watch work package",
				"label_watcher_added_successfully": "Watcher successfully added!",
				"label_watcher_deleted_successfully": "Watcher successfully deleted!",
				"label_work_package_details_you_are_here": "You're on the %{tab} tab for %{type} %{subject}.",
				"label_unwatch_work_package": "Unwatch work package",
				"label_uploaded_by": "Uploaded by",
				"label_global_queries": "Shared queries",
				"label_custom_queries": "Private queries",
				"label_columns": "Columns",
				"label_click_to_enter_description": "Click to enter description...",
				"label_attachments": "Files",
				"label_drop_files": "Drop files here",
				"label_drop_files_hint": "or click to add files",
				"label_remove_file": "Delete %{fileName}",
				"label_remove_watcher": "Delete watcher %{name}",
				"label_remove_all_files": "Delete all files",
				"label_add_description": "Add a description for %{file}",
				"label_upload_notification": "Uploading files for Work package #%{id}: %{subject}",
				"label_files_to_upload": "These files will be uploaded:",
				"label_rejected_files": "These files cannot be uploaded:",
				"label_rejected_files_reason": "These files cannot be uploaded as their size is greater than %{maximumFilesize}",
				"label_wait": "Please wait for configuration...",
				"label_upload_counter": "%{done} of %{count} files finished",
				"label_successful_update": "Successful update",
				"label_validation_error": "The work package could not be saved due to the following errors:",
				"text_are_you_sure": "Are you sure?",
				"watchers": {
					"label_loading": "loading watchers...",
					"label_error_loading": "An error occured while loading the watchers",
					"label_search_watchers": "Search watchers",
					"label_add": "Add watchers",
					"label_discard": "Discard selection",
					"label_click_to_add": "Click to add watchers"
				},
				"filter_labels": {
					"assigned_to": "Assignee",
					"assigned_to_role": "Assignee's role",
					"author": "Author",
					"category": "Category",
					"created_at": "Created on",
					"done_ratio": "% done",
					"due_date": "Due date",
					"estimated_hours": "Estimated time",
					"fixed_version": "Version",
					"member_of_group": "Assignee's group",
					"parent": "Parent",
					"parent_issue": "Parent",
					"parent_work_package": "Parent",
					"priority": "Priority",
					"progress": "% done",
					"project": "Project",
					"responsible": "Responsible",
					"spent_time": "Spent time",
					"start_date": "Start date",
					"status": "Status",
					"subject": "Subject",
					"subproject": "Subproject",
					"time_entries": "Log time",
					"type": "Type",
					"updated_at": "Updated on",
					"version": "Version",
					"watcher": "Watcher"
				},
				"relation_labels": {
					"parent": "Parent",
					"children": "Children",
					"relates": "Related To",
					"duplicates": "Duplicates",
					"duplicated": "Duplicated by",
					"blocks": "Blocks",
					"blocked": "Blocked by",
					"precedes": "Precedes",
					"follows": "Follows"
				},
				"relation_buttons": {
					"change_parent": "Change parent",
					"add_child": "Add child",
					"add_related_to": "Add related to",
					"add_duplicates": "Add duplicates",
					"add_duplicated_by": "Add duplicated by",
					"add_blocks": "Add blocks",
					"add_blocked_by": "Add blocked by",
					"add_precedes": "Add precedes",
					"add_follows": "Add follows"
				},
				"repositories": {
					"select_tag": "Select tag",
					"select_branch": "Select branch"
				},
				"field_value_enter_prompt": "Enter a value for '%{field}'",
				"select2": {
					"input_too_short": {
						"one": "Please enter one more character",
						"other": "Please enter {{count}} more characters",
						"zero": "Please enter more characters"
					},
					"load_more": "Loading more results ...",
					"no_matches": "No matches found",
					"searching": "Searching ...",
					"selection_too_big": {
						"one": "You can only select one item",
						"other": "You can only select {{limit}} items",
						"zero": "You cannot select any items"
					}
				},
				"text_work_packages_destroy_confirmation": "Are you sure you want to delete the selected work package(s)?",
				"text_query_destroy_confirmation": "Are you sure you want to delete the selected query?",
				"text_attachment_destroy_confirmation": "Are you sure you want to delete the attachment?",
				"timelines": {
					"cancel": "Cancel",
					"change": "Change in planning",
					"due_date": "Due date",
					"empty": "(empty)",
					"error": "An error has occured.",
					"errors": {
						"not_implemented": "The timeline could not be rendered because it uses a feature that is not yet implemented.",
						"report_comparison": "The timeline could not render the configured comparisons. Please check the appropriate section in the configuration, resetting it can help solve this problem.",
						"report_epicfail": "The timeline could not be loaded due to an unexpected error.",
						"report_timeout": "The timeline could not be loaded in a reasonable amount of time."
					},
					"filter": {
						"column": {
							"assigned_to": "Assignee",
							"type": "Type",
							"due_date": "End date",
							"name": "Name",
							"status": "Status",
							"responsible": "Responsible",
							"start_date": "Start date"
						},
						"grouping_other": "Other",
						"noneSelection": "(none)"
					},
					"name": "Name",
					"new_work_package": "New work package",
					"outline": "Reset Outline",
					"outlines": {
						"aggregation": "Show aggregations only",
						"level1": "Expand level 1",
						"level2": "Expand level 2",
						"level3": "Expand level 3",
						"level4": "Expand level 4",
						"level5": "Expand level 5",
						"all": "Show all"
					},
					"project_status": "Project status",
					"project_type": "Project type",
					"really_close_dialog": "Do you really want to close the dialog and lose the entered data?",
					"responsible": "Responsible",
					"save": "Save",
					"start_date": "Start date",
					"tooManyProjects": "More than %{count} Projects. Please use a better filter!",
					"zoom": {
						"in": "Zoom in",
						"out": "Zoom out",
						"days": "Days",
						"weeks": "Weeks",
						"months": "Months",
						"quarters": "Quarters",
						"years": "Years",
						"slider": "Zoom slider"
					}
				},
				"tl_toolbar": {
					"zooms": "Zoom level",
					"outlines": "Hierarchy level"
				},
				"unsupported_browser": {
					"title": "Your browser version is not supported",
					"message": "The browser version you are using is no longer supported by OpenProject. Please update your browser.",
					"learn_more": "Learn more"
				},
				"wiki_formatting": {
					"strong": "Strong",
					"italic": "Italic",
					"underline": "Underline",
					"deleted": "Deleted",
					"code": "Inline Code",
					"heading1": "Heading 1",
					"heading2": "Heading 2",
					"heading3": "Heading 3",
					"unordered_list": "Unordered List",
					"ordered_list": "Ordered List",
					"quote": "Quote",
					"unquote": "Unquote",
					"preformatted_text": "Preformatted Text",
					"wiki_link": "Link to a Wiki page",
					"image": "Image"
				},
				"work_packages": {
					"button_clear": "Clear",
					"description_filter": "Filter",
					"description_enter_text": "Enter text",
					"description_options_hide": "Hide options",
					"description_options_show": "Show options",
					"error": "An error has occured.",
					"label_enable_multi_select": "Enable multiselect",
					"label_disable_multi_select": "Disable multiselect",
					"label_filter_add": "Add filter",
					"label_options": "Options",
					"label_column_multiselect": "Combined dropdown field: Select with arrow keys, confirm selection with enter, delete with backspace",
					"label_column_select": "Status - Combined dropdown field: Selection with auto-completion.",
					"message_error_during_bulk_delete": "An error occurred while trying to delete work packages.",
					"message_successful_bulk_delete": "Successfully deleted work packages.",
					"create": {
						"header": "New Work Package"
					},
					"no_results": {
						"title": "No work packages to display",
						"description_html": "<p>Either none have been created or all work packages are filtered out.</p>\n"
					},
					"property_groups": {
						"details": "Details",
						"people": "People",
						"estimatesAndTime": "Estimates & Time",
						"other": "Other"
					},
					"properties": {
						"assignee": "Assignee",
						"author": "Author",
						"createdAt": "Created on",
						"description": "Description",
						"date": "Date",
						"dueDate": "Due date",
						"estimatedTime": "Estimated time",
						"spentTime": "Spent time",
						"category": "Category",
						"percentageDone": "Percentage done",
						"priority": "Priority",
						"projectName": "Project",
						"responsible": "Responsible",
						"startDate": "Start date",
						"status": "Status",
						"subject": "Subject",
						"title": "Title",
						"type": "Type",
						"updatedAt": "Updated on",
						"versionName": "Version",
						"version": "Version"
					},
					"query": {
						"column_names": "Columns",
						"group_by": "Group results by",
						"group": "Group by",
						"sort_ascending": "Sort ascending",
						"sort_descending": "Sort descending",
						"move_column_left": "Move column left",
						"move_column_right": "Move column right",
						"hide_column": "Hide column",
						"insert_columns": "Insert columns ...",
						"filters": "Filters",
						"display_sums": "Display Sums",
						"errors": {
							"unretrievable_query": "Unable to retrieve query from URL"
						}
					},
					"tabs": {
						"overview": "Overview",
						"activity": "Activity",
						"relations": "Relations",
						"watchers": "Watchers",
						"attachments": "Attachments"
					},
					"time_relative": {
						"days": "days",
						"weeks": "weeks",
						"months": "months"
					}
				},
				"toolbar": {
					"settings": {
						"columns": "Columns ...",
						"sort_by": "Sort by ...",
						"group_by": "Group by ...",
						"display_sums": "Display sums",
						"hide_sums": "Hide sums",
						"save": "Save",
						"save_as": "Save as ...",
						"export": "Export ...",
						"share": "Share ...",
						"page_settings": "Rename query ...",
						"delete": "Delete"
					},
					"filter": "Filter",
					"unselected_title": "Work packages"
				},
				"modals": {
					"label_settings": "Rename query",
					"label_name": "Name",
					"label_delete_page": "Delete current page",
					"button_apply": "Apply",
					"button_save": "Save",
					"button_submit": "Submit",
					"button_cancel": "Cancel"
				},
				"notice_successful_create": "Successful creation.",
				"notice_successful_delete": "Successful deletion.",
				"notice_successful_update": "Successful update.",
				"notice_bad_request": "Bad Request.",
				"relations": {
					"empty": "No relation exists",
					"delete": "Delete relation"
				},
				"inplace": {
					"button_edit": "%{attribute}: Edit",
					"button_save": "%{attribute}: Save",
					"button_save_and_send": "%{attribute}: Save and send email",
					"button_cancel": "%{attribute}: Cancel",
					"button_save_all": "Save",
					"button_save_and_send_all": "Save and send email",
					"button_cancel_all": "Cancel",
					"link_formatting_help": "Text formatting",
					"btn_preview_enable": "Preview",
					"btn_preview_disable": "Disable preview",
					"null_value_label": "No value",
					"clear_value_label": "-",
					"errors": {
						"required": "%{field} cannot be empty",
						"number": "%{field} is not a valid number"
					}
				},
				"error_could_not_resolve_version_name": "Couldn't resolve version name",
				"error_could_not_resolve_user_name": "Couldn't resolve user name",
				"units": {
					"hour": {
						"one": "1 hour",
						"other": "%{count} hours",
						"zero": "0 hours"
					}
				}
			}
		}
	}

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.3.18
	 * (c) 2010-2014 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular, undefined) {'use strict';

	/* jshint maxlen: false */

	/**
	 * @ngdoc module
	 * @name ngAnimate
	 * @description
	 *
	 * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
	 *
	 * <div doc-module-components="ngAnimate"></div>
	 *
	 * # Usage
	 *
	 * To see animations in action, all that is required is to define the appropriate CSS classes
	 * or to register a JavaScript animation via the `myModule.animation()` function. The directives that support animation automatically are:
	 * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
	 * by using the `$animate` service.
	 *
	 * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
	 *
	 * | Directive                                                                                                | Supported Animations                                                     |
	 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
	 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
	 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
	 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
	 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
	 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
	 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
	 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
	 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
	 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
	 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
	 *
	 * You can find out more information about animations upon visiting each directive page.
	 *
	 * Below is an example of how to apply animations to a directive that supports animation hooks:
	 *
	 * ```html
	 * <style type="text/css">
	 * .slide.ng-enter, .slide.ng-leave {
	 *   -webkit-transition:0.5s linear all;
	 *   transition:0.5s linear all;
	 * }
	 *
	 * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
	 * .slide.ng-enter.ng-enter-active { } /&#42; terminal animations for enter &#42;/
	 * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
	 * .slide.ng-leave.ng-leave-active { } /&#42; terminal animations for leave &#42;/
	 * </style>
	 *
	 * <!--
	 * the animate service will automatically add .ng-enter and .ng-leave to the element
	 * to trigger the CSS transition/animations
	 * -->
	 * <ANY class="slide" ng-include="..."></ANY>
	 * ```
	 *
	 * Keep in mind that, by default, if an animation is running, any child elements cannot be animated
	 * until the parent element's animation has completed. This blocking feature can be overridden by
	 * placing the `ng-animate-children` attribute on a parent container tag.
	 *
	 * ```html
	 * <div class="slide-animation" ng-if="on" ng-animate-children>
	 *   <div class="fade-animation" ng-if="on">
	 *     <div class="explode-animation" ng-if="on">
	 *        ...
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * When the `on` expression value changes and an animation is triggered then each of the elements within
	 * will all animate without the block being applied to child elements.
	 *
	 * ## Are animations run when the application starts?
	 * No they are not. When an application is bootstrapped Angular will disable animations from running to avoid
	 * a frenzy of animations from being triggered as soon as the browser has rendered the screen. For this to work,
	 * Angular will wait for two digest cycles until enabling animations. From there on, any animation-triggering
	 * layout changes in the application will trigger animations as normal.
	 *
	 * In addition, upon bootstrap, if the routing system or any directives or load remote data (via $http) then Angular
	 * will automatically extend the wait time to enable animations once **all** of the outbound HTTP requests
	 * are complete.
	 *
	 * ## CSS-defined Animations
	 * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
	 * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
	 * and can be used to play along with this naming structure.
	 *
	 * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
	 *
	 * ```html
	 * <style type="text/css">
	 * /&#42;
	 *  The animate class is apart of the element and the ng-enter class
	 *  is attached to the element once the enter animation event is triggered
	 * &#42;/
	 * .reveal-animation.ng-enter {
	 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
	 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
	 *
	 *  /&#42; The animation preparation code &#42;/
	 *  opacity: 0;
	 * }
	 *
	 * /&#42;
	 *  Keep in mind that you want to combine both CSS
	 *  classes together to avoid any CSS-specificity
	 *  conflicts
	 * &#42;/
	 * .reveal-animation.ng-enter.ng-enter-active {
	 *  /&#42; The animation code itself &#42;/
	 *  opacity: 1;
	 * }
	 * </style>
	 *
	 * <div class="view-container">
	 *   <div ng-view class="reveal-animation"></div>
	 * </div>
	 * ```
	 *
	 * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
	 *
	 * ```html
	 * <style type="text/css">
	 * .reveal-animation.ng-enter {
	 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
	 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
	 * }
	 * @-webkit-keyframes enter_sequence {
	 *   from { opacity:0; }
	 *   to { opacity:1; }
	 * }
	 * @keyframes enter_sequence {
	 *   from { opacity:0; }
	 *   to { opacity:1; }
	 * }
	 * </style>
	 *
	 * <div class="view-container">
	 *   <div ng-view class="reveal-animation"></div>
	 * </div>
	 * ```
	 *
	 * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
	 *
	 * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
	 * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
	 * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
	 * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
	 * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
	 * has no CSS transition/animation classes applied to it.
	 *
	 * ### Structural transition animations
	 *
	 * Structural transitions (such as enter, leave and move) will always apply a `0s none` transition
	 * value to force the browser into rendering the styles defined in the setup (`.ng-enter`, `.ng-leave`
	 * or `.ng-move`) class. This means that any active transition animations operating on the element
	 * will be cut off to make way for the enter, leave or move animation.
	 *
	 * ### Class-based transition animations
	 *
	 * Class-based transitions refer to transition animations that are triggered when a CSS class is
	 * added to or removed from the element (via `$animate.addClass`, `$animate.removeClass`,
	 * `$animate.setClass`, or by directives such as `ngClass`, `ngModel` and `form`).
	 * They are different when compared to structural animations since they **do not cancel existing
	 * animations** nor do they **block successive transitions** from rendering on the same element.
	 * This distinction allows for **multiple class-based transitions** to be performed on the same element.
	 *
	 * In addition to ngAnimate supporting the default (natural) functionality of class-based transition
	 * animations, ngAnimate also decorates the element with starting and ending CSS classes to aid the
	 * developer in further styling the element throughout the transition animation. Earlier versions
	 * of ngAnimate may have caused natural CSS transitions to break and not render properly due to
	 * $animate temporarily blocking transitions using `0s none` in order to allow the setup CSS class
	 * (the `-add` or `-remove` class) to be applied without triggering an animation. However, as of
	 * **version 1.3**, this workaround has been removed with ngAnimate and all non-ngAnimate CSS
	 * class transitions are compatible with ngAnimate.
	 *
	 * There is, however, one special case when dealing with class-based transitions in ngAnimate.
	 * When rendering class-based transitions that make use of the setup and active CSS classes
	 * (e.g. `.fade-add` and `.fade-add-active` for when `.fade` is added) be sure to define
	 * the transition value **on the active CSS class** and not the setup class.
	 *
	 * ```css
	 * .fade-add {
	 *   /&#42; remember to place a 0s transition here
	 *      to ensure that the styles are applied instantly
	 *      even if the element already has a transition style &#42;/
	 *   transition:0s linear all;
	 *
	 *   /&#42; starting CSS styles &#42;/
	 *   opacity:1;
	 * }
	 * .fade-add.fade-add-active {
	 *   /&#42; this will be the length of the animation &#42;/
	 *   transition:1s linear all;
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * The setup CSS class (in this case `.fade-add`) also has a transition style property, however, it
	 * has a duration of zero. This may not be required, however, incase the browser is unable to render
	 * the styling present in this CSS class instantly then it could be that the browser is attempting
	 * to perform an unnecessary transition.
	 *
	 * This workaround, however, does not apply to  standard class-based transitions that are rendered
	 * when a CSS class containing a transition is applied to an element:
	 *
	 * ```css
	 * /&#42; this works as expected &#42;/
	 * .fade {
	 *   transition:1s linear all;
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * Please keep this in mind when coding the CSS markup that will be used within class-based transitions.
	 * Also, try not to mix the two class-based animation flavors together since the CSS code may become
	 * overly complex.
	 *
	 *
	 * ### Preventing Collisions With Third Party Libraries
	 *
	 * Some third-party frameworks place animation duration defaults across many element or className
	 * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
	 * is expecting actual animations on these elements and has to wait for their completion.
	 *
	 * You can prevent this unwanted behavior by using a prefix on all your animation classes:
	 *
	 * ```css
	 * /&#42; prefixed with animate- &#42;/
	 * .animate-fade-add.animate-fade-add-active {
	 *   transition:1s linear all;
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * You then configure `$animate` to enforce this prefix:
	 *
	 * ```js
	 * $animateProvider.classNameFilter(/animate-/);
	 * ```
	 * </div>
	 *
	 * ### CSS Staggering Animations
	 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
	 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
	 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
	 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
	 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
	 *
	 * ```css
	 * .my-animation.ng-enter {
	 *   /&#42; standard transition code &#42;/
	 *   -webkit-transition: 1s linear all;
	 *   transition: 1s linear all;
	 *   opacity:0;
	 * }
	 * .my-animation.ng-enter-stagger {
	 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
	 *   -webkit-transition-delay: 0.1s;
	 *   transition-delay: 0.1s;
	 *
	 *   /&#42; in case the stagger doesn't work then these two values
	 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
	 *   -webkit-transition-duration: 0s;
	 *   transition-duration: 0s;
	 * }
	 * .my-animation.ng-enter.ng-enter-active {
	 *   /&#42; standard transition styles &#42;/
	 *   opacity:1;
	 * }
	 * ```
	 *
	 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
	 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
	 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
	 * will also be reset if more than 10ms has passed after the last animation has been fired.
	 *
	 * The following code will issue the **ng-leave-stagger** event on the element provided:
	 *
	 * ```js
	 * var kids = parent.children();
	 *
	 * $animate.leave(kids[0]); //stagger index=0
	 * $animate.leave(kids[1]); //stagger index=1
	 * $animate.leave(kids[2]); //stagger index=2
	 * $animate.leave(kids[3]); //stagger index=3
	 * $animate.leave(kids[4]); //stagger index=4
	 *
	 * $timeout(function() {
	 *   //stagger has reset itself
	 *   $animate.leave(kids[5]); //stagger index=0
	 *   $animate.leave(kids[6]); //stagger index=1
	 * }, 100, false);
	 * ```
	 *
	 * Stagger animations are currently only supported within CSS-defined animations.
	 *
	 * ## JavaScript-defined Animations
	 * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
	 * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
	 *
	 * ```js
	 * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
	 * var ngModule = angular.module('YourApp', ['ngAnimate']);
	 * ngModule.animation('.my-crazy-animation', function() {
	 *   return {
	 *     enter: function(element, done) {
	 *       //run the animation here and call done when the animation is complete
	 *       return function(cancelled) {
	 *         //this (optional) function will be called when the animation
	 *         //completes or when the animation is cancelled (the cancelled
	 *         //flag will be set to true if cancelled).
	 *       };
	 *     },
	 *     leave: function(element, done) { },
	 *     move: function(element, done) { },
	 *
	 *     //animation that can be triggered before the class is added
	 *     beforeAddClass: function(element, className, done) { },
	 *
	 *     //animation that can be triggered after the class is added
	 *     addClass: function(element, className, done) { },
	 *
	 *     //animation that can be triggered before the class is removed
	 *     beforeRemoveClass: function(element, className, done) { },
	 *
	 *     //animation that can be triggered after the class is removed
	 *     removeClass: function(element, className, done) { }
	 *   };
	 * });
	 * ```
	 *
	 * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
	 * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
	 * the element's CSS class attribute value and then run the matching animation event function (if found).
	 * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
	 * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
	 *
	 * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
	 * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
	 * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
	 * or transition code that is defined via a stylesheet).
	 *
	 *
	 * ### Applying Directive-specific Styles to an Animation
	 * In some cases a directive or service may want to provide `$animate` with extra details that the animation will
	 * include into its animation. Let's say for example we wanted to render an animation that animates an element
	 * towards the mouse coordinates as to where the user clicked last. By collecting the X/Y coordinates of the click
	 * (via the event parameter) we can set the `top` and `left` styles into an object and pass that into our function
	 * call to `$animate.addClass`.
	 *
	 * ```js
	 * canvas.on('click', function(e) {
	 *   $animate.addClass(element, 'on', {
	 *     to: {
	 *       left : e.client.x + 'px',
	 *       top : e.client.y + 'px'
	 *     }
	 *   }):
	 * });
	 * ```
	 *
	 * Now when the animation runs, and a transition or keyframe animation is picked up, then the animation itself will
	 * also include and transition the styling of the `left` and `top` properties into its running animation. If we want
	 * to provide some starting animation values then we can do so by placing the starting animations styles into an object
	 * called `from` in the same object as the `to` animations.
	 *
	 * ```js
	 * canvas.on('click', function(e) {
	 *   $animate.addClass(element, 'on', {
	 *     from: {
	 *        position: 'absolute',
	 *        left: '0px',
	 *        top: '0px'
	 *     },
	 *     to: {
	 *       left : e.client.x + 'px',
	 *       top : e.client.y + 'px'
	 *     }
	 *   }):
	 * });
	 * ```
	 *
	 * Once the animation is complete or cancelled then the union of both the before and after styles are applied to the
	 * element. If `ngAnimate` is not present then the styles will be applied immediately.
	 *
	 */

	angular.module('ngAnimate', ['ng'])

	  /**
	   * @ngdoc provider
	   * @name $animateProvider
	   * @description
	   *
	   * The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.
	   * When an animation is triggered, the $animate service will query the $animate service to find any animations that match
	   * the provided name value.
	   *
	   * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
	   *
	   * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
	   *
	   */
	  .directive('ngAnimateChildren', function() {
	    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
	    return function(scope, element, attrs) {
	      var val = attrs.ngAnimateChildren;
	      if (angular.isString(val) && val.length === 0) { //empty attribute
	        element.data(NG_ANIMATE_CHILDREN, true);
	      } else {
	        scope.$watch(val, function(value) {
	          element.data(NG_ANIMATE_CHILDREN, !!value);
	        });
	      }
	    };
	  })

	  //this private service is only used within CSS-enabled animations
	  //IE8 + IE9 do not support rAF natively, but that is fine since they
	  //also don't support transitions and keyframes which means that the code
	  //below will never be used by the two browsers.
	  .factory('$$animateReflow', ['$$rAF', '$document', function($$rAF, $document) {
	    var bod = $document[0].body;
	    return function(fn) {
	      //the returned function acts as the cancellation function
	      return $$rAF(function() {
	        //the line below will force the browser to perform a repaint
	        //so that all the animated elements within the animation frame
	        //will be properly updated and drawn on screen. This is
	        //required to perform multi-class CSS based animations with
	        //Firefox. DO NOT REMOVE THIS LINE. DO NOT OPTIMIZE THIS LINE.
	        //THE MINIFIER WILL REMOVE IT OTHERWISE WHICH WILL RESULT IN AN
	        //UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND WILL
	        //TAKE YEARS AWAY FROM YOUR LIFE!
	        fn(bod.offsetWidth);
	      });
	    };
	  }])

	  .config(['$provide', '$animateProvider', function($provide, $animateProvider) {
	    var noop = angular.noop;
	    var forEach = angular.forEach;
	    var selectors = $animateProvider.$$selectors;
	    var isArray = angular.isArray;
	    var isString = angular.isString;
	    var isObject = angular.isObject;

	    var ELEMENT_NODE = 1;
	    var NG_ANIMATE_STATE = '$$ngAnimateState';
	    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
	    var NG_ANIMATE_CLASS_NAME = 'ng-animate';
	    var rootAnimateState = {running: true};

	    function extractElementNode(element) {
	      for (var i = 0; i < element.length; i++) {
	        var elm = element[i];
	        if (elm.nodeType == ELEMENT_NODE) {
	          return elm;
	        }
	      }
	    }

	    function prepareElement(element) {
	      return element && angular.element(element);
	    }

	    function stripCommentsFromElement(element) {
	      return angular.element(extractElementNode(element));
	    }

	    function isMatchingElement(elm1, elm2) {
	      return extractElementNode(elm1) == extractElementNode(elm2);
	    }
	    var $$jqLite;
	    $provide.decorator('$animate',
	        ['$delegate', '$$q', '$injector', '$sniffer', '$rootElement', '$$asyncCallback', '$rootScope', '$document', '$templateRequest', '$$jqLite',
	 function($delegate,   $$q,   $injector,   $sniffer,   $rootElement,   $$asyncCallback,   $rootScope,   $document,   $templateRequest,   $$$jqLite) {

	      $$jqLite = $$$jqLite;
	      $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);

	      // Wait until all directive and route-related templates are downloaded and
	      // compiled. The $templateRequest.totalPendingRequests variable keeps track of
	      // all of the remote templates being currently downloaded. If there are no
	      // templates currently downloading then the watcher will still fire anyway.
	      var deregisterWatch = $rootScope.$watch(
	        function() { return $templateRequest.totalPendingRequests; },
	        function(val, oldVal) {
	          if (val !== 0) return;
	          deregisterWatch();

	          // Now that all templates have been downloaded, $animate will wait until
	          // the post digest queue is empty before enabling animations. By having two
	          // calls to $postDigest calls we can ensure that the flag is enabled at the
	          // very end of the post digest queue. Since all of the animations in $animate
	          // use $postDigest, it's important that the code below executes at the end.
	          // This basically means that the page is fully downloaded and compiled before
	          // any animations are triggered.
	          $rootScope.$$postDigest(function() {
	            $rootScope.$$postDigest(function() {
	              rootAnimateState.running = false;
	            });
	          });
	        }
	      );

	      var globalAnimationCounter = 0;
	      var classNameFilter = $animateProvider.classNameFilter();
	      var isAnimatableClassName = !classNameFilter
	              ? function() { return true; }
	              : function(className) {
	                return classNameFilter.test(className);
	              };

	      function classBasedAnimationsBlocked(element, setter) {
	        var data = element.data(NG_ANIMATE_STATE) || {};
	        if (setter) {
	          data.running = true;
	          data.structural = true;
	          element.data(NG_ANIMATE_STATE, data);
	        }
	        return data.disabled || (data.running && data.structural);
	      }

	      function runAnimationPostDigest(fn) {
	        var cancelFn, defer = $$q.defer();
	        defer.promise.$$cancelFn = function() {
	          cancelFn && cancelFn();
	        };
	        $rootScope.$$postDigest(function() {
	          cancelFn = fn(function() {
	            defer.resolve();
	          });
	        });
	        return defer.promise;
	      }

	      function parseAnimateOptions(options) {
	        // some plugin code may still be passing in the callback
	        // function as the last param for the $animate methods so
	        // it's best to only allow string or array values for now
	        if (isObject(options)) {
	          if (options.tempClasses && isString(options.tempClasses)) {
	            options.tempClasses = options.tempClasses.split(/\s+/);
	          }
	          return options;
	        }
	      }

	      function resolveElementClasses(element, cache, runningAnimations) {
	        runningAnimations = runningAnimations || {};

	        var lookup = {};
	        forEach(runningAnimations, function(data, selector) {
	          forEach(selector.split(' '), function(s) {
	            lookup[s]=data;
	          });
	        });

	        var hasClasses = Object.create(null);
	        forEach((element.attr('class') || '').split(/\s+/), function(className) {
	          hasClasses[className] = true;
	        });

	        var toAdd = [], toRemove = [];
	        forEach((cache && cache.classes) || [], function(status, className) {
	          var hasClass = hasClasses[className];
	          var matchingAnimation = lookup[className] || {};

	          // When addClass and removeClass is called then $animate will check to
	          // see if addClass and removeClass cancel each other out. When there are
	          // more calls to removeClass than addClass then the count falls below 0
	          // and then the removeClass animation will be allowed. Otherwise if the
	          // count is above 0 then that means an addClass animation will commence.
	          // Once an animation is allowed then the code will also check to see if
	          // there exists any on-going animation that is already adding or remvoing
	          // the matching CSS class.
	          if (status === false) {
	            //does it have the class or will it have the class
	            if (hasClass || matchingAnimation.event == 'addClass') {
	              toRemove.push(className);
	            }
	          } else if (status === true) {
	            //is the class missing or will it be removed?
	            if (!hasClass || matchingAnimation.event == 'removeClass') {
	              toAdd.push(className);
	            }
	          }
	        });

	        return (toAdd.length + toRemove.length) > 0 && [toAdd.join(' '), toRemove.join(' ')];
	      }

	      function lookup(name) {
	        if (name) {
	          var matches = [],
	              flagMap = {},
	              classes = name.substr(1).split('.');

	          //the empty string value is the default animation
	          //operation which performs CSS transition and keyframe
	          //animations sniffing. This is always included for each
	          //element animation procedure if the browser supports
	          //transitions and/or keyframe animations. The default
	          //animation is added to the top of the list to prevent
	          //any previous animations from affecting the element styling
	          //prior to the element being animated.
	          if ($sniffer.transitions || $sniffer.animations) {
	            matches.push($injector.get(selectors['']));
	          }

	          for (var i=0; i < classes.length; i++) {
	            var klass = classes[i],
	                selectorFactoryName = selectors[klass];
	            if (selectorFactoryName && !flagMap[klass]) {
	              matches.push($injector.get(selectorFactoryName));
	              flagMap[klass] = true;
	            }
	          }
	          return matches;
	        }
	      }

	      function animationRunner(element, animationEvent, className, options) {
	        //transcluded directives may sometimes fire an animation using only comment nodes
	        //best to catch this early on to prevent any animation operations from occurring
	        var node = element[0];
	        if (!node) {
	          return;
	        }

	        if (options) {
	          options.to = options.to || {};
	          options.from = options.from || {};
	        }

	        var classNameAdd;
	        var classNameRemove;
	        if (isArray(className)) {
	          classNameAdd = className[0];
	          classNameRemove = className[1];
	          if (!classNameAdd) {
	            className = classNameRemove;
	            animationEvent = 'removeClass';
	          } else if (!classNameRemove) {
	            className = classNameAdd;
	            animationEvent = 'addClass';
	          } else {
	            className = classNameAdd + ' ' + classNameRemove;
	          }
	        }

	        var isSetClassOperation = animationEvent == 'setClass';
	        var isClassBased = isSetClassOperation
	                           || animationEvent == 'addClass'
	                           || animationEvent == 'removeClass'
	                           || animationEvent == 'animate';

	        var currentClassName = element.attr('class');
	        var classes = currentClassName + ' ' + className;
	        if (!isAnimatableClassName(classes)) {
	          return;
	        }

	        var beforeComplete = noop,
	            beforeCancel = [],
	            before = [],
	            afterComplete = noop,
	            afterCancel = [],
	            after = [];

	        var animationLookup = (' ' + classes).replace(/\s+/g,'.');
	        forEach(lookup(animationLookup), function(animationFactory) {
	          var created = registerAnimation(animationFactory, animationEvent);
	          if (!created && isSetClassOperation) {
	            registerAnimation(animationFactory, 'addClass');
	            registerAnimation(animationFactory, 'removeClass');
	          }
	        });

	        function registerAnimation(animationFactory, event) {
	          var afterFn = animationFactory[event];
	          var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
	          if (afterFn || beforeFn) {
	            if (event == 'leave') {
	              beforeFn = afterFn;
	              //when set as null then animation knows to skip this phase
	              afterFn = null;
	            }
	            after.push({
	              event: event, fn: afterFn
	            });
	            before.push({
	              event: event, fn: beforeFn
	            });
	            return true;
	          }
	        }

	        function run(fns, cancellations, allCompleteFn) {
	          var animations = [];
	          forEach(fns, function(animation) {
	            animation.fn && animations.push(animation);
	          });

	          var count = 0;
	          function afterAnimationComplete(index) {
	            if (cancellations) {
	              (cancellations[index] || noop)();
	              if (++count < animations.length) return;
	              cancellations = null;
	            }
	            allCompleteFn();
	          }

	          //The code below adds directly to the array in order to work with
	          //both sync and async animations. Sync animations are when the done()
	          //operation is called right away. DO NOT REFACTOR!
	          forEach(animations, function(animation, index) {
	            var progress = function() {
	              afterAnimationComplete(index);
	            };
	            switch (animation.event) {
	              case 'setClass':
	                cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress, options));
	                break;
	              case 'animate':
	                cancellations.push(animation.fn(element, className, options.from, options.to, progress));
	                break;
	              case 'addClass':
	                cancellations.push(animation.fn(element, classNameAdd || className,     progress, options));
	                break;
	              case 'removeClass':
	                cancellations.push(animation.fn(element, classNameRemove || className,  progress, options));
	                break;
	              default:
	                cancellations.push(animation.fn(element, progress, options));
	                break;
	            }
	          });

	          if (cancellations && cancellations.length === 0) {
	            allCompleteFn();
	          }
	        }

	        return {
	          node: node,
	          event: animationEvent,
	          className: className,
	          isClassBased: isClassBased,
	          isSetClassOperation: isSetClassOperation,
	          applyStyles: function() {
	            if (options) {
	              element.css(angular.extend(options.from || {}, options.to || {}));
	            }
	          },
	          before: function(allCompleteFn) {
	            beforeComplete = allCompleteFn;
	            run(before, beforeCancel, function() {
	              beforeComplete = noop;
	              allCompleteFn();
	            });
	          },
	          after: function(allCompleteFn) {
	            afterComplete = allCompleteFn;
	            run(after, afterCancel, function() {
	              afterComplete = noop;
	              allCompleteFn();
	            });
	          },
	          cancel: function() {
	            if (beforeCancel) {
	              forEach(beforeCancel, function(cancelFn) {
	                (cancelFn || noop)(true);
	              });
	              beforeComplete(true);
	            }
	            if (afterCancel) {
	              forEach(afterCancel, function(cancelFn) {
	                (cancelFn || noop)(true);
	              });
	              afterComplete(true);
	            }
	          }
	        };
	      }

	      /**
	       * @ngdoc service
	       * @name $animate
	       * @kind object
	       *
	       * @description
	       * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
	       * When any of these operations are run, the $animate service
	       * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
	       * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
	       *
	       * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
	       * will work out of the box without any extra configuration.
	       *
	       * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
	       *
	       * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
	       * ## Callback Promises
	       * With AngularJS 1.3, each of the animation methods, on the `$animate` service, return a promise when called. The
	       * promise itself is then resolved once the animation has completed itself, has been cancelled or has been
	       * skipped due to animations being disabled. (Note that even if the animation is cancelled it will still
	       * call the resolve function of the animation.)
	       *
	       * ```js
	       * $animate.enter(element, container).then(function() {
	       *   //...this is called once the animation is complete...
	       * });
	       * ```
	       *
	       * Also note that, due to the nature of the callback promise, if any Angular-specific code (like changing the scope,
	       * location of the page, etc...) is executed within the callback promise then be sure to wrap the code using
	       * `$scope.$apply(...)`;
	       *
	       * ```js
	       * $animate.leave(element).then(function() {
	       *   $scope.$apply(function() {
	       *     $location.path('/new-page');
	       *   });
	       * });
	       * ```
	       *
	       * An animation can also be cancelled by calling the `$animate.cancel(promise)` method with the provided
	       * promise that was returned when the animation was started.
	       *
	       * ```js
	       * var promise = $animate.addClass(element, 'super-long-animation');
	       * promise.then(function() {
	       *   //this will still be called even if cancelled
	       * });
	       *
	       * element.on('click', function() {
	       *   //tooo lazy to wait for the animation to end
	       *   $animate.cancel(promise);
	       * });
	       * ```
	       *
	       * (Keep in mind that the promise cancellation is unique to `$animate` since promises in
	       * general cannot be cancelled.)
	       *
	       */
	      return {
	        /**
	         * @ngdoc method
	         * @name $animate#animate
	         * @kind function
	         *
	         * @description
	         * Performs an inline animation on the element which applies the provided `to` and `from` CSS styles to the element.
	         * If any detected CSS transition, keyframe or JavaScript matches the provided `className` value then the animation
	         * will take on the provided styles. For example, if a transition animation is set for the given className then the
	         * provided `from` and `to` styles will be applied alongside the given transition. If a JavaScript animation is
	         * detected then the provided styles will be given in as function paramters.
	         *
	         * ```js
	         * ngModule.animation('.my-inline-animation', function() {
	         *   return {
	         *     animate : function(element, className, from, to, done) {
	         *       //styles
	         *     }
	         *   }
	         * });
	         * ```
	         *
	         * Below is a breakdown of each step that occurs during the `animate` animation:
	         *
	         * | Animation Step                                                                                                        | What the element class attribute looks like                  |
	         * |-----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|
	         * | 1. `$animate.animate(...)` is called                                                                                  | `class="my-animation"`                                       |
	         * | 2. `$animate` waits for the next digest to start the animation                                                        | `class="my-animation ng-animate"`                            |
	         * | 3. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class="my-animation ng-animate"`                            |
	         * | 4. the `className` class value is added to the element                                                                | `class="my-animation ng-animate className"`                  |
	         * | 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class="my-animation ng-animate className"`                  |
	         * | 6. `$animate` blocks all CSS transitions on the element to ensure the `.className` class styling is applied right away| `class="my-animation ng-animate className"`                  |
	         * | 7. `$animate` applies the provided collection of `from` CSS styles to the element                                     | `class="my-animation ng-animate className"`                  |
	         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class="my-animation ng-animate className"`                  |
	         * | 9. `$animate` removes the CSS transition block placed on the element                                                  | `class="my-animation ng-animate className"`                  |
	         * | 10. the `className-active` class is added (this triggers the CSS transition/animation)                                | `class="my-animation ng-animate className className-active"` |
	         * | 11. `$animate` applies the collection of `to` CSS styles to the element which are then handled by the transition      | `class="my-animation ng-animate className className-active"` |
	         * | 12. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate className className-active"` |
	         * | 13. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                       |
	         * | 14. The returned promise is resolved.                                                                                 | `class="my-animation"`                                       |
	         *
	         * @param {DOMElement} element the element that will be the focus of the enter animation
	         * @param {object} from a collection of CSS styles that will be applied to the element at the start of the animation
	         * @param {object} to a collection of CSS styles that the element will animate towards
	         * @param {string=} className an optional CSS class that will be added to the element for the duration of the animation (the default class is `ng-inline-animate`)
	         * @param {object=} options an optional collection of options that will be picked up by the CSS transition/animation
	         * @return {Promise} the animation callback promise
	        */
	        animate: function(element, from, to, className, options) {
	          className = className || 'ng-inline-animate';
	          options = parseAnimateOptions(options) || {};
	          options.from = to ? from : null;
	          options.to   = to ? to : from;

	          return runAnimationPostDigest(function(done) {
	            return performAnimation('animate', className, stripCommentsFromElement(element), null, null, noop, options, done);
	          });
	        },

	        /**
	         * @ngdoc method
	         * @name $animate#enter
	         * @kind function
	         *
	         * @description
	         * Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once
	         * the animation is started, the following CSS classes will be present on the element for the duration of the animation:
	         *
	         * Below is a breakdown of each step that occurs during enter animation:
	         *
	         * | Animation Step                                                                                                        | What the element class attribute looks like                |
	         * |-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|
	         * | 1. `$animate.enter(...)` is called                                                                                    | `class="my-animation"`                                     |
	         * | 2. element is inserted into the `parentElement` element or beside the `afterElement` element                          | `class="my-animation"`                                     |
	         * | 3. `$animate` waits for the next digest to start the animation                                                        | `class="my-animation ng-animate"`                          |
	         * | 4. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class="my-animation ng-animate"`                          |
	         * | 5. the `.ng-enter` class is added to the element                                                                      | `class="my-animation ng-animate ng-enter"`                 |
	         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class="my-animation ng-animate ng-enter"`                 |
	         * | 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-enter` class styling is applied right away | `class="my-animation ng-animate ng-enter"`                 |
	         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class="my-animation ng-animate ng-enter"`                 |
	         * | 9. `$animate` removes the CSS transition block placed on the element                                                  | `class="my-animation ng-animate ng-enter"`                 |
	         * | 10. the `.ng-enter-active` class is added (this triggers the CSS transition/animation)                                | `class="my-animation ng-animate ng-enter ng-enter-active"` |
	         * | 11. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate ng-enter ng-enter-active"` |
	         * | 12. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                     |
	         * | 13. The returned promise is resolved.                                                                                 | `class="my-animation"`                                     |
	         *
	         * @param {DOMElement} element the element that will be the focus of the enter animation
	         * @param {DOMElement} parentElement the parent element of the element that will be the focus of the enter animation
	         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation
	         * @param {object=} options an optional collection of options that will be picked up by the CSS transition/animation
	         * @return {Promise} the animation callback promise
	        */
	        enter: function(element, parentElement, afterElement, options) {
	          options = parseAnimateOptions(options);
	          element = angular.element(element);
	          parentElement = prepareElement(parentElement);
	          afterElement = prepareElement(afterElement);

	          classBasedAnimationsBlocked(element, true);
	          $delegate.enter(element, parentElement, afterElement);
	          return runAnimationPostDigest(function(done) {
	            return performAnimation('enter', 'ng-enter', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);
	          });
	        },

	        /**
	         * @ngdoc method
	         * @name $animate#leave
	         * @kind function
	         *
	         * @description
	         * Runs the leave animation operation and, upon completion, removes the element from the DOM. Once
	         * the animation is started, the following CSS classes will be added for the duration of the animation:
	         *
	         * Below is a breakdown of each step that occurs during leave animation:
	         *
	         * | Animation Step                                                                                                        | What the element class attribute looks like                |
	         * |-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|
	         * | 1. `$animate.leave(...)` is called                                                                                    | `class="my-animation"`                                     |
	         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class="my-animation ng-animate"`                          |
	         * | 3. `$animate` waits for the next digest to start the animation                                                        | `class="my-animation ng-animate"`                          |
	         * | 4. the `.ng-leave` class is added to the element                                                                      | `class="my-animation ng-animate ng-leave"`                 |
	         * | 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class="my-animation ng-animate ng-leave"`                 |
	         * | 6. `$animate` blocks all CSS transitions on the element to ensure the `.ng-leave` class styling is applied right away | `class="my-animation ng-animate ng-leave"`                 |
	         * | 7. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class="my-animation ng-animate ng-leave"`                 |
	         * | 8. `$animate` removes the CSS transition block placed on the element                                                  | `class="my-animation ng-animate ng-leave"`                 |
	         * | 9. the `.ng-leave-active` class is added (this triggers the CSS transition/animation)                                 | `class="my-animation ng-animate ng-leave ng-leave-active"` |
	         * | 10. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate ng-leave ng-leave-active"` |
	         * | 11. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                     |
	         * | 12. The element is removed from the DOM                                                                               | ...                                                        |
	         * | 13. The returned promise is resolved.                                                                                 | ...                                                        |
	         *
	         * @param {DOMElement} element the element that will be the focus of the leave animation
	         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
	         * @return {Promise} the animation callback promise
	        */
	        leave: function(element, options) {
	          options = parseAnimateOptions(options);
	          element = angular.element(element);

	          cancelChildAnimations(element);
	          classBasedAnimationsBlocked(element, true);
	          return runAnimationPostDigest(function(done) {
	            return performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function() {
	              $delegate.leave(element);
	            }, options, done);
	          });
	        },

	        /**
	         * @ngdoc method
	         * @name $animate#move
	         * @kind function
	         *
	         * @description
	         * Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or
	         * add the element directly after the afterElement element if present. Then the move animation will be run. Once
	         * the animation is started, the following CSS classes will be added for the duration of the animation:
	         *
	         * Below is a breakdown of each step that occurs during move animation:
	         *
	         * | Animation Step                                                                                                       | What the element class attribute looks like              |
	         * |----------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|
	         * | 1. `$animate.move(...)` is called                                                                                    | `class="my-animation"`                                   |
	         * | 2. element is moved into the parentElement element or beside the afterElement element                                | `class="my-animation"`                                   |
	         * | 3. `$animate` waits for the next digest to start the animation                                                       | `class="my-animation ng-animate"`                        |
	         * | 4. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class="my-animation ng-animate"`                        |
	         * | 5. the `.ng-move` class is added to the element                                                                      | `class="my-animation ng-animate ng-move"`                |
	         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class="my-animation ng-animate ng-move"`                |
	         * | 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-move` class styling is applied right away | `class="my-animation ng-animate ng-move"`                |
	         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class="my-animation ng-animate ng-move"`                |
	         * | 9. `$animate` removes the CSS transition block placed on the element                                                 | `class="my-animation ng-animate ng-move"`                |
	         * | 10. the `.ng-move-active` class is added (this triggers the CSS transition/animation)                                | `class="my-animation ng-animate ng-move ng-move-active"` |
	         * | 11. `$animate` waits for the animation to complete (via events and timeout)                                          | `class="my-animation ng-animate ng-move ng-move-active"` |
	         * | 12. The animation ends and all generated CSS classes are removed from the element                                    | `class="my-animation"`                                   |
	         * | 13. The returned promise is resolved.                                                                                | `class="my-animation"`                                   |
	         *
	         * @param {DOMElement} element the element that will be the focus of the move animation
	         * @param {DOMElement} parentElement the parentElement element of the element that will be the focus of the move animation
	         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation
	         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
	         * @return {Promise} the animation callback promise
	        */
	        move: function(element, parentElement, afterElement, options) {
	          options = parseAnimateOptions(options);
	          element = angular.element(element);
	          parentElement = prepareElement(parentElement);
	          afterElement = prepareElement(afterElement);

	          cancelChildAnimations(element);
	          classBasedAnimationsBlocked(element, true);
	          $delegate.move(element, parentElement, afterElement);
	          return runAnimationPostDigest(function(done) {
	            return performAnimation('move', 'ng-move', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);
	          });
	        },

	        /**
	         * @ngdoc method
	         * @name $animate#addClass
	         *
	         * @description
	         * Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.
	         * Unlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide
	         * the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions
	         * or keyframes are defined on the -add-active or base CSS class).
	         *
	         * Below is a breakdown of each step that occurs during addClass animation:
	         *
	         * | Animation Step                                                                                         | What the element class attribute looks like                        |
	         * |--------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|
	         * | 1. `$animate.addClass(element, 'super')` is called                                                     | `class="my-animation"`                                             |
	         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                           | `class="my-animation ng-animate"`                                  |
	         * | 3. the `.super-add` class is added to the element                                                      | `class="my-animation ng-animate super-add"`                        |
	         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                              | `class="my-animation ng-animate super-add"`                        |
	         * | 5. the `.super` and `.super-add-active` classes are added (this triggers the CSS transition/animation) | `class="my-animation ng-animate super super-add super-add-active"` |
	         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay          | `class="my-animation ng-animate super super-add super-add-active"` |
	         * | 7. `$animate` waits for the animation to complete (via events and timeout)                             | `class="my-animation ng-animate super super-add super-add-active"` |
	         * | 8. The animation ends and all generated CSS classes are removed from the element                       | `class="my-animation super"`                                       |
	         * | 9. The super class is kept on the element                                                              | `class="my-animation super"`                                       |
	         * | 10. The returned promise is resolved.                                                                  | `class="my-animation super"`                                       |
	         *
	         * @param {DOMElement} element the element that will be animated
	         * @param {string} className the CSS class that will be added to the element and then animated
	         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
	         * @return {Promise} the animation callback promise
	        */
	        addClass: function(element, className, options) {
	          return this.setClass(element, className, [], options);
	        },

	        /**
	         * @ngdoc method
	         * @name $animate#removeClass
	         *
	         * @description
	         * Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value
	         * from the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in
	         * order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if
	         * no CSS transitions or keyframes are defined on the -remove or base CSS classes).
	         *
	         * Below is a breakdown of each step that occurs during removeClass animation:
	         *
	         * | Animation Step                                                                                                       | What the element class attribute looks like                        |
	         * |----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|
	         * | 1. `$animate.removeClass(element, 'super')` is called                                                                | `class="my-animation super"`                                       |
	         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class="my-animation super ng-animate"`                            |
	         * | 3. the `.super-remove` class is added to the element                                                                 | `class="my-animation super ng-animate super-remove"`               |
	         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class="my-animation super ng-animate super-remove"`               |
	         * | 5. the `.super-remove-active` classes are added and `.super` is removed (this triggers the CSS transition/animation) | `class="my-animation ng-animate super-remove super-remove-active"` |
	         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class="my-animation ng-animate super-remove super-remove-active"` |
	         * | 7. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate super-remove super-remove-active"` |
	         * | 8. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                             |
	         * | 9. The returned promise is resolved.                                                                                 | `class="my-animation"`                                             |
	         *
	         *
	         * @param {DOMElement} element the element that will be animated
	         * @param {string} className the CSS class that will be animated and then removed from the element
	         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
	         * @return {Promise} the animation callback promise
	        */
	        removeClass: function(element, className, options) {
	          return this.setClass(element, [], className, options);
	        },

	        /**
	         *
	         * @ngdoc method
	         * @name $animate#setClass
	         *
	         * @description Adds and/or removes the given CSS classes to and from the element.
	         * Once complete, the `done()` callback will be fired (if provided).
	         *
	         * | Animation Step                                                                                                                               | What the element class attribute looks like                                            |
	         * |----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|
	         * | 1. `$animate.setClass(element, 'on', 'off')` is called                                                                                       | `class="my-animation off"`                                                             |
	         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                                                 | `class="my-animation ng-animate off"`                                                  |
	         * | 3. the `.on-add` and `.off-remove` classes are added to the element                                                                          | `class="my-animation ng-animate on-add off-remove off"`                                |
	         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                                                                    | `class="my-animation ng-animate on-add off-remove off"`                                |
	         * | 5. the `.on`, `.on-add-active` and `.off-remove-active` classes are added and `.off` is removed (this triggers the CSS transition/animation) | `class="my-animation ng-animate on on-add on-add-active off-remove off-remove-active"` |
	         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                                                | `class="my-animation ng-animate on on-add on-add-active off-remove off-remove-active"` |
	         * | 7. `$animate` waits for the animation to complete (via events and timeout)                                                                   | `class="my-animation ng-animate on on-add on-add-active off-remove off-remove-active"` |
	         * | 8. The animation ends and all generated CSS classes are removed from the element                                                             | `class="my-animation on"`                                                              |
	         * | 9. The returned promise is resolved.                                                                                                         | `class="my-animation on"`                                                              |
	         *
	         * @param {DOMElement} element the element which will have its CSS classes changed
	         *   removed from it
	         * @param {string} add the CSS classes which will be added to the element
	         * @param {string} remove the CSS class which will be removed from the element
	         *   CSS classes have been set on the element
	         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
	         * @return {Promise} the animation callback promise
	         */
	        setClass: function(element, add, remove, options) {
	          options = parseAnimateOptions(options);

	          var STORAGE_KEY = '$$animateClasses';
	          element = angular.element(element);
	          element = stripCommentsFromElement(element);

	          if (classBasedAnimationsBlocked(element)) {
	            return $delegate.$$setClassImmediately(element, add, remove, options);
	          }

	          // we're using a combined array for both the add and remove
	          // operations since the ORDER OF addClass and removeClass matters
	          var classes, cache = element.data(STORAGE_KEY);
	          var hasCache = !!cache;
	          if (!cache) {
	            cache = {};
	            cache.classes = {};
	          }
	          classes = cache.classes;

	          add = isArray(add) ? add : add.split(' ');
	          forEach(add, function(c) {
	            if (c && c.length) {
	              classes[c] = true;
	            }
	          });

	          remove = isArray(remove) ? remove : remove.split(' ');
	          forEach(remove, function(c) {
	            if (c && c.length) {
	              classes[c] = false;
	            }
	          });

	          if (hasCache) {
	            if (options && cache.options) {
	              cache.options = angular.extend(cache.options || {}, options);
	            }

	            //the digest cycle will combine all the animations into one function
	            return cache.promise;
	          } else {
	            element.data(STORAGE_KEY, cache = {
	              classes: classes,
	              options: options
	            });
	          }

	          return cache.promise = runAnimationPostDigest(function(done) {
	            var cache, parentNode, parentElement, elementNode = extractElementNode(element);
	            if (elementNode) {
	              cache = element.data(STORAGE_KEY);
	              element.removeData(STORAGE_KEY);

	              parentElement = element.parent();
	              parentNode = elementNode.parentNode;
	            }

	            // TODO(matsko): move this code into the animationsDisabled() function once #8092 is fixed
	            if (!parentNode || parentNode['$$NG_REMOVED'] || elementNode['$$NG_REMOVED']) {
	              done();
	              return;
	            }

	            var state = element.data(NG_ANIMATE_STATE) || {};
	            var classes = resolveElementClasses(element, cache, state.active);
	            return !classes
	              ? done()
	              : performAnimation('setClass', classes, element, parentElement, null, function() {
	                  if (classes[0]) $delegate.$$addClassImmediately(element, classes[0]);
	                  if (classes[1]) $delegate.$$removeClassImmediately(element, classes[1]);
	                }, cache.options, done);
	          });
	        },

	        /**
	         * @ngdoc method
	         * @name $animate#cancel
	         * @kind function
	         *
	         * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	         *
	         * @description
	         * Cancels the provided animation.
	        */
	        cancel: function(promise) {
	          promise.$$cancelFn();
	        },

	        /**
	         * @ngdoc method
	         * @name $animate#enabled
	         * @kind function
	         *
	         * @param {boolean=} value If provided then set the animation on or off.
	         * @param {DOMElement=} element If provided then the element will be used to represent the enable/disable operation
	         * @return {boolean} Current animation state.
	         *
	         * @description
	         * Globally enables/disables animations.
	         *
	        */
	        enabled: function(value, element) {
	          switch (arguments.length) {
	            case 2:
	              if (value) {
	                cleanup(element);
	              } else {
	                var data = element.data(NG_ANIMATE_STATE) || {};
	                data.disabled = true;
	                element.data(NG_ANIMATE_STATE, data);
	              }
	            break;

	            case 1:
	              rootAnimateState.disabled = !value;
	            break;

	            default:
	              value = !rootAnimateState.disabled;
	            break;
	          }
	          return !!value;
	         }
	      };

	      /*
	        all animations call this shared animation triggering function internally.
	        The animationEvent variable refers to the JavaScript animation event that will be triggered
	        and the className value is the name of the animation that will be applied within the
	        CSS code. Element, `parentElement` and `afterElement` are provided DOM elements for the animation
	        and the onComplete callback will be fired once the animation is fully complete.
	      */
	      function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, options, doneCallback) {
	        var noopCancel = noop;
	        var runner = animationRunner(element, animationEvent, className, options);
	        if (!runner) {
	          fireDOMOperation();
	          fireBeforeCallbackAsync();
	          fireAfterCallbackAsync();
	          closeAnimation();
	          return noopCancel;
	        }

	        animationEvent = runner.event;
	        className = runner.className;
	        var elementEvents = angular.element._data(runner.node);
	        elementEvents = elementEvents && elementEvents.events;

	        if (!parentElement) {
	          parentElement = afterElement ? afterElement.parent() : element.parent();
	        }

	        //skip the animation if animations are disabled, a parent is already being animated,
	        //the element is not currently attached to the document body or then completely close
	        //the animation if any matching animations are not found at all.
	        //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
	        if (animationsDisabled(element, parentElement)) {
	          fireDOMOperation();
	          fireBeforeCallbackAsync();
	          fireAfterCallbackAsync();
	          closeAnimation();
	          return noopCancel;
	        }

	        var ngAnimateState  = element.data(NG_ANIMATE_STATE) || {};
	        var runningAnimations     = ngAnimateState.active || {};
	        var totalActiveAnimations = ngAnimateState.totalActive || 0;
	        var lastAnimation         = ngAnimateState.last;
	        var skipAnimation = false;

	        if (totalActiveAnimations > 0) {
	          var animationsToCancel = [];
	          if (!runner.isClassBased) {
	            if (animationEvent == 'leave' && runningAnimations['ng-leave']) {
	              skipAnimation = true;
	            } else {
	              //cancel all animations when a structural animation takes place
	              for (var klass in runningAnimations) {
	                animationsToCancel.push(runningAnimations[klass]);
	              }
	              ngAnimateState = {};
	              cleanup(element, true);
	            }
	          } else if (lastAnimation.event == 'setClass') {
	            animationsToCancel.push(lastAnimation);
	            cleanup(element, className);
	          } else if (runningAnimations[className]) {
	            var current = runningAnimations[className];
	            if (current.event == animationEvent) {
	              skipAnimation = true;
	            } else {
	              animationsToCancel.push(current);
	              cleanup(element, className);
	            }
	          }

	          if (animationsToCancel.length > 0) {
	            forEach(animationsToCancel, function(operation) {
	              operation.cancel();
	            });
	          }
	        }

	        if (runner.isClassBased
	            && !runner.isSetClassOperation
	            && animationEvent != 'animate'
	            && !skipAnimation) {
	          skipAnimation = (animationEvent == 'addClass') == element.hasClass(className); //opposite of XOR
	        }

	        if (skipAnimation) {
	          fireDOMOperation();
	          fireBeforeCallbackAsync();
	          fireAfterCallbackAsync();
	          fireDoneCallbackAsync();
	          return noopCancel;
	        }

	        runningAnimations     = ngAnimateState.active || {};
	        totalActiveAnimations = ngAnimateState.totalActive || 0;

	        if (animationEvent == 'leave') {
	          //there's no need to ever remove the listener since the element
	          //will be removed (destroyed) after the leave animation ends or
	          //is cancelled midway
	          element.one('$destroy', function(e) {
	            var element = angular.element(this);
	            var state = element.data(NG_ANIMATE_STATE);
	            if (state) {
	              var activeLeaveAnimation = state.active['ng-leave'];
	              if (activeLeaveAnimation) {
	                activeLeaveAnimation.cancel();
	                cleanup(element, 'ng-leave');
	              }
	            }
	          });
	        }

	        //the ng-animate class does nothing, but it's here to allow for
	        //parent animations to find and cancel child animations when needed
	        $$jqLite.addClass(element, NG_ANIMATE_CLASS_NAME);
	        if (options && options.tempClasses) {
	          forEach(options.tempClasses, function(className) {
	            $$jqLite.addClass(element, className);
	          });
	        }

	        var localAnimationCount = globalAnimationCounter++;
	        totalActiveAnimations++;
	        runningAnimations[className] = runner;

	        element.data(NG_ANIMATE_STATE, {
	          last: runner,
	          active: runningAnimations,
	          index: localAnimationCount,
	          totalActive: totalActiveAnimations
	        });

	        //first we run the before animations and when all of those are complete
	        //then we perform the DOM operation and run the next set of animations
	        fireBeforeCallbackAsync();
	        runner.before(function(cancelled) {
	          var data = element.data(NG_ANIMATE_STATE);
	          cancelled = cancelled ||
	                        !data || !data.active[className] ||
	                        (runner.isClassBased && data.active[className].event != animationEvent);

	          fireDOMOperation();
	          if (cancelled === true) {
	            closeAnimation();
	          } else {
	            fireAfterCallbackAsync();
	            runner.after(closeAnimation);
	          }
	        });

	        return runner.cancel;

	        function fireDOMCallback(animationPhase) {
	          var eventName = '$animate:' + animationPhase;
	          if (elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
	            $$asyncCallback(function() {
	              element.triggerHandler(eventName, {
	                event: animationEvent,
	                className: className
	              });
	            });
	          }
	        }

	        function fireBeforeCallbackAsync() {
	          fireDOMCallback('before');
	        }

	        function fireAfterCallbackAsync() {
	          fireDOMCallback('after');
	        }

	        function fireDoneCallbackAsync() {
	          fireDOMCallback('close');
	          doneCallback();
	        }

	        //it is less complicated to use a flag than managing and canceling
	        //timeouts containing multiple callbacks.
	        function fireDOMOperation() {
	          if (!fireDOMOperation.hasBeenRun) {
	            fireDOMOperation.hasBeenRun = true;
	            domOperation();
	          }
	        }

	        function closeAnimation() {
	          if (!closeAnimation.hasBeenRun) {
	            if (runner) { //the runner doesn't exist if it fails to instantiate
	              runner.applyStyles();
	            }

	            closeAnimation.hasBeenRun = true;
	            if (options && options.tempClasses) {
	              forEach(options.tempClasses, function(className) {
	                $$jqLite.removeClass(element, className);
	              });
	            }

	            var data = element.data(NG_ANIMATE_STATE);
	            if (data) {

	              /* only structural animations wait for reflow before removing an
	                 animation, but class-based animations don't. An example of this
	                 failing would be when a parent HTML tag has a ng-class attribute
	                 causing ALL directives below to skip animations during the digest */
	              if (runner && runner.isClassBased) {
	                cleanup(element, className);
	              } else {
	                $$asyncCallback(function() {
	                  var data = element.data(NG_ANIMATE_STATE) || {};
	                  if (localAnimationCount == data.index) {
	                    cleanup(element, className, animationEvent);
	                  }
	                });
	                element.data(NG_ANIMATE_STATE, data);
	              }
	            }
	            fireDoneCallbackAsync();
	          }
	        }
	      }

	      function cancelChildAnimations(element) {
	        var node = extractElementNode(element);
	        if (node) {
	          var nodes = angular.isFunction(node.getElementsByClassName) ?
	            node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) :
	            node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
	          forEach(nodes, function(element) {
	            element = angular.element(element);
	            var data = element.data(NG_ANIMATE_STATE);
	            if (data && data.active) {
	              forEach(data.active, function(runner) {
	                runner.cancel();
	              });
	            }
	          });
	        }
	      }

	      function cleanup(element, className) {
	        if (isMatchingElement(element, $rootElement)) {
	          if (!rootAnimateState.disabled) {
	            rootAnimateState.running = false;
	            rootAnimateState.structural = false;
	          }
	        } else if (className) {
	          var data = element.data(NG_ANIMATE_STATE) || {};

	          var removeAnimations = className === true;
	          if (!removeAnimations && data.active && data.active[className]) {
	            data.totalActive--;
	            delete data.active[className];
	          }

	          if (removeAnimations || !data.totalActive) {
	            $$jqLite.removeClass(element, NG_ANIMATE_CLASS_NAME);
	            element.removeData(NG_ANIMATE_STATE);
	          }
	        }
	      }

	      function animationsDisabled(element, parentElement) {
	        if (rootAnimateState.disabled) {
	          return true;
	        }

	        if (isMatchingElement(element, $rootElement)) {
	          return rootAnimateState.running;
	        }

	        var allowChildAnimations, parentRunningAnimation, hasParent;
	        do {
	          //the element did not reach the root element which means that it
	          //is not apart of the DOM. Therefore there is no reason to do
	          //any animations on it
	          if (parentElement.length === 0) break;

	          var isRoot = isMatchingElement(parentElement, $rootElement);
	          var state = isRoot ? rootAnimateState : (parentElement.data(NG_ANIMATE_STATE) || {});
	          if (state.disabled) {
	            return true;
	          }

	          //no matter what, for an animation to work it must reach the root element
	          //this implies that the element is attached to the DOM when the animation is run
	          if (isRoot) {
	            hasParent = true;
	          }

	          //once a flag is found that is strictly false then everything before
	          //it will be discarded and all child animations will be restricted
	          if (allowChildAnimations !== false) {
	            var animateChildrenFlag = parentElement.data(NG_ANIMATE_CHILDREN);
	            if (angular.isDefined(animateChildrenFlag)) {
	              allowChildAnimations = animateChildrenFlag;
	            }
	          }

	          parentRunningAnimation = parentRunningAnimation ||
	                                   state.running ||
	                                   (state.last && !state.last.isClassBased);
	        }
	        while (parentElement = parentElement.parent());

	        return !hasParent || (!allowChildAnimations && parentRunningAnimation);
	      }
	    }]);

	    $animateProvider.register('', ['$window', '$sniffer', '$timeout', '$$animateReflow',
	                           function($window,   $sniffer,   $timeout,   $$animateReflow) {
	      // Detect proper transitionend/animationend event names.
	      var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

	      // If unprefixed events are not supported but webkit-prefixed are, use the latter.
	      // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
	      // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
	      // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
	      // Register both events in case `window.onanimationend` is not supported because of that,
	      // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
	      // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
	      // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
	      if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
	        CSS_PREFIX = '-webkit-';
	        TRANSITION_PROP = 'WebkitTransition';
	        TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
	      } else {
	        TRANSITION_PROP = 'transition';
	        TRANSITIONEND_EVENT = 'transitionend';
	      }

	      if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
	        CSS_PREFIX = '-webkit-';
	        ANIMATION_PROP = 'WebkitAnimation';
	        ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
	      } else {
	        ANIMATION_PROP = 'animation';
	        ANIMATIONEND_EVENT = 'animationend';
	      }

	      var DURATION_KEY = 'Duration';
	      var PROPERTY_KEY = 'Property';
	      var DELAY_KEY = 'Delay';
	      var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
	      var ANIMATION_PLAYSTATE_KEY = 'PlayState';
	      var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
	      var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
	      var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
	      var CLOSING_TIME_BUFFER = 1.5;
	      var ONE_SECOND = 1000;

	      var lookupCache = {};
	      var parentCounter = 0;
	      var animationReflowQueue = [];
	      var cancelAnimationReflow;
	      function clearCacheAfterReflow() {
	        if (!cancelAnimationReflow) {
	          cancelAnimationReflow = $$animateReflow(function() {
	            animationReflowQueue = [];
	            cancelAnimationReflow = null;
	            lookupCache = {};
	          });
	        }
	      }

	      function afterReflow(element, callback) {
	        if (cancelAnimationReflow) {
	          cancelAnimationReflow();
	        }
	        animationReflowQueue.push(callback);
	        cancelAnimationReflow = $$animateReflow(function() {
	          forEach(animationReflowQueue, function(fn) {
	            fn();
	          });

	          animationReflowQueue = [];
	          cancelAnimationReflow = null;
	          lookupCache = {};
	        });
	      }

	      var closingTimer = null;
	      var closingTimestamp = 0;
	      var animationElementQueue = [];
	      function animationCloseHandler(element, totalTime) {
	        var node = extractElementNode(element);
	        element = angular.element(node);

	        //this item will be garbage collected by the closing
	        //animation timeout
	        animationElementQueue.push(element);

	        //but it may not need to cancel out the existing timeout
	        //if the timestamp is less than the previous one
	        var futureTimestamp = Date.now() + totalTime;
	        if (futureTimestamp <= closingTimestamp) {
	          return;
	        }

	        $timeout.cancel(closingTimer);

	        closingTimestamp = futureTimestamp;
	        closingTimer = $timeout(function() {
	          closeAllAnimations(animationElementQueue);
	          animationElementQueue = [];
	        }, totalTime, false);
	      }

	      function closeAllAnimations(elements) {
	        forEach(elements, function(element) {
	          var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
	          if (elementData) {
	            forEach(elementData.closeAnimationFns, function(fn) {
	              fn();
	            });
	          }
	        });
	      }

	      function getElementAnimationDetails(element, cacheKey) {
	        var data = cacheKey ? lookupCache[cacheKey] : null;
	        if (!data) {
	          var transitionDuration = 0;
	          var transitionDelay = 0;
	          var animationDuration = 0;
	          var animationDelay = 0;

	          //we want all the styles defined before and after
	          forEach(element, function(element) {
	            if (element.nodeType == ELEMENT_NODE) {
	              var elementStyles = $window.getComputedStyle(element) || {};

	              var transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];
	              transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);

	              var transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];
	              transitionDelay  = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);

	              var animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];
	              animationDelay   = Math.max(parseMaxTime(elementStyles[ANIMATION_PROP + DELAY_KEY]), animationDelay);

	              var aDuration  = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);

	              if (aDuration > 0) {
	                aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
	              }
	              animationDuration = Math.max(aDuration, animationDuration);
	            }
	          });
	          data = {
	            total: 0,
	            transitionDelay: transitionDelay,
	            transitionDuration: transitionDuration,
	            animationDelay: animationDelay,
	            animationDuration: animationDuration
	          };
	          if (cacheKey) {
	            lookupCache[cacheKey] = data;
	          }
	        }
	        return data;
	      }

	      function parseMaxTime(str) {
	        var maxValue = 0;
	        var values = isString(str) ?
	          str.split(/\s*,\s*/) :
	          [];
	        forEach(values, function(value) {
	          maxValue = Math.max(parseFloat(value) || 0, maxValue);
	        });
	        return maxValue;
	      }

	      function getCacheKey(element) {
	        var parentElement = element.parent();
	        var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
	        if (!parentID) {
	          parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
	          parentID = parentCounter;
	        }
	        return parentID + '-' + extractElementNode(element).getAttribute('class');
	      }

	      function animateSetup(animationEvent, element, className, styles) {
	        var structural = ['ng-enter','ng-leave','ng-move'].indexOf(className) >= 0;

	        var cacheKey = getCacheKey(element);
	        var eventCacheKey = cacheKey + ' ' + className;
	        var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;

	        var stagger = {};
	        if (itemIndex > 0) {
	          var staggerClassName = className + '-stagger';
	          var staggerCacheKey = cacheKey + ' ' + staggerClassName;
	          var applyClasses = !lookupCache[staggerCacheKey];

	          applyClasses && $$jqLite.addClass(element, staggerClassName);

	          stagger = getElementAnimationDetails(element, staggerCacheKey);

	          applyClasses && $$jqLite.removeClass(element, staggerClassName);
	        }

	        $$jqLite.addClass(element, className);

	        var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};
	        var timings = getElementAnimationDetails(element, eventCacheKey);
	        var transitionDuration = timings.transitionDuration;
	        var animationDuration = timings.animationDuration;

	        if (structural && transitionDuration === 0 && animationDuration === 0) {
	          $$jqLite.removeClass(element, className);
	          return false;
	        }

	        var blockTransition = styles || (structural && transitionDuration > 0);
	        var blockAnimation = animationDuration > 0 &&
	                             stagger.animationDelay > 0 &&
	                             stagger.animationDuration === 0;

	        var closeAnimationFns = formerData.closeAnimationFns || [];
	        element.data(NG_ANIMATE_CSS_DATA_KEY, {
	          stagger: stagger,
	          cacheKey: eventCacheKey,
	          running: formerData.running || 0,
	          itemIndex: itemIndex,
	          blockTransition: blockTransition,
	          closeAnimationFns: closeAnimationFns
	        });

	        var node = extractElementNode(element);

	        if (blockTransition) {
	          blockTransitions(node, true);
	          if (styles) {
	            element.css(styles);
	          }
	        }

	        if (blockAnimation) {
	          blockAnimations(node, true);
	        }

	        return true;
	      }

	      function animateRun(animationEvent, element, className, activeAnimationComplete, styles) {
	        var node = extractElementNode(element);
	        var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
	        if (node.getAttribute('class').indexOf(className) == -1 || !elementData) {
	          activeAnimationComplete();
	          return;
	        }

	        var activeClassName = '';
	        var pendingClassName = '';
	        forEach(className.split(' '), function(klass, i) {
	          var prefix = (i > 0 ? ' ' : '') + klass;
	          activeClassName += prefix + '-active';
	          pendingClassName += prefix + '-pending';
	        });

	        var style = '';
	        var appliedStyles = [];
	        var itemIndex = elementData.itemIndex;
	        var stagger = elementData.stagger;
	        var staggerTime = 0;
	        if (itemIndex > 0) {
	          var transitionStaggerDelay = 0;
	          if (stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
	            transitionStaggerDelay = stagger.transitionDelay * itemIndex;
	          }

	          var animationStaggerDelay = 0;
	          if (stagger.animationDelay > 0 && stagger.animationDuration === 0) {
	            animationStaggerDelay = stagger.animationDelay * itemIndex;
	            appliedStyles.push(CSS_PREFIX + 'animation-play-state');
	          }

	          staggerTime = Math.round(Math.max(transitionStaggerDelay, animationStaggerDelay) * 100) / 100;
	        }

	        if (!staggerTime) {
	          $$jqLite.addClass(element, activeClassName);
	          if (elementData.blockTransition) {
	            blockTransitions(node, false);
	          }
	        }

	        var eventCacheKey = elementData.cacheKey + ' ' + activeClassName;
	        var timings = getElementAnimationDetails(element, eventCacheKey);
	        var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
	        if (maxDuration === 0) {
	          $$jqLite.removeClass(element, activeClassName);
	          animateClose(element, className);
	          activeAnimationComplete();
	          return;
	        }

	        if (!staggerTime && styles && Object.keys(styles).length > 0) {
	          if (!timings.transitionDuration) {
	            element.css('transition', timings.animationDuration + 's linear all');
	            appliedStyles.push('transition');
	          }
	          element.css(styles);
	        }

	        var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
	        var maxDelayTime = maxDelay * ONE_SECOND;

	        if (appliedStyles.length > 0) {
	          //the element being animated may sometimes contain comment nodes in
	          //the jqLite object, so we're safe to use a single variable to house
	          //the styles since there is always only one element being animated
	          var oldStyle = node.getAttribute('style') || '';
	          if (oldStyle.charAt(oldStyle.length - 1) !== ';') {
	            oldStyle += ';';
	          }
	          node.setAttribute('style', oldStyle + ' ' + style);
	        }

	        var startTime = Date.now();
	        var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;
	        var animationTime     = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
	        var totalTime         = (staggerTime + animationTime) * ONE_SECOND;

	        var staggerTimeout;
	        if (staggerTime > 0) {
	          $$jqLite.addClass(element, pendingClassName);
	          staggerTimeout = $timeout(function() {
	            staggerTimeout = null;

	            if (timings.transitionDuration > 0) {
	              blockTransitions(node, false);
	            }
	            if (timings.animationDuration > 0) {
	              blockAnimations(node, false);
	            }

	            $$jqLite.addClass(element, activeClassName);
	            $$jqLite.removeClass(element, pendingClassName);

	            if (styles) {
	              if (timings.transitionDuration === 0) {
	                element.css('transition', timings.animationDuration + 's linear all');
	              }
	              element.css(styles);
	              appliedStyles.push('transition');
	            }
	          }, staggerTime * ONE_SECOND, false);
	        }

	        element.on(css3AnimationEvents, onAnimationProgress);
	        elementData.closeAnimationFns.push(function() {
	          onEnd();
	          activeAnimationComplete();
	        });

	        elementData.running++;
	        animationCloseHandler(element, totalTime);
	        return onEnd;

	        // This will automatically be called by $animate so
	        // there is no need to attach this internally to the
	        // timeout done method.
	        function onEnd() {
	          element.off(css3AnimationEvents, onAnimationProgress);
	          $$jqLite.removeClass(element, activeClassName);
	          $$jqLite.removeClass(element, pendingClassName);
	          if (staggerTimeout) {
	            $timeout.cancel(staggerTimeout);
	          }
	          animateClose(element, className);
	          var node = extractElementNode(element);
	          for (var i in appliedStyles) {
	            node.style.removeProperty(appliedStyles[i]);
	          }
	        }

	        function onAnimationProgress(event) {
	          event.stopPropagation();
	          var ev = event.originalEvent || event;
	          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

	          /* Firefox (or possibly just Gecko) likes to not round values up
	           * when a ms measurement is used for the animation */
	          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

	          /* $manualTimeStamp is a mocked timeStamp value which is set
	           * within browserTrigger(). This is only here so that tests can
	           * mock animations properly. Real events fallback to event.timeStamp,
	           * or, if they don't, then a timeStamp is automatically created for them.
	           * We're checking to see if the timeStamp surpasses the expected delay,
	           * but we're using elapsedTime instead of the timeStamp on the 2nd
	           * pre-condition since animations sometimes close off early */
	          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
	            activeAnimationComplete();
	          }
	        }
	      }

	      function blockTransitions(node, bool) {
	        node.style[TRANSITION_PROP + PROPERTY_KEY] = bool ? 'none' : '';
	      }

	      function blockAnimations(node, bool) {
	        node.style[ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY] = bool ? 'paused' : '';
	      }

	      function animateBefore(animationEvent, element, className, styles) {
	        if (animateSetup(animationEvent, element, className, styles)) {
	          return function(cancelled) {
	            cancelled && animateClose(element, className);
	          };
	        }
	      }

	      function animateAfter(animationEvent, element, className, afterAnimationComplete, styles) {
	        if (element.data(NG_ANIMATE_CSS_DATA_KEY)) {
	          return animateRun(animationEvent, element, className, afterAnimationComplete, styles);
	        } else {
	          animateClose(element, className);
	          afterAnimationComplete();
	        }
	      }

	      function animate(animationEvent, element, className, animationComplete, options) {
	        //If the animateSetup function doesn't bother returning a
	        //cancellation function then it means that there is no animation
	        //to perform at all
	        var preReflowCancellation = animateBefore(animationEvent, element, className, options.from);
	        if (!preReflowCancellation) {
	          clearCacheAfterReflow();
	          animationComplete();
	          return;
	        }

	        //There are two cancellation functions: one is before the first
	        //reflow animation and the second is during the active state
	        //animation. The first function will take care of removing the
	        //data from the element which will not make the 2nd animation
	        //happen in the first place
	        var cancel = preReflowCancellation;
	        afterReflow(element, function() {
	          //once the reflow is complete then we point cancel to
	          //the new cancellation function which will remove all of the
	          //animation properties from the active animation
	          cancel = animateAfter(animationEvent, element, className, animationComplete, options.to);
	        });

	        return function(cancelled) {
	          (cancel || noop)(cancelled);
	        };
	      }

	      function animateClose(element, className) {
	        $$jqLite.removeClass(element, className);
	        var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
	        if (data) {
	          if (data.running) {
	            data.running--;
	          }
	          if (!data.running || data.running === 0) {
	            element.removeData(NG_ANIMATE_CSS_DATA_KEY);
	          }
	        }
	      }

	      return {
	        animate: function(element, className, from, to, animationCompleted, options) {
	          options = options || {};
	          options.from = from;
	          options.to = to;
	          return animate('animate', element, className, animationCompleted, options);
	        },

	        enter: function(element, animationCompleted, options) {
	          options = options || {};
	          return animate('enter', element, 'ng-enter', animationCompleted, options);
	        },

	        leave: function(element, animationCompleted, options) {
	          options = options || {};
	          return animate('leave', element, 'ng-leave', animationCompleted, options);
	        },

	        move: function(element, animationCompleted, options) {
	          options = options || {};
	          return animate('move', element, 'ng-move', animationCompleted, options);
	        },

	        beforeSetClass: function(element, add, remove, animationCompleted, options) {
	          options = options || {};
	          var className = suffixClasses(remove, '-remove') + ' ' +
	                          suffixClasses(add, '-add');
	          var cancellationMethod = animateBefore('setClass', element, className, options.from);
	          if (cancellationMethod) {
	            afterReflow(element, animationCompleted);
	            return cancellationMethod;
	          }
	          clearCacheAfterReflow();
	          animationCompleted();
	        },

	        beforeAddClass: function(element, className, animationCompleted, options) {
	          options = options || {};
	          var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), options.from);
	          if (cancellationMethod) {
	            afterReflow(element, animationCompleted);
	            return cancellationMethod;
	          }
	          clearCacheAfterReflow();
	          animationCompleted();
	        },

	        beforeRemoveClass: function(element, className, animationCompleted, options) {
	          options = options || {};
	          var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), options.from);
	          if (cancellationMethod) {
	            afterReflow(element, animationCompleted);
	            return cancellationMethod;
	          }
	          clearCacheAfterReflow();
	          animationCompleted();
	        },

	        setClass: function(element, add, remove, animationCompleted, options) {
	          options = options || {};
	          remove = suffixClasses(remove, '-remove');
	          add = suffixClasses(add, '-add');
	          var className = remove + ' ' + add;
	          return animateAfter('setClass', element, className, animationCompleted, options.to);
	        },

	        addClass: function(element, className, animationCompleted, options) {
	          options = options || {};
	          return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted, options.to);
	        },

	        removeClass: function(element, className, animationCompleted, options) {
	          options = options || {};
	          return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted, options.to);
	        }
	      };

	      function suffixClasses(classes, suffix) {
	        var className = '';
	        classes = isArray(classes) ? classes : classes.split(/\s+/);
	        forEach(classes, function(klass, i) {
	          if (klass && klass.length > 0) {
	            className += (i > 0 ? ' ' : '') + klass + suffix;
	          }
	        });
	        return className;
	      }
	    }]);
	  }]);


	})(window, window.angular);


/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.3.18
	 * (c) 2010-2014 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular, undefined) {'use strict';

	/**
	 * @ngdoc module
	 * @name ngAria
	 * @description
	 *
	 * The `ngAria` module provides support for common
	 * [<abbr title="Accessible Rich Internet Applications">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)
	 * attributes that convey state or semantic information about the application for users
	 * of assistive technologies, such as screen readers.
	 *
	 * <div doc-module-components="ngAria"></div>
	 *
	 * ## Usage
	 *
	 * For ngAria to do its magic, simply include the module as a dependency. The directives supported
	 * by ngAria are:
	 * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.
	 *
	 * Below is a more detailed breakdown of the attributes handled by ngAria:
	 *
	 * | Directive                                   | Supported Attributes                                                                   |
	 * |---------------------------------------------|----------------------------------------------------------------------------------------|
	 * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |
	 * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |
	 * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |
	 * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |
	 * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |
	 * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |
	 * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |
	 *
	 * Find out more information about each directive by reading the
	 * {@link guide/accessibility ngAria Developer Guide}.
	 *
	 * ##Example
	 * Using ngDisabled with ngAria:
	 * ```html
	 * <md-checkbox ng-disabled="disabled">
	 * ```
	 * Becomes:
	 * ```html
	 * <md-checkbox ng-disabled="disabled" aria-disabled="true">
	 * ```
	 *
	 * ##Disabling Attributes
	 * It's possible to disable individual attributes added by ngAria with the
	 * {@link ngAria.$ariaProvider#config config} method. For more details, see the
	 * {@link guide/accessibility Developer Guide}.
	 */
	 /* global -ngAriaModule */
	var ngAriaModule = angular.module('ngAria', ['ng']).
	                        provider('$aria', $AriaProvider);

	/**
	 * @ngdoc provider
	 * @name $ariaProvider
	 *
	 * @description
	 *
	 * Used for configuring the ARIA attributes injected and managed by ngAria.
	 *
	 * ```js
	 * angular.module('myApp', ['ngAria'], function config($ariaProvider) {
	 *   $ariaProvider.config({
	 *     ariaValue: true,
	 *     tabindex: false
	 *   });
	 * });
	 *```
	 *
	 * ## Dependencies
	 * Requires the {@link ngAria} module to be installed.
	 *
	 */
	function $AriaProvider() {
	  var config = {
	    ariaHidden: true,
	    ariaChecked: true,
	    ariaDisabled: true,
	    ariaRequired: true,
	    ariaInvalid: true,
	    ariaMultiline: true,
	    ariaValue: true,
	    tabindex: true,
	    bindKeypress: true
	  };

	  /**
	   * @ngdoc method
	   * @name $ariaProvider#config
	   *
	   * @param {object} config object to enable/disable specific ARIA attributes
	   *
	   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags
	   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags
	   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags
	   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags
	   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags
	   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags
	   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags
	   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags
	   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and
	   *    `&lt;li&gt;` elements with ng-click
	   *
	   * @description
	   * Enables/disables various ARIA attributes
	   */
	  this.config = function(newConfig) {
	    config = angular.extend(config, newConfig);
	  };

	  function watchExpr(attrName, ariaAttr, negate) {
	    return function(scope, elem, attr) {
	      var ariaCamelName = attr.$normalize(ariaAttr);
	      if (config[ariaCamelName] && !attr[ariaCamelName]) {
	        scope.$watch(attr[attrName], function(boolVal) {
	          if (negate) {
	            boolVal = !boolVal;
	          }
	          elem.attr(ariaAttr, boolVal);
	        });
	      }
	    };
	  }

	  /**
	   * @ngdoc service
	   * @name $aria
	   *
	   * @description
	   * @priority 200
	   *
	   * The $aria service contains helper methods for applying common
	   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.
	   *
	   * ngAria injects common accessibility attributes that tell assistive technologies when HTML
	   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,
	   * let's review a code snippet from ngAria itself:
	   *
	   *```js
	   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {
	   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');
	   * }])
	   *```
	   * Shown above, the ngAria module creates a directive with the same signature as the
	   * traditional `ng-disabled` directive. But this ngAria version is dedicated to
	   * solely managing accessibility attributes. The internal `$aria` service is used to watch the
	   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,
	   * `aria-disabled` is injected as an attribute with its value synchronized to the value in
	   * `ngDisabled`.
	   *
	   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do
	   * anything to enable this feature. The `aria-disabled` attribute is automatically managed
	   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.
	   *
	   * The full list of directives that interface with ngAria:
	   * * **ngModel**
	   * * **ngShow**
	   * * **ngHide**
	   * * **ngClick**
	   * * **ngDblclick**
	   * * **ngMessages**
	   * * **ngDisabled**
	   *
	   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each
	   * directive.
	   *
	   *
	   * ## Dependencies
	   * Requires the {@link ngAria} module to be installed.
	   */
	  this.$get = function() {
	    return {
	      config: function(key) {
	        return config[key];
	      },
	      $$watchExpr: watchExpr
	    };
	  };
	}


	ngAriaModule.directive('ngShow', ['$aria', function($aria) {
	  return $aria.$$watchExpr('ngShow', 'aria-hidden', true);
	}])
	.directive('ngHide', ['$aria', function($aria) {
	  return $aria.$$watchExpr('ngHide', 'aria-hidden', false);
	}])
	.directive('ngModel', ['$aria', function($aria) {

	  function shouldAttachAttr(attr, normalizedAttr, elem) {
	    return $aria.config(normalizedAttr) && !elem.attr(attr);
	  }

	  function shouldAttachRole(role, elem) {
	    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');
	  }

	  function getShape(attr, elem) {
	    var type = attr.type,
	        role = attr.role;

	    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :
	           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :
	           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' :
	           (type || role) === 'textbox'   || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';
	  }

	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value
	    compile: function(elem, attr) {
	      var shape = getShape(attr, elem);

	      return {
	        pre: function(scope, elem, attr, ngModel) {
	          if (shape === 'checkbox' && attr.type !== 'checkbox') {
	            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles
	            ngModel.$isEmpty = function(value) {
	              return value === false;
	            };
	          }
	        },
	        post: function(scope, elem, attr, ngModel) {
	          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem);

	          function ngAriaWatchModelValue() {
	            return ngModel.$modelValue;
	          }

	          function getRadioReaction() {
	            if (needsTabIndex) {
	              needsTabIndex = false;
	              return function ngAriaRadioReaction(newVal) {
	                var boolVal = (attr.value == ngModel.$viewValue);
	                elem.attr('aria-checked', boolVal);
	                elem.attr('tabindex', 0 - !boolVal);
	              };
	            } else {
	              return function ngAriaRadioReaction(newVal) {
	                elem.attr('aria-checked', (attr.value == ngModel.$viewValue));
	              };
	            }
	          }

	          function ngAriaCheckboxReaction() {
	            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));
	          }

	          switch (shape) {
	            case 'radio':
	            case 'checkbox':
	              if (shouldAttachRole(shape, elem)) {
	                elem.attr('role', shape);
	              }
	              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {
	                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?
	                    getRadioReaction() : ngAriaCheckboxReaction);
	              }
	              break;
	            case 'range':
	              if (shouldAttachRole(shape, elem)) {
	                elem.attr('role', 'slider');
	              }
	              if ($aria.config('ariaValue')) {
	                if (attr.min && !elem.attr('aria-valuemin')) {
	                  elem.attr('aria-valuemin', attr.min);
	                }
	                if (attr.max && !elem.attr('aria-valuemax')) {
	                  elem.attr('aria-valuemax', attr.max);
	                }
	                if (!elem.attr('aria-valuenow')) {
	                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {
	                    elem.attr('aria-valuenow', newVal);
	                  });
	                }
	              }
	              break;
	            case 'multiline':
	              if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {
	                elem.attr('aria-multiline', true);
	              }
	              break;
	          }

	          if (needsTabIndex) {
	            elem.attr('tabindex', 0);
	          }

	          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {
	            scope.$watch(function ngAriaRequiredWatch() {
	              return ngModel.$error.required;
	            }, function ngAriaRequiredReaction(newVal) {
	              elem.attr('aria-required', !!newVal);
	            });
	          }

	          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {
	            scope.$watch(function ngAriaInvalidWatch() {
	              return ngModel.$invalid;
	            }, function ngAriaInvalidReaction(newVal) {
	              elem.attr('aria-invalid', !!newVal);
	            });
	          }
	        }
	      };
	    }
	  };
	}])
	.directive('ngDisabled', ['$aria', function($aria) {
	  return $aria.$$watchExpr('ngDisabled', 'aria-disabled');
	}])
	.directive('ngMessages', function() {
	  return {
	    restrict: 'A',
	    require: '?ngMessages',
	    link: function(scope, elem, attr, ngMessages) {
	      if (!elem.attr('aria-live')) {
	        elem.attr('aria-live', 'assertive');
	      }
	    }
	  };
	})
	.directive('ngClick',['$aria', '$parse', function($aria, $parse) {
	  return {
	    restrict: 'A',
	    compile: function(elem, attr) {
	      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);
	      return function(scope, elem, attr) {

	        var nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA'];

	        function isNodeOneOf(elem, nodeTypeArray) {
	          if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {
	            return true;
	          }
	        }
	        if (!elem.attr('role') && !isNodeOneOf(elem, nodeBlackList)) {
	          elem.attr('role', 'button');
	        }

	        if ($aria.config('tabindex') && !elem.attr('tabindex')) {
	          elem.attr('tabindex', 0);
	        }

	        if ($aria.config('bindKeypress') && !attr.ngKeypress && !isNodeOneOf(elem, nodeBlackList)) {
	          elem.on('keypress', function(event) {
	            if (event.keyCode === 32 || event.keyCode === 13) {
	              scope.$apply(callback);
	            }

	            function callback() {
	              fn(scope, { $event: event });
	            }
	          });
	        }
	      };
	    }
	  };
	}])
	.directive('ngDblclick', ['$aria', function($aria) {
	  return function(scope, elem, attr) {
	    if ($aria.config('tabindex') && !elem.attr('tabindex')) {
	      elem.attr('tabindex', 0);
	    }
	  };
	}]);


	})(window, window.angular);


/***/ },
/* 9 */
/***/ function(module, exports) {

	/*
	 * @license
	 * angular-modal v0.4.0
	 * (c) 2013 Brian Ford http://briantford.com
	 * License: MIT
	 */

	'use strict';

	angular.module('btford.modal', []).
	factory('btfModal', function ($animate, $timeout, $compile, $rootScope, $controller, $q, $http, $templateCache, $document) {
	  return function modalFactory (config) {
	    if (!(!config.template ^ !config.templateUrl)) {
	      throw new Error('Expected modal to have exacly one of either `template` or `templateUrl`');
	    }

	    var template      = config.template,
	        controller    = config.controller || angular.noop,
	        closeOnEscape = (typeof config.closeOnEscape == "undefined") ? true : false,
	        afterFocusOn  = config.afterFocusOn,
	        controllerAs  = config.controllerAs,
	        container     = angular.element(config.container || document.body),
	        element       = null,
	        html,
	        scope;

	    if (config.template) {
	      var deferred = $q.defer();
	      deferred.resolve(config.template);
	      html = deferred.promise;
	    } else {
	      html = $http.get(config.templateUrl, {
	        cache: $templateCache
	      }).
	      then(function (response) {
	        return response.data;
	      });
	    }

	    function activate (locals) {
	      return html.then(function (html) {
	        if (!element) {
	          attach(html, locals);
	        }
	      });
	    }

	    function attach (html, locals) {
	      element = angular.element(html);
	      if (element.length === 0) {
	        throw new Error('The template contains no elements; you need to wrap text nodes')
	      }
	      if (closeOnEscape) {
	        $document.unbind("keydown").bind("keydown", function (event) {
	            if(event.which == 27) {
	              // angularize
	              $timeout(deactivate);
	            }
	        });
	      }
	      $animate.enter(element, container).then(function() {
	        // trap focus if jquery.trap is available
	        if (element.trap) {
	          element.trap();
	        }
	      });
	      scope = $rootScope.$new();
	      if (locals) {
	        for (var prop in locals) {
	          scope[prop] = locals[prop];
	        }
	      }
	      var ctrl = $controller(controller, { $scope: scope });
	      if (controllerAs) {
	        scope[controllerAs] = ctrl;
	      }
	      $compile(element)(scope);
	    }

	    function deactivate () {
	      $document.unbind("keydown");
	      if (afterFocusOn) {
	        jQuery(afterFocusOn).focus();
	      }
	      return $animate.leave(element).then(function() {
	        scope.$destroy();
	        element = null;
	      });
	    }

	    function active () {
	      return !!element;
	    }

	    return {
	      activate: activate,
	      deactivate: deactivate,
	      active: active
	    };
	  };
	});


/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';
	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}

	function getVF(n, opt_precision) {
	  var v = opt_precision;

	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }

	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}

	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "vorm.",
	      "nachm."
	    ],
	    "DAY": [
	      "Sonntag",
	      "Montag",
	      "Dienstag",
	      "Mittwoch",
	      "Donnerstag",
	      "Freitag",
	      "Samstag"
	    ],
	    "ERANAMES": [
	      "v. Chr.",
	      "n. Chr."
	    ],
	    "ERAS": [
	      "v. Chr.",
	      "n. Chr."
	    ],
	    "MONTH": [
	      "Januar",
	      "Februar",
	      "M\u00e4rz",
	      "April",
	      "Mai",
	      "Juni",
	      "Juli",
	      "August",
	      "September",
	      "Oktober",
	      "November",
	      "Dezember"
	    ],
	    "SHORTDAY": [
	      "So.",
	      "Mo.",
	      "Di.",
	      "Mi.",
	      "Do.",
	      "Fr.",
	      "Sa."
	    ],
	    "SHORTMONTH": [
	      "Jan.",
	      "Feb.",
	      "M\u00e4rz",
	      "Apr.",
	      "Mai",
	      "Juni",
	      "Juli",
	      "Aug.",
	      "Sep.",
	      "Okt.",
	      "Nov.",
	      "Dez."
	    ],
	    "fullDate": "EEEE, d. MMMM y",
	    "longDate": "d. MMMM y",
	    "medium": "dd.MM.y HH:mm:ss",
	    "mediumDate": "dd.MM.y",
	    "mediumTime": "HH:mm:ss",
	    "short": "dd.MM.yy HH:mm",
	    "shortDate": "dd.MM.yy",
	    "shortTime": "HH:mm"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "\u20ac",
	    "DECIMAL_SEP": ",",
	    "GROUP_SEP": ".",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "\u00a0\u00a4",
	        "posPre": "",
	        "posSuf": "\u00a0\u00a4"
	      }
	    ]
	  },
	  "id": "de-de",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);


/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * State-based routing for AngularJS
	 * @version v0.2.13
	 * @link http://angular-ui.github.com/
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */

	/* commonjs package manager support (eg componentjs) */
	if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
	  module.exports = 'ui.router';
	}

	(function (window, angular, undefined) {
	/*jshint globalstrict:true*/
	/*global angular:false*/
	'use strict';

	var isDefined = angular.isDefined,
	    isFunction = angular.isFunction,
	    isString = angular.isString,
	    isObject = angular.isObject,
	    isArray = angular.isArray,
	    forEach = angular.forEach,
	    extend = angular.extend,
	    copy = angular.copy;

	function inherit(parent, extra) {
	  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
	}

	function merge(dst) {
	  forEach(arguments, function(obj) {
	    if (obj !== dst) {
	      forEach(obj, function(value, key) {
	        if (!dst.hasOwnProperty(key)) dst[key] = value;
	      });
	    }
	  });
	  return dst;
	}

	/**
	 * Finds the common ancestor path between two states.
	 *
	 * @param {Object} first The first state.
	 * @param {Object} second The second state.
	 * @return {Array} Returns an array of state names in descending order, not including the root.
	 */
	function ancestors(first, second) {
	  var path = [];

	  for (var n in first.path) {
	    if (first.path[n] !== second.path[n]) break;
	    path.push(first.path[n]);
	  }
	  return path;
	}

	/**
	 * IE8-safe wrapper for `Object.keys()`.
	 *
	 * @param {Object} object A JavaScript object.
	 * @return {Array} Returns the keys of the object as an array.
	 */
	function objectKeys(object) {
	  if (Object.keys) {
	    return Object.keys(object);
	  }
	  var result = [];

	  angular.forEach(object, function(val, key) {
	    result.push(key);
	  });
	  return result;
	}

	/**
	 * IE8-safe wrapper for `Array.prototype.indexOf()`.
	 *
	 * @param {Array} array A JavaScript array.
	 * @param {*} value A value to search the array for.
	 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
	 */
	function indexOf(array, value) {
	  if (Array.prototype.indexOf) {
	    return array.indexOf(value, Number(arguments[2]) || 0);
	  }
	  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
	  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

	  if (from < 0) from += len;

	  for (; from < len; from++) {
	    if (from in array && array[from] === value) return from;
	  }
	  return -1;
	}

	/**
	 * Merges a set of parameters with all parameters inherited between the common parents of the
	 * current state and a given destination state.
	 *
	 * @param {Object} currentParams The value of the current state parameters ($stateParams).
	 * @param {Object} newParams The set of parameters which will be composited with inherited params.
	 * @param {Object} $current Internal definition of object representing the current state.
	 * @param {Object} $to Internal definition of object representing state to transition to.
	 */
	function inheritParams(currentParams, newParams, $current, $to) {
	  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

	  for (var i in parents) {
	    if (!parents[i].params) continue;
	    parentParams = objectKeys(parents[i].params);
	    if (!parentParams.length) continue;

	    for (var j in parentParams) {
	      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
	      inheritList.push(parentParams[j]);
	      inherited[parentParams[j]] = currentParams[parentParams[j]];
	    }
	  }
	  return extend({}, inherited, newParams);
	}

	/**
	 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
	 *
	 * @param {Object} a The first object.
	 * @param {Object} b The second object.
	 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
	 *                     it defaults to the list of keys in `a`.
	 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
	 */
	function equalForKeys(a, b, keys) {
	  if (!keys) {
	    keys = [];
	    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
	  }

	  for (var i=0; i<keys.length; i++) {
	    var k = keys[i];
	    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
	  }
	  return true;
	}

	/**
	 * Returns the subset of an object, based on a list of keys.
	 *
	 * @param {Array} keys
	 * @param {Object} values
	 * @return {Boolean} Returns a subset of `values`.
	 */
	function filterByKeys(keys, values) {
	  var filtered = {};

	  forEach(keys, function (name) {
	    filtered[name] = values[name];
	  });
	  return filtered;
	}

	// like _.indexBy
	// when you know that your index values will be unique, or you want last-one-in to win
	function indexBy(array, propName) {
	  var result = {};
	  forEach(array, function(item) {
	    result[item[propName]] = item;
	  });
	  return result;
	}

	// extracted from underscore.js
	// Return a copy of the object only containing the whitelisted properties.
	function pick(obj) {
	  var copy = {};
	  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	  forEach(keys, function(key) {
	    if (key in obj) copy[key] = obj[key];
	  });
	  return copy;
	}

	// extracted from underscore.js
	// Return a copy of the object omitting the blacklisted properties.
	function omit(obj) {
	  var copy = {};
	  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
	  for (var key in obj) {
	    if (indexOf(keys, key) == -1) copy[key] = obj[key];
	  }
	  return copy;
	}

	function pluck(collection, key) {
	  var result = isArray(collection) ? [] : {};

	  forEach(collection, function(val, i) {
	    result[i] = isFunction(key) ? key(val) : val[key];
	  });
	  return result;
	}

	function filter(collection, callback) {
	  var array = isArray(collection);
	  var result = array ? [] : {};
	  forEach(collection, function(val, i) {
	    if (callback(val, i)) {
	      result[array ? result.length : i] = val;
	    }
	  });
	  return result;
	}

	function map(collection, callback) {
	  var result = isArray(collection) ? [] : {};

	  forEach(collection, function(val, i) {
	    result[i] = callback(val, i);
	  });
	  return result;
	}

	/**
	 * @ngdoc overview
	 * @name ui.router.util
	 *
	 * @description
	 * # ui.router.util sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 *
	 */
	angular.module('ui.router.util', ['ng']);

	/**
	 * @ngdoc overview
	 * @name ui.router.router
	 * 
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.router sub-module
	 *
	 * This module is a dependency of other sub-modules. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 */
	angular.module('ui.router.router', ['ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router.state
	 * 
	 * @requires ui.router.router
	 * @requires ui.router.util
	 *
	 * @description
	 * # ui.router.state sub-module
	 *
	 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
	 * in your angular app (use {@link ui.router} module instead).
	 * 
	 */
	angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

	/**
	 * @ngdoc overview
	 * @name ui.router
	 *
	 * @requires ui.router.state
	 *
	 * @description
	 * # ui.router
	 * 
	 * ## The main module for ui.router 
	 * There are several sub-modules included with the ui.router module, however only this module is needed
	 * as a dependency within your angular app. The other modules are for organization purposes. 
	 *
	 * The modules are:
	 * * ui.router - the main "umbrella" module
	 * * ui.router.router - 
	 * 
	 * *You'll need to include **only** this module as the dependency within your angular app.*
	 * 
	 * <pre>
	 * <!doctype html>
	 * <html ng-app="myApp">
	 * <head>
	 *   <script src="js/angular.js"></script>
	 *   <!-- Include the ui-router script -->
	 *   <script src="js/angular-ui-router.min.js"></script>
	 *   <script>
	 *     // ...and add 'ui.router' as a dependency
	 *     var myApp = angular.module('myApp', ['ui.router']);
	 *   </script>
	 * </head>
	 * <body>
	 * </body>
	 * </html>
	 * </pre>
	 */
	angular.module('ui.router', ['ui.router.state']);

	angular.module('ui.router.compat', ['ui.router']);

	/**
	 * @ngdoc object
	 * @name ui.router.util.$resolve
	 *
	 * @requires $q
	 * @requires $injector
	 *
	 * @description
	 * Manages resolution of (acyclic) graphs of promises.
	 */
	$Resolve.$inject = ['$q', '$injector'];
	function $Resolve(  $q,    $injector) {
	  
	  var VISIT_IN_PROGRESS = 1,
	      VISIT_DONE = 2,
	      NOTHING = {},
	      NO_DEPENDENCIES = [],
	      NO_LOCALS = NOTHING,
	      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
	  

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$resolve#study
	   * @methodOf ui.router.util.$resolve
	   *
	   * @description
	   * Studies a set of invocables that are likely to be used multiple times.
	   * <pre>
	   * $resolve.study(invocables)(locals, parent, self)
	   * </pre>
	   * is equivalent to
	   * <pre>
	   * $resolve.resolve(invocables, locals, parent, self)
	   * </pre>
	   * but the former is more efficient (in fact `resolve` just calls `study` 
	   * internally).
	   *
	   * @param {object} invocables Invocable objects
	   * @return {function} a function to pass in locals, parent and self
	   */
	  this.study = function (invocables) {
	    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
	    var invocableKeys = objectKeys(invocables || {});
	    
	    // Perform a topological sort of invocables to build an ordered plan
	    var plan = [], cycle = [], visited = {};
	    function visit(value, key) {
	      if (visited[key] === VISIT_DONE) return;
	      
	      cycle.push(key);
	      if (visited[key] === VISIT_IN_PROGRESS) {
	        cycle.splice(0, indexOf(cycle, key));
	        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
	      }
	      visited[key] = VISIT_IN_PROGRESS;
	      
	      if (isString(value)) {
	        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
	      } else {
	        var params = $injector.annotate(value);
	        forEach(params, function (param) {
	          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
	        });
	        plan.push(key, value, params);
	      }
	      
	      cycle.pop();
	      visited[key] = VISIT_DONE;
	    }
	    forEach(invocables, visit);
	    invocables = cycle = visited = null; // plan is all that's required
	    
	    function isResolve(value) {
	      return isObject(value) && value.then && value.$$promises;
	    }
	    
	    return function (locals, parent, self) {
	      if (isResolve(locals) && self === undefined) {
	        self = parent; parent = locals; locals = null;
	      }
	      if (!locals) locals = NO_LOCALS;
	      else if (!isObject(locals)) {
	        throw new Error("'locals' must be an object");
	      }       
	      if (!parent) parent = NO_PARENT;
	      else if (!isResolve(parent)) {
	        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
	      }
	      
	      // To complete the overall resolution, we have to wait for the parent
	      // promise and for the promise for each invokable in our plan.
	      var resolution = $q.defer(),
	          result = resolution.promise,
	          promises = result.$$promises = {},
	          values = extend({}, locals),
	          wait = 1 + plan.length/3,
	          merged = false;
	          
	      function done() {
	        // Merge parent values we haven't got yet and publish our own $$values
	        if (!--wait) {
	          if (!merged) merge(values, parent.$$values); 
	          result.$$values = values;
	          result.$$promises = result.$$promises || true; // keep for isResolve()
	          delete result.$$inheritedValues;
	          resolution.resolve(values);
	        }
	      }
	      
	      function fail(reason) {
	        result.$$failure = reason;
	        resolution.reject(reason);
	      }

	      // Short-circuit if parent has already failed
	      if (isDefined(parent.$$failure)) {
	        fail(parent.$$failure);
	        return result;
	      }
	      
	      if (parent.$$inheritedValues) {
	        merge(values, omit(parent.$$inheritedValues, invocableKeys));
	      }

	      // Merge parent values if the parent has already resolved, or merge
	      // parent promises and wait if the parent resolve is still in progress.
	      extend(promises, parent.$$promises);
	      if (parent.$$values) {
	        merged = merge(values, omit(parent.$$values, invocableKeys));
	        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
	        done();
	      } else {
	        if (parent.$$inheritedValues) {
	          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
	        }        
	        parent.then(done, fail);
	      }
	      
	      // Process each invocable in the plan, but ignore any where a local of the same name exists.
	      for (var i=0, ii=plan.length; i<ii; i+=3) {
	        if (locals.hasOwnProperty(plan[i])) done();
	        else invoke(plan[i], plan[i+1], plan[i+2]);
	      }
	      
	      function invoke(key, invocable, params) {
	        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
	        var invocation = $q.defer(), waitParams = 0;
	        function onfailure(reason) {
	          invocation.reject(reason);
	          fail(reason);
	        }
	        // Wait for any parameter that we have a promise for (either from parent or from this
	        // resolve; in that case study() will have made sure it's ordered before us in the plan).
	        forEach(params, function (dep) {
	          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
	            waitParams++;
	            promises[dep].then(function (result) {
	              values[dep] = result;
	              if (!(--waitParams)) proceed();
	            }, onfailure);
	          }
	        });
	        if (!waitParams) proceed();
	        function proceed() {
	          if (isDefined(result.$$failure)) return;
	          try {
	            invocation.resolve($injector.invoke(invocable, self, values));
	            invocation.promise.then(function (result) {
	              values[key] = result;
	              done();
	            }, onfailure);
	          } catch (e) {
	            onfailure(e);
	          }
	        }
	        // Publish promise synchronously; invocations further down in the plan may depend on it.
	        promises[key] = invocation.promise;
	      }
	      
	      return result;
	    };
	  };
	  
	  /**
	   * @ngdoc function
	   * @name ui.router.util.$resolve#resolve
	   * @methodOf ui.router.util.$resolve
	   *
	   * @description
	   * Resolves a set of invocables. An invocable is a function to be invoked via 
	   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
	   * An invocable can either return a value directly,
	   * or a `$q` promise. If a promise is returned it will be resolved and the 
	   * resulting value will be used instead. Dependencies of invocables are resolved 
	   * (in this order of precedence)
	   *
	   * - from the specified `locals`
	   * - from another invocable that is part of this `$resolve` call
	   * - from an invocable that is inherited from a `parent` call to `$resolve` 
	   *   (or recursively
	   * - from any ancestor `$resolve` of that parent).
	   *
	   * The return value of `$resolve` is a promise for an object that contains 
	   * (in this order of precedence)
	   *
	   * - any `locals` (if specified)
	   * - the resolved return values of all injectables
	   * - any values inherited from a `parent` call to `$resolve` (if specified)
	   *
	   * The promise will resolve after the `parent` promise (if any) and all promises 
	   * returned by injectables have been resolved. If any invocable 
	   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
	   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
	   * same error. A rejection of a `parent` promise (if specified) will likewise be 
	   * propagated immediately. Once the `$resolve` promise has been rejected, no 
	   * further invocables will be called.
	   * 
	   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
	   * to throw an error. As a special case, an injectable can depend on a parameter 
	   * with the same name as the injectable, which will be fulfilled from the `parent` 
	   * injectable of the same name. This allows inherited values to be decorated. 
	   * Note that in this case any other injectable in the same `$resolve` with the same
	   * dependency would see the decorated value, not the inherited value.
	   *
	   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
	   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
	   * exception.
	   *
	   * Invocables are invoked eagerly as soon as all dependencies are available. 
	   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
	   *
	   * As a special case, an invocable can be a string, in which case it is taken to 
	   * be a service name to be passed to `$injector.get()`. This is supported primarily 
	   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
	   * routes.
	   *
	   * @param {object} invocables functions to invoke or 
	   * `$injector` services to fetch.
	   * @param {object} locals  values to make available to the injectables
	   * @param {object} parent  a promise returned by another call to `$resolve`.
	   * @param {object} self  the `this` for the invoked methods
	   * @return {object} Promise for an object that contains the resolved return value
	   * of all invocables, as well as any inherited and local values.
	   */
	  this.resolve = function (invocables, locals, parent, self) {
	    return this.study(invocables)(locals, parent, self);
	  };
	}

	angular.module('ui.router.util').service('$resolve', $Resolve);


	/**
	 * @ngdoc object
	 * @name ui.router.util.$templateFactory
	 *
	 * @requires $http
	 * @requires $templateCache
	 * @requires $injector
	 *
	 * @description
	 * Service. Manages loading of templates.
	 */
	$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
	function $TemplateFactory(  $http,   $templateCache,   $injector) {

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromConfig
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template from a configuration object. 
	   *
	   * @param {object} config Configuration object for which to load a template. 
	   * The following properties are search in the specified order, and the first one 
	   * that is defined is used to create the template:
	   *
	   * @param {string|object} config.template html string template or function to 
	   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
	   * @param {string|object} config.templateUrl url to load or a function returning 
	   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
	   * @param {Function} config.templateProvider function to invoke via 
	   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
	   * @param {object} params  Parameters to pass to the template function.
	   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
	   * via a `templateProvider`. Defaults to `{ params: params }`.
	   *
	   * @return {string|object}  The template html as a string, or a promise for 
	   * that string,or `null` if no template is configured.
	   */
	  this.fromConfig = function (config, params, locals) {
	    return (
	      isDefined(config.template) ? this.fromString(config.template, params) :
	      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
	      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
	      null
	    );
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromString
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template from a string or a function returning a string.
	   *
	   * @param {string|object} template html template as a string or function that 
	   * returns an html template as a string.
	   * @param {object} params Parameters to pass to the template function.
	   *
	   * @return {string|object} The template html as a string, or a promise for that 
	   * string.
	   */
	  this.fromString = function (template, params) {
	    return isFunction(template) ? template(params) : template;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromUrl
	   * @methodOf ui.router.util.$templateFactory
	   * 
	   * @description
	   * Loads a template from the a URL via `$http` and `$templateCache`.
	   *
	   * @param {string|Function} url url of the template to load, or a function 
	   * that returns a url.
	   * @param {Object} params Parameters to pass to the url function.
	   * @return {string|Promise.<string>} The template html as a string, or a promise 
	   * for that string.
	   */
	  this.fromUrl = function (url, params) {
	    if (isFunction(url)) url = url(params);
	    if (url == null) return null;
	    else return $http
	        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
	        .then(function(response) { return response.data; });
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$templateFactory#fromProvider
	   * @methodOf ui.router.util.$templateFactory
	   *
	   * @description
	   * Creates a template by invoking an injectable provider function.
	   *
	   * @param {Function} provider Function to invoke via `$injector.invoke`
	   * @param {Object} params Parameters for the template.
	   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
	   * `{ params: params }`.
	   * @return {string|Promise.<string>} The template html as a string, or a promise 
	   * for that string.
	   */
	  this.fromProvider = function (provider, params, locals) {
	    return $injector.invoke(provider, null, locals || { params: params });
	  };
	}

	angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

	var $$UMFP; // reference to $UrlMatcherFactoryProvider

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Matches URLs against patterns and extracts named parameters from the path or the search
	 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
	 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
	 * do not influence whether or not a URL is matched, but their values are passed through into
	 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
	 * 
	 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
	 * syntax, which optionally allows a regular expression for the parameter to be specified:
	 *
	 * * `':'` name - colon placeholder
	 * * `'*'` name - catch-all placeholder
	 * * `'{' name '}'` - curly placeholder
	 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
	 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
	 *
	 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
	 * must be unique within the pattern (across both path and search parameters). For colon 
	 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
	 * number of characters other than '/'. For catch-all placeholders the path parameter matches
	 * any number of characters.
	 * 
	 * Examples:
	 * 
	 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
	 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
	 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
	 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
	 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
	 * * `'/user/{id:[^/]*}'` - Same as the previous example.
	 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
	 *   parameter consists of 1 to 8 hex digits.
	 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
	 *   path into the parameter 'path'.
	 * * `'/files/*path'` - ditto.
	 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
	 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
	 *
	 * @param {string} pattern  The pattern to compile into a matcher.
	 * @param {Object} config  A configuration object hash:
	 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
	 *   an existing UrlMatcher
	 *
	 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
	 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
	 *
	 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
	 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
	 *   non-null) will start with this prefix.
	 *
	 * @property {string} source  The pattern that was passed into the constructor
	 *
	 * @property {string} sourcePath  The path portion of the source property
	 *
	 * @property {string} sourceSearch  The search portion of the source property
	 *
	 * @property {string} regex  The constructed regex that will be used to match against the url when 
	 *   it is time to determine which url will match.
	 *
	 * @returns {Object}  New `UrlMatcher` object
	 */
	function UrlMatcher(pattern, config, parentMatcher) {
	  config = extend({ params: {} }, isObject(config) ? config : {});

	  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
	  //   '*' name
	  //   ':' name
	  //   '{' name '}'
	  //   '{' name ':' regexp '}'
	  // The regular expression is somewhat complicated due to the need to allow curly braces
	  // inside the regular expression. The placeholder regexp breaks down as follows:
	  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
	  //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
	  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
	  //    [^{}\\]+                       - anything other than curly braces or backslash
	  //    \\.                            - a backslash escape
	  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
	  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	      searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
	      compiled = '^', last = 0, m,
	      segments = this.segments = [],
	      parentParams = parentMatcher ? parentMatcher.params : {},
	      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
	      paramNames = [];

	  function addParameter(id, type, config, location) {
	    paramNames.push(id);
	    if (parentParams[id]) return parentParams[id];
	    if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
	    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
	    params[id] = new $$UMFP.Param(id, type, config, location);
	    return params[id];
	  }

	  function quoteRegExp(string, pattern, squash) {
	    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
	    if (!pattern) return result;
	    switch(squash) {
	      case false: surroundPattern = ['(', ')'];   break;
	      case true:  surroundPattern = ['?(', ')?']; break;
	      default:    surroundPattern = ['(' + squash + "|", ')?'];  break;
	    }
	    return result + surroundPattern[0] + pattern + surroundPattern[1];
	  }

	  this.source = pattern;

	  // Split into static segments separated by path parameter placeholders.
	  // The number of segments is always 1 more than the number of parameters.
	  function matchDetails(m, isSearch) {
	    var id, regexp, segment, type, cfg, arrayMode;
	    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
	    cfg         = config.params[id];
	    segment     = pattern.substring(last, m.index);
	    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
	    type        = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp) });
	    return {
	      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
	    };
	  }

	  var p, param, segment;
	  while ((m = placeholder.exec(pattern))) {
	    p = matchDetails(m, false);
	    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

	    param = addParameter(p.id, p.type, p.cfg, "path");
	    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash);
	    segments.push(p.segment);
	    last = placeholder.lastIndex;
	  }
	  segment = pattern.substring(last);

	  // Find any search parameter names and remove them from the last segment
	  var i = segment.indexOf('?');

	  if (i >= 0) {
	    var search = this.sourceSearch = segment.substring(i);
	    segment = segment.substring(0, i);
	    this.sourcePath = pattern.substring(0, last + i);

	    if (search.length > 0) {
	      last = 0;
	      while ((m = searchPlaceholder.exec(search))) {
	        p = matchDetails(m, true);
	        param = addParameter(p.id, p.type, p.cfg, "search");
	        last = placeholder.lastIndex;
	        // check if ?&
	      }
	    }
	  } else {
	    this.sourcePath = pattern;
	    this.sourceSearch = '';
	  }

	  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
	  segments.push(segment);

	  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
	  this.prefix = segments[0];
	  this.$$paramNames = paramNames;
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#concat
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns a new matcher for a pattern constructed by appending the path part and adding the
	 * search parameters of the specified pattern to this pattern. The current pattern is not
	 * modified. This can be understood as creating a pattern for URLs that are relative to (or
	 * suffixes of) the current pattern.
	 *
	 * @example
	 * The following two matchers are equivalent:
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').concat('/details?date');
	 * new UrlMatcher('/user/{id}/details?q&date');
	 * </pre>
	 *
	 * @param {string} pattern  The pattern to append.
	 * @param {Object} config  An object hash of the configuration for the matcher.
	 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
	 */
	UrlMatcher.prototype.concat = function (pattern, config) {
	  // Because order of search parameters is irrelevant, we can add our own search
	  // parameters to the end of the new pattern. Parse the new pattern by itself
	  // and then join the bits together, but it's much easier to do this on a string level.
	  var defaultConfig = {
	    caseInsensitive: $$UMFP.caseInsensitive(),
	    strict: $$UMFP.strictMode(),
	    squash: $$UMFP.defaultSquashPolicy()
	  };
	  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
	};

	UrlMatcher.prototype.toString = function () {
	  return this.source;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#exec
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Tests the specified path against this matcher, and returns an object containing the captured
	 * parameter values, or null if the path does not match. The returned object contains the values
	 * of any search parameters that are mentioned in the pattern, but their value may be null if
	 * they are not present in `searchParams`. This means that search parameters are always treated
	 * as optional.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
	 *   x: '1', q: 'hello'
	 * });
	 * // returns { id: 'bob', q: 'hello', r: null }
	 * </pre>
	 *
	 * @param {string} path  The URL path to match, e.g. `$location.path()`.
	 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
	 * @returns {Object}  The captured parameter values.
	 */
	UrlMatcher.prototype.exec = function (path, searchParams) {
	  var m = this.regexp.exec(path);
	  if (!m) return null;
	  searchParams = searchParams || {};

	  var paramNames = this.parameters(), nTotal = paramNames.length,
	    nPath = this.segments.length - 1,
	    values = {}, i, j, cfg, paramName;

	  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

	  function decodePathArray(string) {
	    function reverseString(str) { return str.split("").reverse().join(""); }
	    function unquoteDashes(str) { return str.replace(/\\-/, "-"); }

	    var split = reverseString(string).split(/-(?!\\)/);
	    var allReversed = map(split, reverseString);
	    return map(allReversed, unquoteDashes).reverse();
	  }

	  for (i = 0; i < nPath; i++) {
	    paramName = paramNames[i];
	    var param = this.params[paramName];
	    var paramVal = m[i+1];
	    // if the param value matches a pre-replace pair, replace the value before decoding.
	    for (j = 0; j < param.replace; j++) {
	      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
	    }
	    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
	    values[paramName] = param.value(paramVal);
	  }
	  for (/**/; i < nTotal; i++) {
	    paramName = paramNames[i];
	    values[paramName] = this.params[paramName].value(searchParams[paramName]);
	  }

	  return values;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#parameters
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Returns the names of all path and search parameters of this pattern in an unspecified order.
	 * 
	 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
	 *    pattern has no parameters, an empty array is returned.
	 */
	UrlMatcher.prototype.parameters = function (param) {
	  if (!isDefined(param)) return this.$$paramNames;
	  return this.params[param] || null;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#validate
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Checks an object hash of parameters to validate their correctness according to the parameter
	 * types of this `UrlMatcher`.
	 *
	 * @param {Object} params The object hash of parameters to validate.
	 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
	 */
	UrlMatcher.prototype.validates = function (params) {
	  return this.params.$$validates(params);
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:UrlMatcher#format
	 * @methodOf ui.router.util.type:UrlMatcher
	 *
	 * @description
	 * Creates a URL that matches this pattern by substituting the specified values
	 * for the path and search parameters. Null values for path parameters are
	 * treated as empty strings.
	 *
	 * @example
	 * <pre>
	 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
	 * // returns '/user/bob?q=yes'
	 * </pre>
	 *
	 * @param {Object} values  the values to substitute for the parameters in this pattern.
	 * @returns {string}  the formatted URL (path and optionally search part).
	 */
	UrlMatcher.prototype.format = function (values) {
	  values = values || {};
	  var segments = this.segments, params = this.parameters(), paramset = this.params;
	  if (!this.validates(values)) return null;

	  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

	  function encodeDashes(str) { // Replace dashes with encoded "\-"
	    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
	  }

	  for (i = 0; i < nTotal; i++) {
	    var isPathParam = i < nPath;
	    var name = params[i], param = paramset[name], value = param.value(values[name]);
	    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
	    var squash = isDefaultValue ? param.squash : false;
	    var encoded = param.type.encode(value);

	    if (isPathParam) {
	      var nextSegment = segments[i + 1];
	      if (squash === false) {
	        if (encoded != null) {
	          if (isArray(encoded)) {
	            result += map(encoded, encodeDashes).join("-");
	          } else {
	            result += encodeURIComponent(encoded);
	          }
	        }
	        result += nextSegment;
	      } else if (squash === true) {
	        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
	        result += nextSegment.match(capture)[1];
	      } else if (isString(squash)) {
	        result += squash + nextSegment;
	      }
	    } else {
	      if (encoded == null || (isDefaultValue && squash !== false)) continue;
	      if (!isArray(encoded)) encoded = [ encoded ];
	      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
	      result += (search ? '&' : '?') + (name + '=' + encoded);
	      search = true;
	    }
	  }

	  return result;
	};

	/**
	 * @ngdoc object
	 * @name ui.router.util.type:Type
	 *
	 * @description
	 * Implements an interface to define custom parameter types that can be decoded from and encoded to
	 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
	 * objects when matching or formatting URLs, or comparing or validating parameter values.
	 *
	 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
	 * information on registering custom types.
	 *
	 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
	 *        properties will override the default methods and/or pattern in `Type`'s public interface.
	 * @example
	 * <pre>
	 * {
	 *   decode: function(val) { return parseInt(val, 10); },
	 *   encode: function(val) { return val && val.toString(); },
	 *   equals: function(a, b) { return this.is(a) && a === b; },
	 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
	 *   pattern: /\d+/
	 * }
	 * </pre>
	 *
	 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
	 *           coming from a substring of a URL.
	 *
	 * @returns {Object}  Returns a new `Type` object.
	 */
	function Type(config) {
	  extend(this, config);
	}

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#is
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Detects whether a value is of a particular type. Accepts a native (decoded) value
	 * and determines whether it matches the current `Type` object.
	 *
	 * @param {*} val  The value to check.
	 * @param {string} key  Optional. If the type check is happening in the context of a specific
	 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
	 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
	 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
	 */
	Type.prototype.is = function(val, key) {
	  return true;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#encode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
	 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
	 * only needs to be a representation of `val` that has been coerced to a string.
	 *
	 * @param {*} val  The value to encode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
	 */
	Type.prototype.encode = function(val, key) {
	  return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#decode
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Converts a parameter value (from URL string or transition param) to a custom/native value.
	 *
	 * @param {string} val  The URL parameter value to decode.
	 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
	 *        meta-programming of `Type` objects.
	 * @returns {*}  Returns a custom representation of the URL parameter value.
	 */
	Type.prototype.decode = function(val, key) {
	  return val;
	};

	/**
	 * @ngdoc function
	 * @name ui.router.util.type:Type#equals
	 * @methodOf ui.router.util.type:Type
	 *
	 * @description
	 * Determines whether two decoded values are equivalent.
	 *
	 * @param {*} a  A value to compare against.
	 * @param {*} b  A value to compare against.
	 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
	 */
	Type.prototype.equals = function(a, b) {
	  return a == b;
	};

	Type.prototype.$subPattern = function() {
	  var sub = this.pattern.toString();
	  return sub.substr(1, sub.length - 2);
	};

	Type.prototype.pattern = /.*/;

	Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

	/*
	 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
	 * e.g.:
	 * - urlmatcher pattern "/path?{queryParam[]:int}"
	 * - url: "/path?queryParam=1&queryParam=2
	 * - $stateParams.queryParam will be [1, 2]
	 * if `mode` is "auto", then
	 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
	 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
	 */
	Type.prototype.$asArray = function(mode, isSearch) {
	  if (!mode) return this;
	  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");
	  return new ArrayType(this, mode);

	  function ArrayType(type, mode) {
	    function bindTo(type, callbackName) {
	      return function() {
	        return type[callbackName].apply(type, arguments);
	      };
	    }

	    // Wrap non-array value as array
	    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
	    // Unwrap array value for "auto" mode. Return undefined for empty array.
	    function arrayUnwrap(val) {
	      switch(val.length) {
	        case 0: return undefined;
	        case 1: return mode === "auto" ? val[0] : val;
	        default: return val;
	      }
	    }
	    function falsey(val) { return !val; }

	    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
	    function arrayHandler(callback, allTruthyMode) {
	      return function handleArray(val) {
	        val = arrayWrap(val);
	        var result = map(val, callback);
	        if (allTruthyMode === true)
	          return filter(result, falsey).length === 0;
	        return arrayUnwrap(result);
	      };
	    }

	    // Wraps type (.equals) functions to operate on each value of an array
	    function arrayEqualsHandler(callback) {
	      return function handleArray(val1, val2) {
	        var left = arrayWrap(val1), right = arrayWrap(val2);
	        if (left.length !== right.length) return false;
	        for (var i = 0; i < left.length; i++) {
	          if (!callback(left[i], right[i])) return false;
	        }
	        return true;
	      };
	    }

	    this.encode = arrayHandler(bindTo(type, 'encode'));
	    this.decode = arrayHandler(bindTo(type, 'decode'));
	    this.is     = arrayHandler(bindTo(type, 'is'), true);
	    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
	    this.pattern = type.pattern;
	    this.$arrayMode = mode;
	  }
	};



	/**
	 * @ngdoc object
	 * @name ui.router.util.$urlMatcherFactory
	 *
	 * @description
	 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
	 * is also available to providers under the name `$urlMatcherFactoryProvider`.
	 */
	function $UrlMatcherFactory() {
	  $$UMFP = this;

	  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

	  function valToString(val) { return val != null ? val.toString().replace(/\//g, "%2F") : val; }
	  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, "/") : val; }
	//  TODO: in 1.0, make string .is() return false if value is undefined by default.
	//  function regexpMatches(val) { /*jshint validthis:true */ return isDefined(val) && this.pattern.test(val); }
	  function regexpMatches(val) { /*jshint validthis:true */ return this.pattern.test(val); }

	  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
	    string: {
	      encode: valToString,
	      decode: valFromString,
	      is: regexpMatches,
	      pattern: /[^/]*/
	    },
	    int: {
	      encode: valToString,
	      decode: function(val) { return parseInt(val, 10); },
	      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
	      pattern: /\d+/
	    },
	    bool: {
	      encode: function(val) { return val ? 1 : 0; },
	      decode: function(val) { return parseInt(val, 10) !== 0; },
	      is: function(val) { return val === true || val === false; },
	      pattern: /0|1/
	    },
	    date: {
	      encode: function (val) {
	        if (!this.is(val))
	          return undefined;
	        return [ val.getFullYear(),
	          ('0' + (val.getMonth() + 1)).slice(-2),
	          ('0' + val.getDate()).slice(-2)
	        ].join("-");
	      },
	      decode: function (val) {
	        if (this.is(val)) return val;
	        var match = this.capture.exec(val);
	        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
	      },
	      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
	      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
	      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
	      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
	    },
	    json: {
	      encode: angular.toJson,
	      decode: angular.fromJson,
	      is: angular.isObject,
	      equals: angular.equals,
	      pattern: /[^/]*/
	    },
	    any: { // does not encode/decode
	      encode: angular.identity,
	      decode: angular.identity,
	      is: angular.identity,
	      equals: angular.equals,
	      pattern: /.*/
	    }
	  };

	  function getDefaultConfig() {
	    return {
	      strict: isStrictMode,
	      caseInsensitive: isCaseInsensitive
	    };
	  }

	  function isInjectable(value) {
	    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
	  }

	  /**
	   * [Internal] Get the default value of a parameter, which may be an injectable function.
	   */
	  $UrlMatcherFactory.$$getDefaultValue = function(config) {
	    if (!isInjectable(config.value)) return config.value;
	    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	    return injector.invoke(config.value);
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Defines whether URL matching should be case sensitive (the default behavior), or not.
	   *
	   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
	   * @returns {boolean} the current value of caseInsensitive
	   */
	  this.caseInsensitive = function(value) {
	    if (isDefined(value))
	      isCaseInsensitive = value;
	    return isCaseInsensitive;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#strictMode
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Defines whether URLs should match trailing slashes, or not (the default behavior).
	   *
	   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
	   * @returns {boolean} the current value of strictMode
	   */
	  this.strictMode = function(value) {
	    if (isDefined(value))
	      isStrictMode = value;
	    return isStrictMode;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Sets the default behavior when generating or matching URLs with default parameter values.
	   *
	   * @param {string} value A string that defines the default parameter URL squashing behavior.
	   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
	   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
	   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
	   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
	   *             the parameter value from the URL and replace it with this string.
	   */
	  this.defaultSquashPolicy = function(value) {
	    if (!isDefined(value)) return defaultSquashPolicy;
	    if (value !== true && value !== false && !isString(value))
	      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
	    defaultSquashPolicy = value;
	    return value;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#compile
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
	   *
	   * @param {string} pattern  The URL pattern.
	   * @param {Object} config  The config object hash.
	   * @returns {UrlMatcher}  The UrlMatcher.
	   */
	  this.compile = function (pattern, config) {
	    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#isMatcher
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
	   *
	   * @param {Object} object  The object to perform the type check against.
	   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
	   *          implementing all the same methods.
	   */
	  this.isMatcher = function (o) {
	    if (!isObject(o)) return false;
	    var result = true;

	    forEach(UrlMatcher.prototype, function(val, name) {
	      if (isFunction(val)) {
	        result = result && (isDefined(o[name]) && isFunction(o[name]));
	      }
	    });
	    return result;
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.util.$urlMatcherFactory#type
	   * @methodOf ui.router.util.$urlMatcherFactory
	   *
	   * @description
	   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
	   * generate URLs with typed parameters.
	   *
	   * @param {string} name  The type name.
	   * @param {Object|Function} definition   The type definition. See
	   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
	   *        runtime starts.  The result of this function is merged into the existing `definition`.
	   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
	   *
	   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
	   *
	   * @example
	   * This is a simple example of a custom type that encodes and decodes items from an
	   * array, using the array index as the URL-encoded value:
	   *
	   * <pre>
	   * var list = ['John', 'Paul', 'George', 'Ringo'];
	   *
	   * $urlMatcherFactoryProvider.type('listItem', {
	   *   encode: function(item) {
	   *     // Represent the list item in the URL using its corresponding index
	   *     return list.indexOf(item);
	   *   },
	   *   decode: function(item) {
	   *     // Look up the list item by index
	   *     return list[parseInt(item, 10)];
	   *   },
	   *   is: function(item) {
	   *     // Ensure the item is valid by checking to see that it appears
	   *     // in the list
	   *     return list.indexOf(item) > -1;
	   *   }
	   * });
	   *
	   * $stateProvider.state('list', {
	   *   url: "/list/{item:listItem}",
	   *   controller: function($scope, $stateParams) {
	   *     console.log($stateParams.item);
	   *   }
	   * });
	   *
	   * // ...
	   *
	   * // Changes URL to '/list/3', logs "Ringo" to the console
	   * $state.go('list', { item: "Ringo" });
	   * </pre>
	   *
	   * This is a more complex example of a type that relies on dependency injection to
	   * interact with services, and uses the parameter name from the URL to infer how to
	   * handle encoding and decoding parameter values:
	   *
	   * <pre>
	   * // Defines a custom type that gets a value from a service,
	   * // where each service gets different types of values from
	   * // a backend API:
	   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
	   *
	   *   // Matches up services to URL parameter names
	   *   var services = {
	   *     user: Users,
	   *     post: Posts
	   *   };
	   *
	   *   return {
	   *     encode: function(object) {
	   *       // Represent the object in the URL using its unique ID
	   *       return object.id;
	   *     },
	   *     decode: function(value, key) {
	   *       // Look up the object by ID, using the parameter
	   *       // name (key) to call the correct service
	   *       return services[key].findById(value);
	   *     },
	   *     is: function(object, key) {
	   *       // Check that object is a valid dbObject
	   *       return angular.isObject(object) && object.id && services[key];
	   *     }
	   *     equals: function(a, b) {
	   *       // Check the equality of decoded objects by comparing
	   *       // their unique IDs
	   *       return a.id === b.id;
	   *     }
	   *   };
	   * });
	   *
	   * // In a config() block, you can then attach URLs with
	   * // type-annotated parameters:
	   * $stateProvider.state('users', {
	   *   url: "/users",
	   *   // ...
	   * }).state('users.item', {
	   *   url: "/{user:dbObject}",
	   *   controller: function($scope, $stateParams) {
	   *     // $stateParams.user will now be an object returned from
	   *     // the Users service
	   *   },
	   *   // ...
	   * });
	   * </pre>
	   */
	  this.type = function (name, definition, definitionFn) {
	    if (!isDefined(definition)) return $types[name];
	    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

	    $types[name] = new Type(extend({ name: name }, definition));
	    if (definitionFn) {
	      typeQueue.push({ name: name, def: definitionFn });
	      if (!enqueue) flushTypeQueue();
	    }
	    return this;
	  };

	  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
	  function flushTypeQueue() {
	    while(typeQueue.length) {
	      var type = typeQueue.shift();
	      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
	      angular.extend($types[type.name], injector.invoke(type.def));
	    }
	  }

	  // Register default types. Store them in the prototype of $types.
	  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
	  $types = inherit($types, {});

	  /* No need to document $get, since it returns this */
	  this.$get = ['$injector', function ($injector) {
	    injector = $injector;
	    enqueue = false;
	    flushTypeQueue();

	    forEach(defaultTypes, function(type, name) {
	      if (!$types[name]) $types[name] = new Type(type);
	    });
	    return this;
	  }];

	  this.Param = function Param(id, type, config, location) {
	    var self = this;
	    config = unwrapShorthand(config);
	    type = getType(config, type, location);
	    var arrayMode = getArrayMode();
	    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
	    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
	      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
	    var isOptional = config.value !== undefined;
	    var squash = getSquashPolicy(config, isOptional);
	    var replace = getReplace(config, arrayMode, isOptional, squash);

	    function unwrapShorthand(config) {
	      var keys = isObject(config) ? objectKeys(config) : [];
	      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
	                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
	      if (isShorthand) config = { value: config };
	      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
	      return config;
	    }

	    function getType(config, urlType, location) {
	      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
	      if (urlType) return urlType;
	      if (!config.type) return (location === "config" ? $types.any : $types.string);
	      return config.type instanceof Type ? config.type : new Type(config.type);
	    }

	    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
	    function getArrayMode() {
	      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
	      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
	      return extend(arrayDefaults, arrayParamNomenclature, config).array;
	    }

	    /**
	     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
	     */
	    function getSquashPolicy(config, isOptional) {
	      var squash = config.squash;
	      if (!isOptional || squash === false) return false;
	      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
	      if (squash === true || isString(squash)) return squash;
	      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
	    }

	    function getReplace(config, arrayMode, isOptional, squash) {
	      var replace, configuredKeys, defaultPolicy = [
	        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
	        { from: null, to: (isOptional || arrayMode ? undefined : "") }
	      ];
	      replace = isArray(config.replace) ? config.replace : [];
	      if (isString(squash))
	        replace.push({ from: squash, to: undefined });
	      configuredKeys = map(replace, function(item) { return item.from; } );
	      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
	    }

	    /**
	     * [Internal] Get the default value of a parameter, which may be an injectable function.
	     */
	    function $$getDefaultValue() {
	      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
	      return injector.invoke(config.$$fn);
	    }

	    /**
	     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
	     * default value, which may be the result of an injectable function.
	     */
	    function $value(value) {
	      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
	      function $replace(value) {
	        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
	        return replacement.length ? replacement[0] : value;
	      }
	      value = $replace(value);
	      return isDefined(value) ? self.type.decode(value) : $$getDefaultValue();
	    }

	    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

	    extend(this, {
	      id: id,
	      type: type,
	      location: location,
	      array: arrayMode,
	      squash: squash,
	      replace: replace,
	      isOptional: isOptional,
	      value: $value,
	      dynamic: undefined,
	      config: config,
	      toString: toString
	    });
	  };

	  function ParamSet(params) {
	    extend(this, params || {});
	  }

	  ParamSet.prototype = {
	    $$new: function() {
	      return inherit(this, extend(new ParamSet(), { $$parent: this}));
	    },
	    $$keys: function () {
	      var keys = [], chain = [], parent = this,
	        ignore = objectKeys(ParamSet.prototype);
	      while (parent) { chain.push(parent); parent = parent.$$parent; }
	      chain.reverse();
	      forEach(chain, function(paramset) {
	        forEach(objectKeys(paramset), function(key) {
	            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
	        });
	      });
	      return keys;
	    },
	    $$values: function(paramValues) {
	      var values = {}, self = this;
	      forEach(self.$$keys(), function(key) {
	        values[key] = self[key].value(paramValues && paramValues[key]);
	      });
	      return values;
	    },
	    $$equals: function(paramValues1, paramValues2) {
	      var equal = true, self = this;
	      forEach(self.$$keys(), function(key) {
	        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
	        if (!self[key].type.equals(left, right)) equal = false;
	      });
	      return equal;
	    },
	    $$validates: function $$validate(paramValues) {
	      var result = true, isOptional, val, param, self = this;

	      forEach(this.$$keys(), function(key) {
	        param = self[key];
	        val = paramValues[key];
	        isOptional = !val && param.isOptional;
	        result = result && (isOptional || !!param.type.is(val));
	      });
	      return result;
	    },
	    $$parent: undefined
	  };

	  this.ParamSet = ParamSet;
	}

	// Register as a provider so it's available to other providers
	angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
	angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

	/**
	 * @ngdoc object
	 * @name ui.router.router.$urlRouterProvider
	 *
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 * @requires $locationProvider
	 *
	 * @description
	 * `$urlRouterProvider` has the responsibility of watching `$location`. 
	 * When `$location` changes it runs through a list of rules one by one until a 
	 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
	 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
	 *
	 * There are several methods on `$urlRouterProvider` that make it useful to use directly
	 * in your module config.
	 */
	$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
	function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
	  var rules = [], otherwise = null, interceptDeferred = false, listener;

	  // Returns a string that is a prefix of all strings matching the RegExp
	  function regExpPrefix(re) {
	    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
	    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
	  }

	  // Interpolates matched values into a String.replace()-style pattern
	  function interpolate(pattern, match) {
	    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
	      return match[what === '$' ? 0 : Number(what)];
	    });
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#rule
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Defines rules that are used by `$urlRouterProvider` to find matches for
	   * specific URLs.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   // Here's an example of how you might allow case insensitive urls
	   *   $urlRouterProvider.rule(function ($injector, $location) {
	   *     var path = $location.path(),
	   *         normalized = path.toLowerCase();
	   *
	   *     if (path !== normalized) {
	   *       return normalized;
	   *     }
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {object} rule Handler function that takes `$injector` and `$location`
	   * services as arguments. You can use them to return a valid path as a string.
	   *
	   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	   */
	  this.rule = function (rule) {
	    if (!isFunction(rule)) throw new Error("'rule' must be a function");
	    rules.push(rule);
	    return this;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouterProvider#otherwise
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Defines a path that is used when an invalid route is requested.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   // if the path doesn't match any of the urls you configured
	   *   // otherwise will take care of routing the user to the
	   *   // specified url
	   *   $urlRouterProvider.otherwise('/index');
	   *
	   *   // Example of using function rule as param
	   *   $urlRouterProvider.otherwise(function ($injector, $location) {
	   *     return '/a/valid/url';
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {string|object} rule The url path you want to redirect to or a function 
	   * rule that returns the url path. The function version is passed two params: 
	   * `$injector` and `$location` services, and must return a url string.
	   *
	   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
	   */
	  this.otherwise = function (rule) {
	    if (isString(rule)) {
	      var redirect = rule;
	      rule = function () { return redirect; };
	    }
	    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
	    otherwise = rule;
	    return this;
	  };


	  function handleIfMatch($injector, handler, match) {
	    if (!match) return false;
	    var result = $injector.invoke(handler, handler, { $match: match });
	    return isDefined(result) ? result : true;
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#when
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Registers a handler for a given url matching. if handle is a string, it is
	   * treated as a redirect, and is interpolated according to the syntax of match
	   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
	   *
	   * If the handler is a function, it is injectable. It gets invoked if `$location`
	   * matches. You have the option of inject the match object as `$match`.
	   *
	   * The handler can return
	   *
	   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
	   *   will continue trying to find another one that matches.
	   * - **string** which is treated as a redirect and passed to `$location.url()`
	   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
	   *     if ($state.$current.navigable !== state ||
	   *         !equalForKeys($match, $stateParams) {
	   *      $state.transitionTo(state, $match, false);
	   *     }
	   *   });
	   * });
	   * </pre>
	   *
	   * @param {string|object} what The incoming path that you want to redirect.
	   * @param {string|object} handler The path you want to redirect your user to.
	   */
	  this.when = function (what, handler) {
	    var redirect, handlerIsString = isString(handler);
	    if (isString(what)) what = $urlMatcherFactory.compile(what);

	    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
	      throw new Error("invalid 'handler' in when()");

	    var strategies = {
	      matcher: function (what, handler) {
	        if (handlerIsString) {
	          redirect = $urlMatcherFactory.compile(handler);
	          handler = ['$match', function ($match) { return redirect.format($match); }];
	        }
	        return extend(function ($injector, $location) {
	          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
	        }, {
	          prefix: isString(what.prefix) ? what.prefix : ''
	        });
	      },
	      regex: function (what, handler) {
	        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

	        if (handlerIsString) {
	          redirect = handler;
	          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
	        }
	        return extend(function ($injector, $location) {
	          return handleIfMatch($injector, handler, what.exec($location.path()));
	        }, {
	          prefix: regExpPrefix(what)
	        });
	      }
	    };

	    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

	    for (var n in check) {
	      if (check[n]) return this.rule(strategies[n](what, handler));
	    }

	    throw new Error("invalid 'what' in when()");
	  };

	  /**
	   * @ngdoc function
	   * @name ui.router.router.$urlRouterProvider#deferIntercept
	   * @methodOf ui.router.router.$urlRouterProvider
	   *
	   * @description
	   * Disables (or enables) deferring location change interception.
	   *
	   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
	   * defer a transition but maintain the current URL), call this method at configuration time.
	   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
	   * `$locationChangeSuccess` event handler.
	   *
	   * @example
	   * <pre>
	   * var app = angular.module('app', ['ui.router.router']);
	   *
	   * app.config(function ($urlRouterProvider) {
	   *
	   *   // Prevent $urlRouter from automatically intercepting URL changes;
	   *   // this allows you to configure custom behavior in between
	   *   // location changes and route synchronization:
	   *   $urlRouterProvider.deferIntercept();
	   *
	   * }).run(function ($rootScope, $urlRouter, UserService) {
	   *
	   *   $rootScope.$on('$locationChangeSuccess', function(e) {
	   *     // UserService is an example service for managing user state
	   *     if (UserService.isLoggedIn()) return;
	   *
	   *     // Prevent $urlRouter's default handler from firing
	   *     e.preventDefault();
	   *
	   *     UserService.handleLogin().then(function() {
	   *       // Once the user has logged in, sync the current URL
	   *       // to the router:
	   *       $urlRouter.sync();
	   *     });
	   *   });
	   *
	   *   // Configures $urlRouter's listener *after* your custom listener
	   *   $urlRouter.listen();
	   * });
	   * </pre>
	   *
	   * @param {boolean} defer Indicates whether to defer location change interception. Passing
	            no parameter is equivalent to `true`.
	   */
	  this.deferIntercept = function (defer) {
	    if (defer === undefined) defer = true;
	    interceptDeferred = defer;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.router.$urlRouter
	   *
	   * @requires $location
	   * @requires $rootScope
	   * @requires $injector
	   * @requires $browser
	   *
	   * @description
	   *
	   */
	  this.$get = $get;
	  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];
	  function $get(   $location,   $rootScope,   $injector,   $browser) {

	    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

	    function appendBasePath(url, isHtml5, absolute) {
	      if (baseHref === '/') return url;
	      if (isHtml5) return baseHref.slice(0, -1) + url;
	      if (absolute) return baseHref.slice(1) + url;
	      return url;
	    }

	    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
	    function update(evt) {
	      if (evt && evt.defaultPrevented) return;
	      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
	      lastPushedUrl = undefined;
	      if (ignoreUpdate) return true;

	      function check(rule) {
	        var handled = rule($injector, $location);

	        if (!handled) return false;
	        if (isString(handled)) $location.replace().url(handled);
	        return true;
	      }
	      var n = rules.length, i;

	      for (i = 0; i < n; i++) {
	        if (check(rules[i])) return;
	      }
	      // always check otherwise last to allow dynamic updates to the set of rules
	      if (otherwise) check(otherwise);
	    }

	    function listen() {
	      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
	      return listener;
	    }

	    if (!interceptDeferred) listen();

	    return {
	      /**
	       * @ngdoc function
	       * @name ui.router.router.$urlRouter#sync
	       * @methodOf ui.router.router.$urlRouter
	       *
	       * @description
	       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
	       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
	       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
	       * with the transition by calling `$urlRouter.sync()`.
	       *
	       * @example
	       * <pre>
	       * angular.module('app', ['ui.router'])
	       *   .run(function($rootScope, $urlRouter) {
	       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
	       *       // Halt state change from even starting
	       *       evt.preventDefault();
	       *       // Perform custom logic
	       *       var meetsRequirement = ...
	       *       // Continue with the update and state transition if logic allows
	       *       if (meetsRequirement) $urlRouter.sync();
	       *     });
	       * });
	       * </pre>
	       */
	      sync: function() {
	        update();
	      },

	      listen: function() {
	        return listen();
	      },

	      update: function(read) {
	        if (read) {
	          location = $location.url();
	          return;
	        }
	        if ($location.url() === location) return;

	        $location.url(location);
	        $location.replace();
	      },

	      push: function(urlMatcher, params, options) {
	        $location.url(urlMatcher.format(params || {}));
	        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
	        if (options && options.replace) $location.replace();
	      },

	      /**
	       * @ngdoc function
	       * @name ui.router.router.$urlRouter#href
	       * @methodOf ui.router.router.$urlRouter
	       *
	       * @description
	       * A URL generation method that returns the compiled URL for a given
	       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
	       *
	       * @example
	       * <pre>
	       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
	       *   person: "bob"
	       * });
	       * // $bob == "/about/bob";
	       * </pre>
	       *
	       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
	       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
	       * @param {object=} options Options object. The options are:
	       *
	       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	       *
	       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
	       */
	      href: function(urlMatcher, params, options) {
	        if (!urlMatcher.validates(params)) return null;

	        var isHtml5 = $locationProvider.html5Mode();
	        if (angular.isObject(isHtml5)) {
	          isHtml5 = isHtml5.enabled;
	        }
	        
	        var url = urlMatcher.format(params);
	        options = options || {};

	        if (!isHtml5 && url !== null) {
	          url = "#" + $locationProvider.hashPrefix() + url;
	        }
	        url = appendBasePath(url, isHtml5, options.absolute);

	        if (!options.absolute || !url) {
	          return url;
	        }

	        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
	        port = (port === 80 || port === 443 ? '' : ':' + port);

	        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
	      }
	    };
	  }
	}

	angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$stateProvider
	 *
	 * @requires ui.router.router.$urlRouterProvider
	 * @requires ui.router.util.$urlMatcherFactoryProvider
	 *
	 * @description
	 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
	 * on state.
	 *
	 * A state corresponds to a "place" in the application in terms of the overall UI and
	 * navigation. A state describes (via the controller / template / view properties) what
	 * the UI looks like and does at that place.
	 *
	 * States often have things in common, and the primary way of factoring out these
	 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
	 * nested states.
	 *
	 * The `$stateProvider` provides interfaces to declare these states for your app.
	 */
	$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
	function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

	  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

	  // Builds state properties from definition passed to registerState()
	  var stateBuilder = {

	    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
	    // state.children = [];
	    // if (parent) parent.children.push(state);
	    parent: function(state) {
	      if (isDefined(state.parent) && state.parent) return findState(state.parent);
	      // regex matches any valid composite state name
	      // would match "contact.list" but not "contacts"
	      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
	      return compositeName ? findState(compositeName[1]) : root;
	    },

	    // inherit 'data' from parent and override by own values (if any)
	    data: function(state) {
	      if (state.parent && state.parent.data) {
	        state.data = state.self.data = extend({}, state.parent.data, state.data);
	      }
	      return state.data;
	    },

	    // Build a URLMatcher if necessary, either via a relative or absolute URL
	    url: function(state) {
	      var url = state.url, config = { params: state.params || {} };

	      if (isString(url)) {
	        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
	        return (state.parent.navigable || root).url.concat(url, config);
	      }

	      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
	      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
	    },

	    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
	    navigable: function(state) {
	      return state.url ? state : (state.parent ? state.parent.navigable : null);
	    },

	    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
	    ownParams: function(state) {
	      var params = state.url && state.url.params || new $$UMFP.ParamSet();
	      forEach(state.params || {}, function(config, id) {
	        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
	      });
	      return params;
	    },

	    // Derive parameters for this state and ensure they're a super-set of parent's parameters
	    params: function(state) {
	      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
	    },

	    // If there is no explicit multi-view configuration, make one up so we don't have
	    // to handle both cases in the view directive later. Note that having an explicit
	    // 'views' property will mean the default unnamed view properties are ignored. This
	    // is also a good time to resolve view names to absolute names, so everything is a
	    // straight lookup at link time.
	    views: function(state) {
	      var views = {};

	      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
	        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
	        views[name] = view;
	      });
	      return views;
	    },

	    // Keep a full path from the root down to this state as this is needed for state activation.
	    path: function(state) {
	      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
	    },

	    // Speed up $state.contains() as it's used a lot
	    includes: function(state) {
	      var includes = state.parent ? extend({}, state.parent.includes) : {};
	      includes[state.name] = true;
	      return includes;
	    },

	    $delegates: {}
	  };

	  function isRelative(stateName) {
	    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
	  }

	  function findState(stateOrName, base) {
	    if (!stateOrName) return undefined;

	    var isStr = isString(stateOrName),
	        name  = isStr ? stateOrName : stateOrName.name,
	        path  = isRelative(name);

	    if (path) {
	      if (!base) throw new Error("No reference point given for path '"  + name + "'");
	      base = findState(base);
	      
	      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

	      for (; i < pathLength; i++) {
	        if (rel[i] === "" && i === 0) {
	          current = base;
	          continue;
	        }
	        if (rel[i] === "^") {
	          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
	          current = current.parent;
	          continue;
	        }
	        break;
	      }
	      rel = rel.slice(i).join(".");
	      name = current.name + (current.name && rel ? "." : "") + rel;
	    }
	    var state = states[name];

	    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
	      return state;
	    }
	    return undefined;
	  }

	  function queueState(parentName, state) {
	    if (!queue[parentName]) {
	      queue[parentName] = [];
	    }
	    queue[parentName].push(state);
	  }

	  function flushQueuedChildren(parentName) {
	    var queued = queue[parentName] || [];
	    while(queued.length) {
	      registerState(queued.shift());
	    }
	  }

	  function registerState(state) {
	    // Wrap a new object around the state so we can store our private details easily.
	    state = inherit(state, {
	      self: state,
	      resolve: state.resolve || {},
	      toString: function() { return this.name; }
	    });

	    var name = state.name;
	    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
	    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

	    // Get parent name
	    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
	        : (isString(state.parent)) ? state.parent
	        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
	        : '';

	    // If parent is not registered yet, add state to queue and register later
	    if (parentName && !states[parentName]) {
	      return queueState(parentName, state.self);
	    }

	    for (var key in stateBuilder) {
	      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
	    }
	    states[name] = state;

	    // Register the state in the global state list and with $urlRouter if necessary.
	    if (!state[abstractKey] && state.url) {
	      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
	        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
	          $state.transitionTo(state, $match, { inherit: true, location: false });
	        }
	      }]);
	    }

	    // Register any queued children
	    flushQueuedChildren(name);

	    return state;
	  }

	  // Checks text to see if it looks like a glob.
	  function isGlob (text) {
	    return text.indexOf('*') > -1;
	  }

	  // Returns true if glob matches current $state name.
	  function doesStateMatchGlob (glob) {
	    var globSegments = glob.split('.'),
	        segments = $state.$current.name.split('.');

	    //match greedy starts
	    if (globSegments[0] === '**') {
	       segments = segments.slice(indexOf(segments, globSegments[1]));
	       segments.unshift('**');
	    }
	    //match greedy ends
	    if (globSegments[globSegments.length - 1] === '**') {
	       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
	       segments.push('**');
	    }

	    if (globSegments.length != segments.length) {
	      return false;
	    }

	    //match single stars
	    for (var i = 0, l = globSegments.length; i < l; i++) {
	      if (globSegments[i] === '*') {
	        segments[i] = '*';
	      }
	    }

	    return segments.join('') === globSegments.join('');
	  }


	  // Implicit root state that is always active
	  root = registerState({
	    name: '',
	    url: '^',
	    views: null,
	    'abstract': true
	  });
	  root.navigable = null;


	  /**
	   * @ngdoc function
	   * @name ui.router.state.$stateProvider#decorator
	   * @methodOf ui.router.state.$stateProvider
	   *
	   * @description
	   * Allows you to extend (carefully) or override (at your own peril) the 
	   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
	   * to add custom functionality to ui-router, for example inferring templateUrl 
	   * based on the state name.
	   *
	   * When passing only a name, it returns the current (original or decorated) builder
	   * function that matches `name`.
	   *
	   * The builder functions that can be decorated are listed below. Though not all
	   * necessarily have a good use case for decoration, that is up to you to decide.
	   *
	   * In addition, users can attach custom decorators, which will generate new 
	   * properties within the state's internal definition. There is currently no clear 
	   * use-case for this beyond accessing internal states (i.e. $state.$current), 
	   * however, expect this to become increasingly relevant as we introduce additional 
	   * meta-programming features.
	   *
	   * **Warning**: Decorators should not be interdependent because the order of 
	   * execution of the builder functions in non-deterministic. Builder functions 
	   * should only be dependent on the state definition object and super function.
	   *
	   *
	   * Existing builder functions and current return values:
	   *
	   * - **parent** `{object}` - returns the parent state object.
	   * - **data** `{object}` - returns state data, including any inherited data that is not
	   *   overridden by own values (if any).
	   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
	   *   or `null`.
	   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
	   *   navigable).
	   * - **params** `{object}` - returns an array of state params that are ensured to 
	   *   be a super-set of parent's params.
	   * - **views** `{object}` - returns a views object where each key is an absolute view 
	   *   name (i.e. "viewName@stateName") and each value is the config object 
	   *   (template, controller) for the view. Even when you don't use the views object 
	   *   explicitly on a state config, one is still created for you internally.
	   *   So by decorating this builder function you have access to decorating template 
	   *   and controller properties.
	   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
	   *   not including any params defined by ancestor states.
	   * - **path** `{string}` - returns the full path from the root down to this state. 
	   *   Needed for state activation.
	   * - **includes** `{object}` - returns an object that includes every state that 
	   *   would pass a `$state.includes()` test.
	   *
	   * @example
	   * <pre>
	   * // Override the internal 'views' builder with a function that takes the state
	   * // definition, and a reference to the internal function being overridden:
	   * $stateProvider.decorator('views', function (state, parent) {
	   *   var result = {},
	   *       views = parent(state);
	   *
	   *   angular.forEach(views, function (config, name) {
	   *     var autoName = (state.name + '.' + name).replace('.', '/');
	   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
	   *     result[name] = config;
	   *   });
	   *   return result;
	   * });
	   *
	   * $stateProvider.state('home', {
	   *   views: {
	   *     'contact.list': { controller: 'ListController' },
	   *     'contact.item': { controller: 'ItemController' }
	   *   }
	   * });
	   *
	   * // ...
	   *
	   * $state.go('home');
	   * // Auto-populates list and item views with /partials/home/contact/list.html,
	   * // and /partials/home/contact/item.html, respectively.
	   * </pre>
	   *
	   * @param {string} name The name of the builder function to decorate. 
	   * @param {object} func A function that is responsible for decorating the original 
	   * builder function. The function receives two parameters:
	   *
	   *   - `{object}` - state - The state config object.
	   *   - `{object}` - super - The original builder function.
	   *
	   * @return {object} $stateProvider - $stateProvider instance
	   */
	  this.decorator = decorator;
	  function decorator(name, func) {
	    /*jshint validthis: true */
	    if (isString(name) && !isDefined(func)) {
	      return stateBuilder[name];
	    }
	    if (!isFunction(func) || !isString(name)) {
	      return this;
	    }
	    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
	      stateBuilder.$delegates[name] = stateBuilder[name];
	    }
	    stateBuilder[name] = func;
	    return this;
	  }

	  /**
	   * @ngdoc function
	   * @name ui.router.state.$stateProvider#state
	   * @methodOf ui.router.state.$stateProvider
	   *
	   * @description
	   * Registers a state configuration under a given state name. The stateConfig object
	   * has the following acceptable properties.
	   *
	   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
	   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
	   * @param {object} stateConfig State configuration object.
	   * @param {string|function=} stateConfig.template
	   * <a id='template'></a>
	   *   html template as a string or a function that returns
	   *   an html template as a string which should be used by the uiView directives. This property 
	   *   takes precedence over templateUrl.
	   *   
	   *   If `template` is a function, it will be called with the following parameters:
	   *
	   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
	   *     applying the current state
	   *
	   * <pre>template:
	   *   "<h1>inline template definition</h1>" +
	   *   "<div ui-view></div>"</pre>
	   * <pre>template: function(params) {
	   *       return "<h1>generated template</h1>"; }</pre>
	   * </div>
	   *
	   * @param {string|function=} stateConfig.templateUrl
	   * <a id='templateUrl'></a>
	   *
	   *   path or function that returns a path to an html
	   *   template that should be used by uiView.
	   *   
	   *   If `templateUrl` is a function, it will be called with the following parameters:
	   *
	   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
	   *     applying the current state
	   *
	   * <pre>templateUrl: "home.html"</pre>
	   * <pre>templateUrl: function(params) {
	   *     return myTemplates[params.pageId]; }</pre>
	   *
	   * @param {function=} stateConfig.templateProvider
	   * <a id='templateProvider'></a>
	   *    Provider function that returns HTML content string.
	   * <pre> templateProvider:
	   *       function(MyTemplateService, params) {
	   *         return MyTemplateService.getTemplate(params.pageId);
	   *       }</pre>
	   *
	   * @param {string|function=} stateConfig.controller
	   * <a id='controller'></a>
	   *
	   *  Controller fn that should be associated with newly
	   *   related scope or the name of a registered controller if passed as a string.
	   *   Optionally, the ControllerAs may be declared here.
	   * <pre>controller: "MyRegisteredController"</pre>
	   * <pre>controller:
	   *     "MyRegisteredController as fooCtrl"}</pre>
	   * <pre>controller: function($scope, MyService) {
	   *     $scope.data = MyService.getData(); }</pre>
	   *
	   * @param {function=} stateConfig.controllerProvider
	   * <a id='controllerProvider'></a>
	   *
	   * Injectable provider function that returns the actual controller or string.
	   * <pre>controllerProvider:
	   *   function(MyResolveData) {
	   *     if (MyResolveData.foo)
	   *       return "FooCtrl"
	   *     else if (MyResolveData.bar)
	   *       return "BarCtrl";
	   *     else return function($scope) {
	   *       $scope.baz = "Qux";
	   *     }
	   *   }</pre>
	   *
	   * @param {string=} stateConfig.controllerAs
	   * <a id='controllerAs'></a>
	   * 
	   * A controller alias name. If present the controller will be
	   *   published to scope under the controllerAs name.
	   * <pre>controllerAs: "myCtrl"</pre>
	   *
	   * @param {object=} stateConfig.resolve
	   * <a id='resolve'></a>
	   *
	   * An optional map&lt;string, function&gt; of dependencies which
	   *   should be injected into the controller. If any of these dependencies are promises, 
	   *   the router will wait for them all to be resolved before the controller is instantiated.
	   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
	   *   and the values of the resolved promises are injected into any controllers that reference them.
	   *   If any  of the promises are rejected the $stateChangeError event is fired.
	   *
	   *   The map object is:
	   *   
	   *   - key - {string}: name of dependency to be injected into controller
	   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
	   *     it is injected and return value it treated as dependency. If result is a promise, it is 
	   *     resolved before its value is injected into controller.
	   *
	   * <pre>resolve: {
	   *     myResolve1:
	   *       function($http, $stateParams) {
	   *         return $http.get("/api/foos/"+stateParams.fooID);
	   *       }
	   *     }</pre>
	   *
	   * @param {string=} stateConfig.url
	   * <a id='url'></a>
	   *
	   *   A url fragment with optional parameters. When a state is navigated or
	   *   transitioned to, the `$stateParams` service will be populated with any 
	   *   parameters that were passed.
	   *
	   * examples:
	   * <pre>url: "/home"
	   * url: "/users/:userid"
	   * url: "/books/{bookid:[a-zA-Z_-]}"
	   * url: "/books/{categoryid:int}"
	   * url: "/books/{publishername:string}/{categoryid:int}"
	   * url: "/messages?before&after"
	   * url: "/messages?{before:date}&{after:date}"</pre>
	   * url: "/messages/:mailboxid?{before:date}&{after:date}"
	   *
	   * @param {object=} stateConfig.views
	   * <a id='views'></a>
	   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
	   * manually/explicitly.
	   *
	   * Examples:
	   *
	   * Targets three named `ui-view`s in the parent state's template
	   * <pre>views: {
	   *     header: {
	   *       controller: "headerCtrl",
	   *       templateUrl: "header.html"
	   *     }, body: {
	   *       controller: "bodyCtrl",
	   *       templateUrl: "body.html"
	   *     }, footer: {
	   *       controller: "footCtrl",
	   *       templateUrl: "footer.html"
	   *     }
	   *   }</pre>
	   *
	   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
	   * <pre>views: {
	   *     'header@top': {
	   *       controller: "msgHeaderCtrl",
	   *       templateUrl: "msgHeader.html"
	   *     }, 'body': {
	   *       controller: "messagesCtrl",
	   *       templateUrl: "messages.html"
	   *     }
	   *   }</pre>
	   *
	   * @param {boolean=} [stateConfig.abstract=false]
	   * <a id='abstract'></a>
	   * An abstract state will never be directly activated,
	   *   but can provide inherited properties to its common children states.
	   * <pre>abstract: true</pre>
	   *
	   * @param {function=} stateConfig.onEnter
	   * <a id='onEnter'></a>
	   *
	   * Callback function for when a state is entered. Good way
	   *   to trigger an action or dispatch an event, such as opening a dialog.
	   * If minifying your scripts, make sure to explictly annotate this function,
	   * because it won't be automatically annotated by your build tools.
	   *
	   * <pre>onEnter: function(MyService, $stateParams) {
	   *     MyService.foo($stateParams.myParam);
	   * }</pre>
	   *
	   * @param {function=} stateConfig.onExit
	   * <a id='onExit'></a>
	   *
	   * Callback function for when a state is exited. Good way to
	   *   trigger an action or dispatch an event, such as opening a dialog.
	   * If minifying your scripts, make sure to explictly annotate this function,
	   * because it won't be automatically annotated by your build tools.
	   *
	   * <pre>onExit: function(MyService, $stateParams) {
	   *     MyService.cleanup($stateParams.myParam);
	   * }</pre>
	   *
	   * @param {boolean=} [stateConfig.reloadOnSearch=true]
	   * <a id='reloadOnSearch'></a>
	   *
	   * If `false`, will not retrigger the same state
	   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
	   *   Useful for when you'd like to modify $location.search() without triggering a reload.
	   * <pre>reloadOnSearch: false</pre>
	   *
	   * @param {object=} stateConfig.data
	   * <a id='data'></a>
	   *
	   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
	   *   prototypally inherited.  In other words, adding a data property to a state adds it to
	   *   the entire subtree via prototypal inheritance.
	   *
	   * <pre>data: {
	   *     requiredRole: 'foo'
	   * } </pre>
	   *
	   * @param {object=} stateConfig.params
	   * <a id='params'></a>
	   *
	   * A map which optionally configures parameters declared in the `url`, or
	   *   defines additional non-url parameters.  For each parameter being
	   *   configured, add a configuration object keyed to the name of the parameter.
	   *
	   *   Each parameter configuration object may contain the following properties:
	   *
	   *   - ** value ** - {object|function=}: specifies the default value for this
	   *     parameter.  This implicitly sets this parameter as optional.
	   *
	   *     When UI-Router routes to a state and no value is
	   *     specified for this parameter in the URL or transition, the
	   *     default value will be used instead.  If `value` is a function,
	   *     it will be injected and invoked, and the return value used.
	   *
	   *     *Note*: `undefined` is treated as "no default value" while `null`
	   *     is treated as "the default value is `null`".
	   *
	   *     *Shorthand*: If you only need to configure the default value of the
	   *     parameter, you may use a shorthand syntax.   In the **`params`**
	   *     map, instead mapping the param name to a full parameter configuration
	   *     object, simply set map it to the default parameter value, e.g.:
	   *
	   * <pre>// define a parameter's default value
	   * params: {
	   *     param1: { value: "defaultValue" }
	   * }
	   * // shorthand default values
	   * params: {
	   *     param1: "defaultValue",
	   *     param2: "param2Default"
	   * }</pre>
	   *
	   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
	   *     treated as an array of values.  If you specified a Type, the value will be
	   *     treated as an array of the specified Type.  Note: query parameter values
	   *     default to a special `"auto"` mode.
	   *
	   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
	   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
	   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
	   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
	   *     value (e.g.: `{ foo: '1' }`).
	   *
	   * <pre>params: {
	   *     param1: { array: true }
	   * }</pre>
	   *
	   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
	   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
	   *     configured default squash policy.
	   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
	   *
	   *   There are three squash settings:
	   *
	   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
	   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
	   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
	   *       This can allow for cleaner looking URLs.
	   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
	   *
	   * <pre>params: {
	   *     param1: {
	   *       value: "defaultId",
	   *       squash: true
	   * } }
	   * // squash "defaultValue" to "~"
	   * params: {
	   *     param1: {
	   *       value: "defaultValue",
	   *       squash: "~"
	   * } }
	   * </pre>
	   *
	   *
	   * @example
	   * <pre>
	   * // Some state name examples
	   *
	   * // stateName can be a single top-level name (must be unique).
	   * $stateProvider.state("home", {});
	   *
	   * // Or it can be a nested state name. This state is a child of the
	   * // above "home" state.
	   * $stateProvider.state("home.newest", {});
	   *
	   * // Nest states as deeply as needed.
	   * $stateProvider.state("home.newest.abc.xyz.inception", {});
	   *
	   * // state() returns $stateProvider, so you can chain state declarations.
	   * $stateProvider
	   *   .state("home", {})
	   *   .state("about", {})
	   *   .state("contacts", {});
	   * </pre>
	   *
	   */
	  this.state = state;
	  function state(name, definition) {
	    /*jshint validthis: true */
	    if (isObject(name)) definition = name;
	    else definition.name = name;
	    registerState(definition);
	    return this;
	  }

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$state
	   *
	   * @requires $rootScope
	   * @requires $q
	   * @requires ui.router.state.$view
	   * @requires $injector
	   * @requires ui.router.util.$resolve
	   * @requires ui.router.state.$stateParams
	   * @requires ui.router.router.$urlRouter
	   *
	   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
	   * you'd like to test against the current active state.
	   * @property {object} current A reference to the state's config object. However 
	   * you passed it in. Useful for accessing custom data.
	   * @property {object} transition Currently pending transition. A promise that'll 
	   * resolve or reject.
	   *
	   * @description
	   * `$state` service is responsible for representing states as well as transitioning
	   * between them. It also provides interfaces to ask for current state or even states
	   * you're coming from.
	   */
	  this.$get = $get;
	  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
	  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

	    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
	    var TransitionPrevented = $q.reject(new Error('transition prevented'));
	    var TransitionAborted = $q.reject(new Error('transition aborted'));
	    var TransitionFailed = $q.reject(new Error('transition failed'));

	    // Handles the case where a state which is the target of a transition is not found, and the user
	    // can optionally retry or defer the transition
	    function handleRedirect(redirect, state, params, options) {
	      /**
	       * @ngdoc event
	       * @name ui.router.state.$state#$stateNotFound
	       * @eventOf ui.router.state.$state
	       * @eventType broadcast on root scope
	       * @description
	       * Fired when a requested state **cannot be found** using the provided state name during transition.
	       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
	       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
	       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
	       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
	       *
	       * @param {Object} event Event object.
	       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
	       * @param {State} fromState Current state object.
	       * @param {Object} fromParams Current state params.
	       *
	       * @example
	       *
	       * <pre>
	       * // somewhere, assume lazy.state has not been defined
	       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
	       *
	       * // somewhere else
	       * $scope.$on('$stateNotFound',
	       * function(event, unfoundState, fromState, fromParams){
	       *     console.log(unfoundState.to); // "lazy.state"
	       *     console.log(unfoundState.toParams); // {a:1, b:2}
	       *     console.log(unfoundState.options); // {inherit:false} + default options
	       * })
	       * </pre>
	       */
	      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

	      if (evt.defaultPrevented) {
	        $urlRouter.update();
	        return TransitionAborted;
	      }

	      if (!evt.retry) {
	        return null;
	      }

	      // Allow the handler to return a promise to defer state lookup retry
	      if (options.$retry) {
	        $urlRouter.update();
	        return TransitionFailed;
	      }
	      var retryTransition = $state.transition = $q.when(evt.retry);

	      retryTransition.then(function() {
	        if (retryTransition !== $state.transition) return TransitionSuperseded;
	        redirect.options.$retry = true;
	        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
	      }, function() {
	        return TransitionAborted;
	      });
	      $urlRouter.update();

	      return retryTransition;
	    }

	    root.locals = { resolve: null, globals: { $stateParams: {} } };

	    $state = {
	      params: {},
	      current: root.self,
	      $current: root,
	      transition: null
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#reload
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired, 
	     * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
	     *
	     * @example
	     * <pre>
	     * var app angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.reload = function(){
	     *     $state.reload();
	     *   }
	     * });
	     * </pre>
	     *
	     * `reload()` is just an alias for:
	     * <pre>
	     * $state.transitionTo($state.current, $stateParams, { 
	     *   reload: true, inherit: false, notify: true
	     * });
	     * </pre>
	     *
	     * @returns {promise} A promise representing the state of the new transition. See
	     * {@link ui.router.state.$state#methods_go $state.go}.
	     */
	    $state.reload = function reload() {
	      return $state.transitionTo($state.current, $stateParams, { reload: true, inherit: false, notify: true });
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#go
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Convenience method for transitioning to a new state. `$state.go` calls 
	     * `$state.transitionTo` internally but automatically sets options to 
	     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
	     * This allows you to easily use an absolute or relative to path and specify 
	     * only the parameters you'd like to update (while letting unspecified parameters 
	     * inherit from the currently active ancestor states).
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.go('contact.detail');
	     *   };
	     * });
	     * </pre>
	     * <img src='../ngdoc_assets/StateGoExamples.png'/>
	     *
	     * @param {string} to Absolute state name or relative state path. Some examples:
	     *
	     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
	     * - `$state.go('^')` - will go to a parent state
	     * - `$state.go('^.sibling')` - will go to a sibling state
	     * - `$state.go('.child.grandchild')` - will go to grandchild state
	     *
	     * @param {object=} params A map of the parameters that will be sent to the state, 
	     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
	     * defined parameters. This allows, for example, going to a sibling state that shares parameters
	     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
	     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
	     * will get you all current parameters, etc.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
	     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
	     *    use this when you want to force a reload when *everything* is the same, including search params.
	     *
	     * @returns {promise} A promise representing the state of the new transition.
	     *
	     * Possible success values:
	     *
	     * - $state.current
	     *
	     * <br/>Possible rejection values:
	     *
	     * - 'transition superseded' - when a newer transition has been started after this one
	     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
	     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
	     *   when a `$stateNotFound` `event.retry` promise errors.
	     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
	     * - *resolve error* - when an error has occurred with a `resolve`
	     *
	     */
	    $state.go = function go(to, params, options) {
	      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#transitionTo
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
	     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
	     *
	     * @example
	     * <pre>
	     * var app = angular.module('app', ['ui.router']);
	     *
	     * app.controller('ctrl', function ($scope, $state) {
	     *   $scope.changeState = function () {
	     *     $state.transitionTo('contact.detail');
	     *   };
	     * });
	     * </pre>
	     *
	     * @param {string} to State name.
	     * @param {object=} toParams A map of the parameters that will be sent to the state,
	     * will populate $stateParams.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
	     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
	     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
	     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
	     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
	     *    use this when you want to force a reload when *everything* is the same, including search params.
	     *
	     * @returns {promise} A promise representing the state of the new transition. See
	     * {@link ui.router.state.$state#methods_go $state.go}.
	     */
	    $state.transitionTo = function transitionTo(to, toParams, options) {
	      toParams = toParams || {};
	      options = extend({
	        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
	      }, options || {});

	      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
	      var evt, toState = findState(to, options.relative);

	      if (!isDefined(toState)) {
	        var redirect = { to: to, toParams: toParams, options: options };
	        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

	        if (redirectResult) {
	          return redirectResult;
	        }

	        // Always retry once if the $stateNotFound was not prevented
	        // (handles either redirect changed or state lazy-definition)
	        to = redirect.to;
	        toParams = redirect.toParams;
	        options = redirect.options;
	        toState = findState(to, options.relative);

	        if (!isDefined(toState)) {
	          if (!options.relative) throw new Error("No such state '" + to + "'");
	          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
	        }
	      }
	      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
	      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
	      if (!toState.params.$$validates(toParams)) return TransitionFailed;

	      toParams = toState.params.$$values(toParams);
	      to = toState;

	      var toPath = to.path;

	      // Starting from the root of the path, keep all levels that haven't changed
	      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

	      if (!options.reload) {
	        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
	          locals = toLocals[keep] = state.locals;
	          keep++;
	          state = toPath[keep];
	        }
	      }

	      // If we're going to the same state and all locals are kept, we've got nothing to do.
	      // But clear 'transition', as we still want to cancel any other pending transitions.
	      // TODO: We may not want to bump 'transition' if we're called from a location change
	      // that we've initiated ourselves, because we might accidentally abort a legitimate
	      // transition initiated from code?
	      if (shouldTriggerReload(to, from, locals, options)) {
	        if (to.self.reloadOnSearch !== false) $urlRouter.update();
	        $state.transition = null;
	        return $q.when($state.current);
	      }

	      // Filter parameters before we pass them to event handlers etc.
	      toParams = filterByKeys(to.params.$$keys(), toParams || {});

	      // Broadcast start event and cancel the transition if requested
	      if (options.notify) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeStart
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when the state transition **begins**. You can use `event.preventDefault()`
	         * to prevent the transition from happening and then the transition promise will be
	         * rejected with a `'transition prevented'` value.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         *
	         * @example
	         *
	         * <pre>
	         * $rootScope.$on('$stateChangeStart',
	         * function(event, toState, toParams, fromState, fromParams){
	         *     event.preventDefault();
	         *     // transitionTo() promise will be rejected with
	         *     // a 'transition prevented' error
	         * })
	         * </pre>
	         */
	        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
	          $urlRouter.update();
	          return TransitionPrevented;
	        }
	      }

	      // Resolve locals for the remaining states, but don't update any global state just
	      // yet -- if anything fails to resolve the current state needs to remain untouched.
	      // We also set up an inheritance chain for the locals here. This allows the view directive
	      // to quickly look up the correct definition for each view in the current state. Even
	      // though we create the locals object itself outside resolveState(), it is initially
	      // empty and gets filled asynchronously. We need to keep track of the promise for the
	      // (fully resolved) current locals, and pass this down the chain.
	      var resolved = $q.when(locals);

	      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
	        locals = toLocals[l] = inherit(locals);
	        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
	      }

	      // Once everything is resolved, we are ready to perform the actual transition
	      // and return a promise for the new state. We also keep track of what the
	      // current promise is, so that we can detect overlapping transitions and
	      // keep only the outcome of the last transition.
	      var transition = $state.transition = resolved.then(function () {
	        var l, entering, exiting;

	        if ($state.transition !== transition) return TransitionSuperseded;

	        // Exit 'from' states not kept
	        for (l = fromPath.length - 1; l >= keep; l--) {
	          exiting = fromPath[l];
	          if (exiting.self.onExit) {
	            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
	          }
	          exiting.locals = null;
	        }

	        // Enter 'to' states not kept
	        for (l = keep; l < toPath.length; l++) {
	          entering = toPath[l];
	          entering.locals = toLocals[l];
	          if (entering.self.onEnter) {
	            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
	          }
	        }

	        // Run it again, to catch any transitions in callbacks
	        if ($state.transition !== transition) return TransitionSuperseded;

	        // Update globals in $state
	        $state.$current = to;
	        $state.current = to.self;
	        $state.params = toParams;
	        copy($state.params, $stateParams);
	        $state.transition = null;

	        if (options.location && to.navigable) {
	          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
	            $$avoidResync: true, replace: options.location === 'replace'
	          });
	        }

	        if (options.notify) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeSuccess
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired once the state transition is **complete**.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         */
	          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
	        }
	        $urlRouter.update(true);

	        return $state.current;
	      }, function (error) {
	        if ($state.transition !== transition) return TransitionSuperseded;

	        $state.transition = null;
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$stateChangeError
	         * @eventOf ui.router.state.$state
	         * @eventType broadcast on root scope
	         * @description
	         * Fired when an **error occurs** during transition. It's important to note that if you
	         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
	         * they will not throw traditionally. You must listen for this $stateChangeError event to
	         * catch **ALL** errors.
	         *
	         * @param {Object} event Event object.
	         * @param {State} toState The state being transitioned to.
	         * @param {Object} toParams The params supplied to the `toState`.
	         * @param {State} fromState The current state, pre-transition.
	         * @param {Object} fromParams The params supplied to the `fromState`.
	         * @param {Error} error The resolve error object.
	         */
	        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

	        if (!evt.defaultPrevented) {
	            $urlRouter.update();
	        }

	        return $q.reject(error);
	      });

	      return transition;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#is
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
	     * but only checks for the full state name. If params is supplied then it will be
	     * tested for strict equality against the current active params object, so all params
	     * must match with none missing and no extras.
	     *
	     * @example
	     * <pre>
	     * $state.$current.name = 'contacts.details.item';
	     *
	     * // absolute name
	     * $state.is('contact.details.item'); // returns true
	     * $state.is(contactDetailItemStateObject); // returns true
	     *
	     * // relative name (. and ^), typically from a template
	     * // E.g. from the 'contacts.details' template
	     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
	     * </pre>
	     *
	     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
	     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
	     * to test against the current active state.
	     * @param {object=} options An options object.  The options are:
	     *
	     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
	     * test relative to `options.relative` state (or name).
	     *
	     * @returns {boolean} Returns true if it is the state.
	     */
	    $state.is = function is(stateOrName, params, options) {
	      options = extend({ relative: $state.$current }, options || {});
	      var state = findState(stateOrName, options.relative);

	      if (!isDefined(state)) { return undefined; }
	      if ($state.$current !== state) { return false; }
	      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#includes
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A method to determine if the current active state is equal to or is the child of the
	     * state stateName. If any params are passed then they will be tested for a match as well.
	     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
	     *
	     * @example
	     * Partial and relative names
	     * <pre>
	     * $state.$current.name = 'contacts.details.item';
	     *
	     * // Using partial names
	     * $state.includes("contacts"); // returns true
	     * $state.includes("contacts.details"); // returns true
	     * $state.includes("contacts.details.item"); // returns true
	     * $state.includes("contacts.list"); // returns false
	     * $state.includes("about"); // returns false
	     *
	     * // Using relative names (. and ^), typically from a template
	     * // E.g. from the 'contacts.details' template
	     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
	     * </pre>
	     *
	     * Basic globbing patterns
	     * <pre>
	     * $state.$current.name = 'contacts.details.item.url';
	     *
	     * $state.includes("*.details.*.*"); // returns true
	     * $state.includes("*.details.**"); // returns true
	     * $state.includes("**.item.**"); // returns true
	     * $state.includes("*.details.item.url"); // returns true
	     * $state.includes("*.details.*.url"); // returns true
	     * $state.includes("*.details.*"); // returns false
	     * $state.includes("item.**"); // returns false
	     * </pre>
	     *
	     * @param {string} stateOrName A partial name, relative name, or glob pattern
	     * to be searched for within the current state name.
	     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
	     * that you'd like to test against the current active state.
	     * @param {object=} options An options object.  The options are:
	     *
	     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
	     * .includes will test relative to `options.relative` state (or name).
	     *
	     * @returns {boolean} Returns true if it does include the state
	     */
	    $state.includes = function includes(stateOrName, params, options) {
	      options = extend({ relative: $state.$current }, options || {});
	      if (isString(stateOrName) && isGlob(stateOrName)) {
	        if (!doesStateMatchGlob(stateOrName)) {
	          return false;
	        }
	        stateOrName = $state.$current.name;
	      }

	      var state = findState(stateOrName, options.relative);
	      if (!isDefined(state)) { return undefined; }
	      if (!isDefined($state.$current.includes[state.name])) { return false; }
	      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
	    };


	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#href
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * A url generation method that returns the compiled url for the given state populated with the given params.
	     *
	     * @example
	     * <pre>
	     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
	     * </pre>
	     *
	     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
	     * @param {object=} params An object of parameter values to fill the state's required parameters.
	     * @param {object=} options Options object. The options are:
	     *
	     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
	     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
	     *    ancestor with a valid url).
	     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
	     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
	     *    defines which state to be relative from.
	     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
	     * 
	     * @returns {string} compiled state url
	     */
	    $state.href = function href(stateOrName, params, options) {
	      options = extend({
	        lossy:    true,
	        inherit:  true,
	        absolute: false,
	        relative: $state.$current
	      }, options || {});

	      var state = findState(stateOrName, options.relative);

	      if (!isDefined(state)) return null;
	      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
	      
	      var nav = (state && options.lossy) ? state.navigable : state;

	      if (!nav || nav.url === undefined || nav.url === null) {
	        return null;
	      }
	      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys(), params || {}), {
	        absolute: options.absolute
	      });
	    };

	    /**
	     * @ngdoc function
	     * @name ui.router.state.$state#get
	     * @methodOf ui.router.state.$state
	     *
	     * @description
	     * Returns the state configuration object for any specific state or all states.
	     *
	     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
	     * the requested state. If not provided, returns an array of ALL state configs.
	     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
	     * @returns {Object|Array} State configuration object or array of all objects.
	     */
	    $state.get = function (stateOrName, context) {
	      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
	      var state = findState(stateOrName, context || $state.$current);
	      return (state && state.self) ? state.self : null;
	    };

	    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
	      // Make a restricted $stateParams with only the parameters that apply to this state if
	      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
	      // we also need $stateParams to be available for any $injector calls we make during the
	      // dependency resolution process.
	      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
	      var locals = { $stateParams: $stateParams };

	      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
	      // We're also including $stateParams in this; that way the parameters are restricted
	      // to the set that should be visible to the state, and are independent of when we update
	      // the global $state and $stateParams values.
	      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
	      var promises = [dst.resolve.then(function (globals) {
	        dst.globals = globals;
	      })];
	      if (inherited) promises.push(inherited);

	      // Resolve template and dependencies for all views.
	      forEach(state.views, function (view, name) {
	        var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
	        injectables.$template = [ function () {
	          return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: options.notify }) || '';
	        }];

	        promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
	          // References to the controller (only instantiated at link time)
	          if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
	            var injectLocals = angular.extend({}, injectables, locals);
	            result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
	          } else {
	            result.$$controller = view.controller;
	          }
	          // Provide access to the state itself for internal use
	          result.$$state = state;
	          result.$$controllerAs = view.controllerAs;
	          dst[name] = result;
	        }));
	      });

	      // Wait for all the promises and then return the activation object
	      return $q.all(promises).then(function (values) {
	        return dst;
	      });
	    }

	    return $state;
	  }

	  function shouldTriggerReload(to, from, locals, options) {
	    if (to === from && ((locals === from.locals && !options.reload) || (to.self.reloadOnSearch === false))) {
	      return true;
	    }
	  }
	}

	angular.module('ui.router.state')
	  .value('$stateParams', {})
	  .provider('$state', $StateProvider);


	$ViewProvider.$inject = [];
	function $ViewProvider() {

	  this.$get = $get;
	  /**
	   * @ngdoc object
	   * @name ui.router.state.$view
	   *
	   * @requires ui.router.util.$templateFactory
	   * @requires $rootScope
	   *
	   * @description
	   *
	   */
	  $get.$inject = ['$rootScope', '$templateFactory'];
	  function $get(   $rootScope,   $templateFactory) {
	    return {
	      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
	      /**
	       * @ngdoc function
	       * @name ui.router.state.$view#load
	       * @methodOf ui.router.state.$view
	       *
	       * @description
	       *
	       * @param {string} name name
	       * @param {object} options option object.
	       */
	      load: function load(name, options) {
	        var result, defaults = {
	          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
	        };
	        options = extend(defaults, options);

	        if (options.view) {
	          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
	        }
	        if (result && options.notify) {
	        /**
	         * @ngdoc event
	         * @name ui.router.state.$state#$viewContentLoading
	         * @eventOf ui.router.state.$view
	         * @eventType broadcast on root scope
	         * @description
	         *
	         * Fired once the view **begins loading**, *before* the DOM is rendered.
	         *
	         * @param {Object} event Event object.
	         * @param {Object} viewConfig The view config properties (template, controller, etc).
	         *
	         * @example
	         *
	         * <pre>
	         * $scope.$on('$viewContentLoading',
	         * function(event, viewConfig){
	         *     // Access to all the view config properties.
	         *     // and one special property 'targetView'
	         *     // viewConfig.targetView
	         * });
	         * </pre>
	         */
	          $rootScope.$broadcast('$viewContentLoading', options);
	        }
	        return result;
	      }
	    };
	  }
	}

	angular.module('ui.router.state').provider('$view', $ViewProvider);

	/**
	 * @ngdoc object
	 * @name ui.router.state.$uiViewScrollProvider
	 *
	 * @description
	 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
	 */
	function $ViewScrollProvider() {

	  var useAnchorScroll = false;

	  /**
	   * @ngdoc function
	   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
	   * @methodOf ui.router.state.$uiViewScrollProvider
	   *
	   * @description
	   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
	   * scrolling based on the url anchor.
	   */
	  this.useAnchorScroll = function () {
	    useAnchorScroll = true;
	  };

	  /**
	   * @ngdoc object
	   * @name ui.router.state.$uiViewScroll
	   *
	   * @requires $anchorScroll
	   * @requires $timeout
	   *
	   * @description
	   * When called with a jqLite element, it scrolls the element into view (after a
	   * `$timeout` so the DOM has time to refresh).
	   *
	   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
	   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
	   */
	  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
	    if (useAnchorScroll) {
	      return $anchorScroll;
	    }

	    return function ($element) {
	      $timeout(function () {
	        $element[0].scrollIntoView();
	      }, 0, false);
	    };
	  }];
	}

	angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-view
	 *
	 * @requires ui.router.state.$state
	 * @requires $compile
	 * @requires $controller
	 * @requires $injector
	 * @requires ui.router.state.$uiViewScroll
	 * @requires $document
	 *
	 * @restrict ECA
	 *
	 * @description
	 * The ui-view directive tells $state where to place your templates.
	 *
	 * @param {string=} name A view name. The name should be unique amongst the other views in the
	 * same state. You can have views of the same name that live in different states.
	 *
	 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
	 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
	 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
	 * scroll ui-view elements into view when they are populated during a state activation.
	 *
	 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
	 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
	 *
	 * @param {string=} onload Expression to evaluate whenever the view updates.
	 * 
	 * @example
	 * A view can be unnamed or named. 
	 * <pre>
	 * <!-- Unnamed -->
	 * <div ui-view></div> 
	 * 
	 * <!-- Named -->
	 * <div ui-view="viewName"></div>
	 * </pre>
	 *
	 * You can only have one unnamed view within any template (or root html). If you are only using a 
	 * single view and it is unnamed then you can populate it like so:
	 * <pre>
	 * <div ui-view></div> 
	 * $stateProvider.state("home", {
	 *   template: "<h1>HELLO!</h1>"
	 * })
	 * </pre>
	 * 
	 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
	 * config property, by name, in this case an empty name:
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 * 
	 * But typically you'll only use the views property if you name your view or have more than one view 
	 * in the same template. There's not really a compelling reason to name a view if its the only one, 
	 * but you could if you wanted, like so:
	 * <pre>
	 * <div ui-view="main"></div>
	 * </pre> 
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "main": {
	 *       template: "<h1>HELLO!</h1>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 * 
	 * Really though, you'll use views to set up multiple views:
	 * <pre>
	 * <div ui-view></div>
	 * <div ui-view="chart"></div> 
	 * <div ui-view="data"></div> 
	 * </pre>
	 * 
	 * <pre>
	 * $stateProvider.state("home", {
	 *   views: {
	 *     "": {
	 *       template: "<h1>HELLO!</h1>"
	 *     },
	 *     "chart": {
	 *       template: "<chart_thing/>"
	 *     },
	 *     "data": {
	 *       template: "<data_thing/>"
	 *     }
	 *   }    
	 * })
	 * </pre>
	 *
	 * Examples for `autoscroll`:
	 *
	 * <pre>
	 * <!-- If autoscroll present with no expression,
	 *      then scroll ui-view into view -->
	 * <ui-view autoscroll/>
	 *
	 * <!-- If autoscroll present with valid expression,
	 *      then scroll ui-view into view if expression evaluates to true -->
	 * <ui-view autoscroll='true'/>
	 * <ui-view autoscroll='false'/>
	 * <ui-view autoscroll='scopeVariable'/>
	 * </pre>
	 */
	$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
	function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {

	  function getService() {
	    return ($injector.has) ? function(service) {
	      return $injector.has(service) ? $injector.get(service) : null;
	    } : function(service) {
	      try {
	        return $injector.get(service);
	      } catch (e) {
	        return null;
	      }
	    };
	  }

	  var service = getService(),
	      $animator = service('$animator'),
	      $animate = service('$animate');

	  // Returns a set of DOM manipulation functions based on which Angular version
	  // it should use
	  function getRenderer(attrs, scope) {
	    var statics = function() {
	      return {
	        enter: function (element, target, cb) { target.after(element); cb(); },
	        leave: function (element, cb) { element.remove(); cb(); }
	      };
	    };

	    if ($animate) {
	      return {
	        enter: function(element, target, cb) {
	          var promise = $animate.enter(element, null, target, cb);
	          if (promise && promise.then) promise.then(cb);
	        },
	        leave: function(element, cb) {
	          var promise = $animate.leave(element, cb);
	          if (promise && promise.then) promise.then(cb);
	        }
	      };
	    }

	    if ($animator) {
	      var animate = $animator && $animator(scope, attrs);

	      return {
	        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
	        leave: function(element, cb) { animate.leave(element); cb(); }
	      };
	    }

	    return statics();
	  }

	  var directive = {
	    restrict: 'ECA',
	    terminal: true,
	    priority: 400,
	    transclude: 'element',
	    compile: function (tElement, tAttrs, $transclude) {
	      return function (scope, $element, attrs) {
	        var previousEl, currentEl, currentScope, latestLocals,
	            onloadExp     = attrs.onload || '',
	            autoScrollExp = attrs.autoscroll,
	            renderer      = getRenderer(attrs, scope);

	        scope.$on('$stateChangeSuccess', function() {
	          updateView(false);
	        });
	        scope.$on('$viewContentLoading', function() {
	          updateView(false);
	        });

	        updateView(true);

	        function cleanupLastView() {
	          if (previousEl) {
	            previousEl.remove();
	            previousEl = null;
	          }

	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }

	          if (currentEl) {
	            renderer.leave(currentEl, function() {
	              previousEl = null;
	            });

	            previousEl = currentEl;
	            currentEl = null;
	          }
	        }

	        function updateView(firstTime) {
	          var newScope,
	              name            = getUiViewName(scope, attrs, $element, $interpolate),
	              previousLocals  = name && $state.$current && $state.$current.locals[name];

	          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
	          newScope = scope.$new();
	          latestLocals = $state.$current.locals[name];

	          var clone = $transclude(newScope, function(clone) {
	            renderer.enter(clone, $element, function onUiViewEnter() {
	              if(currentScope) {
	                currentScope.$emit('$viewContentAnimationEnded');
	              }

	              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
	                $uiViewScroll(clone);
	              }
	            });
	            cleanupLastView();
	          });

	          currentEl = clone;
	          currentScope = newScope;
	          /**
	           * @ngdoc event
	           * @name ui.router.state.directive:ui-view#$viewContentLoaded
	           * @eventOf ui.router.state.directive:ui-view
	           * @eventType emits on ui-view directive scope
	           * @description           *
	           * Fired once the view is **loaded**, *after* the DOM is rendered.
	           *
	           * @param {Object} event Event object.
	           */
	          currentScope.$emit('$viewContentLoaded');
	          currentScope.$eval(onloadExp);
	        }
	      };
	    }
	  };

	  return directive;
	}

	$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
	function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
	  return {
	    restrict: 'ECA',
	    priority: -400,
	    compile: function (tElement) {
	      var initial = tElement.html();
	      return function (scope, $element, attrs) {
	        var current = $state.$current,
	            name = getUiViewName(scope, attrs, $element, $interpolate),
	            locals  = current && current.locals[name];

	        if (! locals) {
	          return;
	        }

	        $element.data('$uiView', { name: name, state: locals.$$state });
	        $element.html(locals.$template ? locals.$template : initial);

	        var link = $compile($element.contents());

	        if (locals.$$controller) {
	          locals.$scope = scope;
	          var controller = $controller(locals.$$controller, locals);
	          if (locals.$$controllerAs) {
	            scope[locals.$$controllerAs] = controller;
	          }
	          $element.data('$ngControllerController', controller);
	          $element.children().data('$ngControllerController', controller);
	        }

	        link(scope);
	      };
	    }
	  };
	}

	/**
	 * Shared ui-view code for both directives:
	 * Given scope, element, and its attributes, return the view's name
	 */
	function getUiViewName(scope, attrs, element, $interpolate) {
	  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
	  var inherited = element.inheritedData('$uiView');
	  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));
	}

	angular.module('ui.router.state').directive('uiView', $ViewDirective);
	angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

	function parseStateRef(ref, current) {
	  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
	  if (preparsed) ref = current + '(' + preparsed[1] + ')';
	  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
	  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
	  return { state: parsed[1], paramExpr: parsed[3] || null };
	}

	function stateContext(el) {
	  var stateData = el.parent().inheritedData('$uiView');

	  if (stateData && stateData.state && stateData.state.name) {
	    return stateData.state;
	  }
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref
	 *
	 * @requires ui.router.state.$state
	 * @requires $timeout
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
	 * URL, the directive will automatically generate & update the `href` attribute via 
	 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
	 * the link will trigger a state transition with optional parameters. 
	 *
	 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
	 * handled natively by the browser.
	 *
	 * You can also use relative state paths within ui-sref, just like the relative 
	 * paths passed to `$state.go()`. You just need to be aware that the path is relative
	 * to the state that the link lives in, in other words the state that loaded the 
	 * template containing the link.
	 *
	 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
	 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
	 * and `reload`.
	 *
	 * @example
	 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
	 * following template:
	 * <pre>
	 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
	 * 
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
	 *     </li>
	 * </ul>
	 * </pre>
	 * 
	 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
	 * <pre>
	 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
	 * 
	 * <ul>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
	 *     </li>
	 *     <li ng-repeat="contact in contacts">
	 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
	 *     </li>
	 * </ul>
	 *
	 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
	 * </pre>
	 *
	 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
	 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
	 */
	$StateRefDirective.$inject = ['$state', '$timeout'];
	function $StateRefDirective($state, $timeout) {
	  var allowedOptions = ['location', 'inherit', 'reload'];

	  return {
	    restrict: 'A',
	    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
	    link: function(scope, element, attrs, uiSrefActive) {
	      var ref = parseStateRef(attrs.uiSref, $state.current.name);
	      var params = null, url = null, base = stateContext(element) || $state.$current;
	      var newHref = null, isAnchor = element.prop("tagName") === "A";
	      var isForm = element[0].nodeName === "FORM";
	      var attr = isForm ? "action" : "href", nav = true;

	      var options = { relative: base, inherit: true };
	      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

	      angular.forEach(allowedOptions, function(option) {
	        if (option in optionsOverride) {
	          options[option] = optionsOverride[option];
	        }
	      });

	      var update = function(newVal) {
	        if (newVal) params = angular.copy(newVal);
	        if (!nav) return;

	        newHref = $state.href(ref.state, params, options);

	        var activeDirective = uiSrefActive[1] || uiSrefActive[0];
	        if (activeDirective) {
	          activeDirective.$$setStateInfo(ref.state, params);
	        }
	        if (newHref === null) {
	          nav = false;
	          return false;
	        }
	        attrs.$set(attr, newHref);
	      };

	      if (ref.paramExpr) {
	        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
	          if (newVal !== params) update(newVal);
	        }, true);
	        params = angular.copy(scope.$eval(ref.paramExpr));
	      }
	      update();

	      if (isForm) return;

	      element.bind("click", function(e) {
	        var button = e.which || e.button;
	        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
	          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
	          var transition = $timeout(function() {
	            $state.go(ref.state, params, options);
	          });
	          e.preventDefault();

	          // if the state has no URL, ignore one preventDefault from the <a> directive.
	          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;
	          e.preventDefault = function() {
	            if (ignorePreventDefaultCount-- <= 0)
	              $timeout.cancel(transition);
	          };
	        }
	      });
	    }
	  };
	}

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * A directive working alongside ui-sref to add classes to an element when the
	 * related ui-sref directive's state is active, and removing them when it is inactive.
	 * The primary use-case is to simplify the special appearance of navigation menus
	 * relying on `ui-sref`, by having the "active" state's menu button appear different,
	 * distinguishing it from the inactive menu items.
	 *
	 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
	 * ui-sref-active found at the same level or above the ui-sref will be used.
	 *
	 * Will activate when the ui-sref's target state or any child state is active. If you
	 * need to activate only when the ui-sref target state is active and *not* any of
	 * it's children, then you will use
	 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
	 *
	 * @example
	 * Given the following template:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item">
	 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 *
	 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
	 * the resulting HTML will appear as (note the 'active' class):
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active="active" class="item active">
	 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 *
	 * The class name is interpolated **once** during the directives link time (any further changes to the
	 * interpolated value are ignored).
	 *
	 * Multiple classes may be specified in a space-separated format:
	 * <pre>
	 * <ul>
	 *   <li ui-sref-active='class1 class2 class3'>
	 *     <a ui-sref="app.user">link</a>
	 *   </li>
	 * </ul>
	 * </pre>
	 */

	/**
	 * @ngdoc directive
	 * @name ui.router.state.directive:ui-sref-active-eq
	 *
	 * @requires ui.router.state.$state
	 * @requires ui.router.state.$stateParams
	 * @requires $interpolate
	 *
	 * @restrict A
	 *
	 * @description
	 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
	 * when the exact target state used in the `ui-sref` is active; no child states.
	 *
	 */
	$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
	function $StateRefActiveDirective($state, $stateParams, $interpolate) {
	  return  {
	    restrict: "A",
	    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
	      var state, params, activeClass;

	      // There probably isn't much point in $observing this
	      // uiSrefActive and uiSrefActiveEq share the same directive object with some
	      // slight difference in logic routing
	      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

	      // Allow uiSref to communicate with uiSrefActive[Equals]
	      this.$$setStateInfo = function (newState, newParams) {
	        state = $state.get(newState, stateContext($element));
	        params = newParams;
	        update();
	      };

	      $scope.$on('$stateChangeSuccess', update);

	      // Update route state
	      function update() {
	        if (isMatch()) {
	          $element.addClass(activeClass);
	        } else {
	          $element.removeClass(activeClass);
	        }
	      }

	      function isMatch() {
	        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
	          return state && $state.is(state.name, params);
	        } else {
	          return state && $state.includes(state.name, params);
	        }
	      }
	    }]
	  };
	}

	angular.module('ui.router.state')
	  .directive('uiSref', $StateRefDirective)
	  .directive('uiSrefActive', $StateRefActiveDirective)
	  .directive('uiSrefActiveEq', $StateRefActiveDirective);

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:isState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
	 */
	$IsStateFilter.$inject = ['$state'];
	function $IsStateFilter($state) {
	  var isFilter = function (state) {
	    return $state.is(state);
	  };
	  isFilter.$stateful = true;
	  return isFilter;
	}

	/**
	 * @ngdoc filter
	 * @name ui.router.state.filter:includedByState
	 *
	 * @requires ui.router.state.$state
	 *
	 * @description
	 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
	 */
	$IncludedByStateFilter.$inject = ['$state'];
	function $IncludedByStateFilter($state) {
	  var includesFilter = function (state) {
	    return $state.includes(state);
	  };
	  includesFilter.$stateful = true;
	  return  includesFilter;
	}

	angular.module('ui.router.state')
	  .filter('isState', $IsStateFilter)
	  .filter('includedByState', $IncludedByStateFilter);
	})(window, window.angular);

/***/ },
/* 12 */
/***/ function(module, exports) {

	/*global angular */
	/*
	 jQuery UI Datepicker plugin wrapper

	 @note If ≤ IE8 make sure you have a polyfill for Date.toISOString()
	 @param [ui-date] {object} Options to pass to $.fn.datepicker() merged onto uiDateConfig
	 */

	angular.module('ui.date', [])

	.constant('uiDateConfig', {})

	.directive('uiDate', ['uiDateConfig', '$timeout', function (uiDateConfig, $timeout) {
	  'use strict';
	  var options;
	  options = {};
	  angular.extend(options, uiDateConfig);
	  return {
	    require:'?ngModel',
	    link:function (scope, element, attrs, controller) {
	      var getOptions = function () {
	        return angular.extend({}, uiDateConfig, scope.$eval(attrs.uiDate));
	      };
	      var initDateWidget = function () {
	        var opts = getOptions();

	        // If we have a controller (i.e. ngModelController) then wire it up
	        if (controller) {
	          // Override ngModelController's $setViewValue
	          // so that we can ensure that a Date object is being pass down the $parsers
	          // This is to handle the case where the user types directly into the input box
	          var _$setViewValue = controller.$setViewValue;
	          var settingValue = false;
	          controller.$setViewValue = function () {
	            if ( !settingValue ) {
	              settingValue = true;
	              element.datepicker("setDate", element.datepicker("getDate"));
	              _$setViewValue.call(controller, element.datepicker("getDate"));
	              $timeout(function() {settingValue = false;});
	            }
	          };

	          // Set the view value in a $apply block when users selects
	          // (calling directive user's function too if provided)
	          var _onSelect = opts.onSelect || angular.noop;
	          opts.onSelect = function (value, picker) {
	            scope.$apply(function() {
	              controller.$setViewValue(value);
	              _onSelect(value, picker);
	              element.blur();
	            });
	          };

	          // Don't show if we are already setting the value in $setViewValue()
	          // (calling directive user's function too if provided)
	          var _beforeShow = opts.beforeShow || angular.noop;
	          opts.beforeShow = function(input, inst) {
	            return !settingValue && _beforeShow(input, inst);
	          };

	          // Update the date picker when the model changes
	          controller.$render = function () {
	            var date = controller.$viewValue;
	            if ( angular.isDefined(date) && date !== null && !angular.isDate(date) ) {
	              throw new Error('ng-Model value must be a Date object - currently it is a ' + typeof date + ' - use ui-date-format to convert it from a string');
	            }
	            element.datepicker("setDate", date);
	          };
	        }
	        // If we don't destroy the old one it doesn't update properly when the config changes
	        element.datepicker('destroy');
	        // Create the new datepicker widget
	        element.datepicker(opts);
	        if ( controller ) {
	          // Force a render to override whatever is in the input text box
	          controller.$render();
	        }
	      };
	      // Watch for changes to the directives options
	      scope.$watch(getOptions, initDateWidget, true);
	    }
	  };
	}
	])

	.constant('uiDateFormatConfig', '')

	.directive('uiDateFormat', ['uiDateFormatConfig', function(uiDateFormatConfig) {
	  var directive = {
	    require:'ngModel',
	    link: function(scope, element, attrs, modelCtrl) {
	      var dateFormat = attrs.uiDateFormat || uiDateFormatConfig;
	      if ( dateFormat ) {
	        // Use the datepicker with the attribute value as the dateFormat string to convert to and from a string
	        modelCtrl.$formatters.push(function(value) {
	          if (angular.isString(value) ) {
	            return jQuery.datepicker.parseDate(dateFormat, value);
	          }
	          return null;
	        });
	        modelCtrl.$parsers.push(function(value){
	          if (value) {
	            return jQuery.datepicker.formatDate(dateFormat, value);
	          }
	          return null;
	        });
	      } else {
	        // Default to ISO formatting
	        modelCtrl.$formatters.push(function(value) {
	          if (angular.isString(value) ) {
	            return new Date(value);
	          }
	          return null;
	        });
	        modelCtrl.$parsers.push(function(value){
	          if (value) {
	            return value.toISOString();
	          }
	          return null;
	        });
	      }
	    }
	  };
	  return directive;
	}]);


/***/ },
/* 13 */
/***/ function(module, exports) {

	angular.module('truncate', [])
	    .filter('characters', function () {
	        return function (input, chars, breakOnWord) {
	            if (isNaN(chars)) return input;
	            if (chars <= 0) return '';
	            if (input && input.length > chars) {
	                input = input.substring(0, chars);

	                if (!breakOnWord) {
	                    var lastspace = input.lastIndexOf(' ');
	                    //get last space
	                    if (lastspace !== -1) {
	                        input = input.substr(0, lastspace);
	                    }
	                }else{
	                    while(input.charAt(input.length-1) === ' '){
	                        input = input.substr(0, input.length -1);
	                    }
	                }
	                return input + '...';
	            }
	            return input;
	        };
	    })
	    .filter('words', function () {
	        return function (input, words) {
	            if (isNaN(words)) return input;
	            if (words <= 0) return '';
	            if (input) {
	                var inputWords = input.split(/\s+/);
	                if (inputWords.length > words) {
	                    input = inputWords.slice(0, words).join(' ') + '...';
	                }
	            }
	            return input;
	        };
	    });


/***/ },
/* 14 */
/***/ function(module, exports) {

	/*!
	 * Angular Feature Flags v0.1.0
	 *
	 * © 2015, Michael Taranto
	 */

	(function(){
	angular.module('feature-flags', []);
	angular.module('feature-flags').directive('featureFlag', ['featureFlags', function(featureFlags) {
	    return {
	        transclude: 'element',
	        priority: 599,
	        terminal: true,
	        restrict: 'A',
	        $$tlb: true,
	        compile: function featureFlagCompile(tElement, attrs) {
	            var hasHideAttribute = 'featureFlagHide' in attrs;

	            tElement[0].textContent = ' featureFlag: ' + attrs.featureFlag + ' is ' + (hasHideAttribute ? 'on' : 'off') + ' ';

	            return function featureFlagPostLink($scope, element, attrs, ctrl, $transclude) {
	                var featureEl, childScope;
	                $scope.$watch(function featureFlagWatcher() {
	                        return featureFlags.isOn(attrs.featureFlag);
	                }, function featureFlagChanged(isEnabled) {
	                    var showElement = hasHideAttribute ? !isEnabled : isEnabled;

	                    if (showElement) {
	                        childScope = $scope.$new();
	                        $transclude(childScope, function(clone) {
	                            featureEl = clone;
	                            element.after(featureEl).remove();
	                        });
	                    } else {
	                        if(childScope) {
	                            childScope.$destroy();
	                            childScope = null;
	                        }
	                        if(featureEl) {
	                            featureEl.after(element).remove();
	                            featureEl = null;
	                        }
	                    }
	                });
	            };
	        }
	    };
	}]);
	angular.module('feature-flags').directive('featureFlagOverrides', ['featureFlags', function(featureFlags) {
	    return {
	        restrict: 'A',
	        link: function postLink($scope) {
	            $scope.flags = featureFlags.get();

	            $scope.isOn = featureFlags.isOn;
	            $scope.isOverridden = featureFlags.isOverridden;
	            $scope.enable = featureFlags.enable;
	            $scope.disable = featureFlags.disable;
	            $scope.reset = featureFlags.reset;
	        },
	        template: '<div class="feature-flags">' +
	                  '    <h1>Feature Flags</h1>'+
	                  '    <div class="feature-flags-flag" ng-repeat="flag in flags">'+
	                  '        <div class="feature-flags-name">{{flag.name || flag.key}}</div>'+
	                  '        <div class="feature-flags-switch" ng-click="enable(flag)" ng-class="{\'active\': isOverridden(flag.key) && isOn(flag.key)}">ON</div>'+
	                  '        <div class="feature-flags-switch" ng-click="disable(flag)" ng-class="{\'active\': isOverridden(flag.key) && !isOn(flag.key)}">OFF</div>'+
	                  '        <div class="feature-flags-switch" ng-click="reset(flag)" ng-class="{\'active\': !isOverridden(flag.key)}">DEFAULT</div>'+
	                  '        <div class="feature-flags-desc">{{flag.description}}</div>'+
	                  '    </div>'+
	                  '</div>',
	        replace: true
	    };
	}]);
	angular.module('feature-flags').service('featureFlagOverrides', ['$rootElement', function($rootElement) {
	    var appName = $rootElement.attr('ng-app'),
	        keyPrefix = 'featureFlags.' + appName + '.',

	        prefixedKeyFor = function(flagName) {
	            return keyPrefix + flagName;
	        },

	        isPrefixedKey = function(key) {
	            return key.indexOf(keyPrefix) === 0;
	        },

	        set = function(value, flagName) {
	            localStorage.setItem(prefixedKeyFor(flagName), value);
	        },

	        get = function(flagName) {
	            return localStorage.getItem(prefixedKeyFor(flagName));
	        },

	        remove = function(flagName) {
	            localStorage.removeItem(prefixedKeyFor(flagName));
	        };

	    return {
	        isPresent: function(key) {
	            return get(key) !== null;
	        },
	        get: get,
	        set: function(flag, value) {
	            if (angular.isObject(flag)) {
	                angular.forEach(flag, set);
	            } else {
	                set(value, flag);
	            }
	        },
	        remove: remove,
	        reset: function() {
	            for (var key in localStorage) {
	                if (isPrefixedKey(key)) {
	                    localStorage.removeItem(key);
	                }
	            }
	        }
	    };
	}]);
	angular.module('feature-flags').service('featureFlags', ['$q', 'featureFlagOverrides', function($q, featureFlagOverrides) {
	        var serverFlagCache = {},
	            flags = [],

	            get = function() {
	                return flags;
	            },

	            set = function(newFlags) {
	                return angular.isArray(newFlags) ? resolve(updateFlagsAndGetAll(newFlags)) : updateFlagsWithPromise(newFlags);
	            },

	            updateFlagsWithPromise = function(promise) {
	                return promise.then(function(value) {
	                    return updateFlagsAndGetAll(value.data || value);
	                });
	            },

	            updateFlagsAndGetAll = function(newFlags) {
	                newFlags.forEach(function(flag) {
	                    serverFlagCache[flag.key] = flag.active;
	                    flag.active = isOn(flag.key);
	                });
	                angular.copy(newFlags, flags);

	                return flags;
	            },

	            enable = function(flag) {
	                flag.active = true;
	                featureFlagOverrides.set(flag.key, true);
	            },

	            disable = function(flag) {
	                flag.active = false;
	                featureFlagOverrides.set(flag.key, false);
	            },

	            reset = function(flag) {
	                flag.active = serverFlagCache[flag.key];
	                featureFlagOverrides.remove(flag.key);
	            },

	            isOverridden = function(key) {
	                return featureFlagOverrides.isPresent(key);
	            },

	            isOn = function(key) {
	                return isOverridden(key) ? featureFlagOverrides.get(key) == 'true' : serverFlagCache[key];
	            },

	            resolve = function(val) {
	                var deferred = $q.defer();
	                deferred.resolve(val);
	                return deferred.promise;
	            };

	        return {
	            set: set,
	            get: get,
	            enable: enable,
	            disable: disable,
	            reset: reset,
	            isOn: isOn,
	            isOverridden: isOverridden
	        };
	    }]);
	}());

/***/ },
/* 15 */
/***/ function(module, exports) {

	angular.module('cgBusy',[]);

	//loosely modeled after angular-promise-tracker
	angular.module('cgBusy').factory('_cgBusyTrackerFactory',['$timeout','$q',function($timeout,$q){

	    return function(){

	        var tracker = {};
	        tracker.promises = [];
	        tracker.delayPromise = null;
	        tracker.durationPromise = null;
	        tracker.delayJustFinished = false;

	        tracker.reset = function(options){
	            tracker.minDuration = options.minDuration;

	            tracker.promises = [];
	            angular.forEach(options.promises,function(p){
	                if (!p || p.$cgBusyFulfilled) {
	                    return;
	                }
	                addPromiseLikeThing(p);
	            });

	            if (tracker.promises.length === 0) {
	                //if we have no promises then dont do the delay or duration stuff
	                return;
	            }

	            tracker.delayJustFinished = false;
	            if (options.delay) {
	                tracker.delayPromise = $timeout(function(){
	                    tracker.delayPromise = null;
	                    tracker.delayJustFinished = true;
	                },parseInt(options.delay,10));
	            }
	            if (options.minDuration) {
	                tracker.durationPromise = $timeout(function(){
	                    tracker.durationPromise = null;
	                },parseInt(options.minDuration,10) + (options.delay ? parseInt(options.delay,10) : 0));
	            }            
	        };

	        tracker.isPromise = function(promiseThing){
	            var then = promiseThing && (promiseThing.then || promiseThing.$then ||
	                (promiseThing.$promise && promiseThing.$promise.then));

	            return typeof then !== 'undefined';            
	        };

	        tracker.callThen = function(promiseThing,success,error){
	            var promise;
	            if (promiseThing.then || promiseThing.$then){
	                promise = promiseThing;
	            } else if (promiseThing.$promise){
	                promise = promiseThing.$promise;
	            } else if (promiseThing.denodeify){
	                promise = $q.when(promiseThing);
	            }
	                       
	            var then = (promise.then || promise.$then);

	            then.call(promise,success,error);
	        };

	        var addPromiseLikeThing = function(promise){

	            if (!tracker.isPromise(promise)) {
	                throw new Error('cgBusy expects a promise (or something that has a .promise or .$promise');
	            }

	            if (tracker.promises.indexOf(promise) !== -1){
	                return;
	            }
	            tracker.promises.push(promise);

	            tracker.callThen(promise, function(){
	                promise.$cgBusyFulfilled = true;
	                if (tracker.promises.indexOf(promise) === -1) {
	                    return;
	                }
	                tracker.promises.splice(tracker.promises.indexOf(promise),1);
	            },function(){
	                promise.$cgBusyFulfilled = true;
	                if (tracker.promises.indexOf(promise) === -1) {
	                    return;
	                }
	                tracker.promises.splice(tracker.promises.indexOf(promise),1);
	            });
	        };

	        tracker.active = function(){
	            if (tracker.delayPromise){
	                return false;
	            }

	            if (!tracker.delayJustFinished){
	                if (tracker.durationPromise){
	                    return true;
	                }
	                return tracker.promises.length > 0;
	            } else {
	                //if both delay and min duration are set, 
	                //we don't want to initiate the min duration if the 
	                //promise finished before the delay was complete
	                tracker.delayJustFinished = false;
	                if (tracker.promises.length === 0) {
	                    tracker.durationPromise = null;
	                }
	                return tracker.promises.length > 0;
	            }
	        };

	        return tracker;

	    };
	}]);

	angular.module('cgBusy').value('cgBusyDefaults',{});

	angular.module('cgBusy').directive('cgBusy',['$compile','$templateCache','cgBusyDefaults','$http','_cgBusyTrackerFactory',
	    function($compile,$templateCache,cgBusyDefaults,$http,_cgBusyTrackerFactory){
	        return {
	            restrict: 'A',
	            link: function(scope, element, attrs, fn) {

	                //Apply position:relative to parent element if necessary
	                var position = element.css('position');
	                if (position === 'static' || position === '' || typeof position === 'undefined'){
	                    element.css('position','relative');
	                }

	                var templateElement;
	                var backdropElement;
	                var currentTemplate;
	                var templateScope;
	                var backdrop;
	                var tracker = _cgBusyTrackerFactory();

	                var defaults = {
	                    templateUrl: 'angular-busy.html',
	                    delay:0,
	                    minDuration:0,
	                    backdrop: true,
	                    message:'Please Wait...',
	                    wrapperClass: 'cg-busy cg-busy-animation'
	                };

	                angular.extend(defaults,cgBusyDefaults);

	                scope.$watchCollection(attrs.cgBusy,function(options){

	                    if (!options) {
	                        options = {promise:null};
	                    }

	                    if (angular.isString(options)) {
	                        throw new Error('Invalid value for cg-busy. cgBusy no longer accepts string ids to represent promises/trackers.');
	                    }

	                    //is it an array (of promises) or one promise
	                    if (angular.isArray(options) || tracker.isPromise(options)) {
	                        options = {promise:options};
	                    }

	                    options = angular.extend(angular.copy(defaults),options);

	                    if (!options.templateUrl){
	                        options.templateUrl = defaults.templateUrl;
	                    }

	                    if (!angular.isArray(options.promise)){
	                        options.promise = [options.promise];
	                    }

	                    // options.promise = angular.isArray(options.promise) ? options.promise : [options.promise];
	                    // options.message = options.message ? options.message : 'Please Wait...';
	                    // options.template = options.template ? options.template : cgBusyTemplateName;
	                    // options.minDuration = options.minDuration ? options.minDuration : 0;
	                    // options.delay = options.delay ? options.delay : 0;

	                    if (!templateScope) {
	                        templateScope = scope.$new();
	                    }

	                    templateScope.$message = options.message;

	                    if (!angular.equals(tracker.promises,options.promise)) {
	                        tracker.reset({
	                            promises:options.promise,
	                            delay:options.delay,
	                            minDuration: options.minDuration
	                        });
	                    }

	                    templateScope.$cgBusyIsActive = function() {
	                        return tracker.active();
	                    };


	                    if (!templateElement || currentTemplate !== options.templateUrl || backdrop !== options.backdrop) {

	                        if (templateElement) {
	                            templateElement.remove();
	                        }
	                        if (backdropElement){
	                            backdropElement.remove();
	                        }

	                        currentTemplate = options.templateUrl;
	                        backdrop = options.backdrop;

	                        $http.get(currentTemplate,{cache: $templateCache}).success(function(indicatorTemplate){

	                            options.backdrop = typeof options.backdrop === 'undefined' ? true : options.backdrop;

	                            if (options.backdrop){
	                                var backdrop = '<div class="cg-busy cg-busy-backdrop cg-busy-backdrop-animation ng-hide" ng-show="$cgBusyIsActive()"></div>';
	                                backdropElement = $compile(backdrop)(templateScope);
	                                element.append(backdropElement);
	                            }

	                            var template = '<div class="'+options.wrapperClass+' ng-hide" ng-show="$cgBusyIsActive()">' + indicatorTemplate + '</div>';
	                            templateElement = $compile(template)(templateScope);

	                            angular.element(templateElement.children()[0])
	                                .css('position','absolute')
	                                .css('top',0)
	                                .css('left',0)
	                                .css('right',0)
	                                .css('bottom',0);
	                            element.append(templateElement);

	                        }).error(function(data){
	                            throw new Error('Template specified for cgBusy ('+options.templateUrl+') could not be loaded. ' + data);
	                        });
	                    }

	                },true);
	            }
	        };
	    }
	]);


	angular.module('cgBusy').run(['$templateCache', function($templateCache) {
	  'use strict';

	  $templateCache.put('angular-busy.html',
	    "<div class=\"cg-busy-default-wrapper\">\n" +
	    "\n" +
	    "   <div class=\"cg-busy-default-sign\">\n" +
	    "\n" +
	    "      <div class=\"cg-busy-default-spinner\">\n" +
	    "         <div class=\"bar1\"></div>\n" +
	    "         <div class=\"bar2\"></div>\n" +
	    "         <div class=\"bar3\"></div>\n" +
	    "         <div class=\"bar4\"></div>\n" +
	    "         <div class=\"bar5\"></div>\n" +
	    "         <div class=\"bar6\"></div>\n" +
	    "         <div class=\"bar7\"></div>\n" +
	    "         <div class=\"bar8\"></div>\n" +
	    "         <div class=\"bar9\"></div>\n" +
	    "         <div class=\"bar10\"></div>\n" +
	    "         <div class=\"bar11\"></div>\n" +
	    "         <div class=\"bar12\"></div>\n" +
	    "      </div>\n" +
	    "\n" +
	    "      <div class=\"cg-busy-default-text\">{{$message}}</div>\n" +
	    "\n" +
	    "   </div>\n" +
	    "\n" +
	    "</div>"
	  );

	}]);


/***/ },
/* 16 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */
/***/ function(module, exports) {

	/**
	 * @license
	 * angular-context-menu - v0.1.2 - An AngularJS directive to display a context menu
	 * (c) 2014
	 * License: MIT
	 *
	 * @authors Brian Ford (http://briantford.com), Ian Kennington Walter (http://ianvonwalter.com), Till Breuer (https://github.com/tilt)
	 */

	angular.module('ng-context-menu', [])

	.factory('ngContextMenu', [
	  '$q',
	  '$http',
	  '$timeout',
	  '$compile',
	  '$templateCache',
	  '$animate',
	  '$rootScope',
	  '$controller',
	  function($q, $http, $timeout, $compile, $templateCache, $animate, $rootScope, $controller) {

	    return function contextMenuFactory(config) {
	      if (!(!config.template ^ !config.templateUrl)) {
	        throw new Error('Expected context menu to have exacly one of either `template` or `templateUrl`');
	      }

	      var template      = config.template,
	          controller    = config.controller || angular.noop,
	          controllerAs  = config.controllerAs,
	          element       = null,
	          container     = null,
	          loadTemplate,
	          target,
	          scope;

	      if (config.template) {
	        var deferred = $q.defer();
	        deferred.resolve(config.template);
	        loadTemplate = deferred.promise;
	      } else {
	        loadTemplate = $http.get(config.templateUrl, {
	          cache: $templateCache
	        }).
	        then(function (response) {
	          return response.data;
	        });
	      }

	      function open (target, locals, css) {
	        this.target = target;

	        if (scope && locals) {
	          setLocals(locals);
	        }

	        return loadTemplate.then(function(html) {
	          if (element) {
	            element.remove();
	          }
	          attach(html, locals);
	          if (css) {
	            element.css(css);
	          }
	          element.appendTo(container);
	          $animate.enabled(false, element);
	          return element;
	        });
	      }

	      function attach (html, locals) {
	        container = angular.element(config.container || document.body);
	        element = angular.element(html);
	        if (element.length === 0) {
	         throw new Error('The template contains no elements; you need to wrap text nodes');
	        }

	        // create a new scope and copy locals to it
	        scope = $rootScope.$new();
	        if (locals) {
	          setLocals(locals);
	        }

	        var ctrl = $controller(controller, { $scope: scope });
	        if (controllerAs) {
	         scope[controllerAs] = ctrl;
	        }
	        $compile(element)(scope);
	      }

	      function setLocals (locals) {
	        for (var prop in locals) {
	         scope[prop] = locals[prop];
	        }
	      }

	      function reposition (position) {
	        if (element) {
	          element.css(position);
	        }
	      }

	      function close (disableFocus) {
	        var deferred = $q.defer();
	        if (element) {
	          scope.$destroy();
	          deferred.resolve();
	          element.remove();
	          if (this.target && !disableFocus) {
	            this.target.focus();
	          }

	          element = null;
	        } else {
	          deferred.resolve();
	        }
	        return deferred.promise;
	      }

	      function active () {
	        return !!element;
	      }

	      return {
	        open: open,
	        close: close,
	        active: active,
	        reposition: reposition
	      };

	    };
	}])

	.directive('hasContextMenu', [
	  '$injector',
	  '$window',
	  '$parse',
	  '$timeout',
	  '$animate',
	  function($injector, $window, $parse, $timeout, $animate) {
	  return {
	    restrict: 'A',
	    link: function(scope, element, attrs) {
	      var contextMenu = $injector.get(attrs.target),
	          locals = {},
	          win = angular.element($window),
	          menuElement,
	          triggerOnEvent = attrs.triggerOnEvent || 'contextmenu',
	          target,
	          pointerOffset;

	      /* contextMenu      is a mandatory attribute and used to bind a specific context
	                          menu to the trigger event
	         triggerOnEvent   allows for binding the event for opening the menu to "click" */

	      // prepare locals, these define properties to be passed on to the context menu scope
	      if (attrs.locals) {
	        var localKeys = attrs.locals.split(',').map(function(local) {
	          return local.trim();
	        });
	        angular.forEach(localKeys, function(key) {
	          locals[key] = scope[key];
	        });
	      }

	      function getPosition(target) {
	        var targetPosition = {};
	        var targetElement = angular.element(target);
	        var bounding = targetElement[0].getBoundingClientRect();

	        targetPosition.top = bounding.top;
	        targetPosition.left = bounding.left;

	        return targetPosition;
	      }

	      function getOffset(targetPosition, pointerPosition) {
	        var pointerOffset = {};

	        pointerOffset.offsetY = pointerPosition.top - targetPosition.top;
	        pointerOffset.offsetX = pointerPosition.left - targetPosition.left;

	        return pointerOffset;
	      }

	      function open(event) {
	        var targetPosition = getPosition(event.target);
	        var pointerPosition = getPositionPropertiesOfEvent(event);
	        var contextMenuPromise = contextMenu.open(event.target, locals, getCssPositionPropertiesOfEvent(event));
	        target = event.target;
	        pointerOffset = getOffset(targetPosition, pointerPosition);
	        contextMenuPromise.then(function(element) {
	          element.hide();
	          $timeout(function() {
	            element.show(0, function() {
	              adjustPosition(element, pointerPosition);
	              angular.element(element).trap();
	            });
	          }, 0, false);
	        });
	      }

	      function adjustPosition($element, pointerPosition) {
	        var viewport = {
	          top : win.scrollTop(),
	          left : win.scrollLeft()
	        };

	        viewport.right = viewport.left + win.width();
	        viewport.bottom = viewport.top + win.height();
	        var bounds = $element.offset();
	        bounds.right = bounds.left + $element.outerWidth();
	        bounds.bottom = bounds.top + $element.outerHeight();
	        if (viewport.right < bounds.right) {
	          $element.css("left", pointerPosition.left - $element.outerWidth());
	        }
	        if (viewport.bottom < bounds.bottom) {
	          $element.css("top", pointerPosition.top - $element.outerHeight());
	        }
	      }

	      function close() {
	        contextMenu.close();
	      }

	      function getPositionPropertiesOfEvent(event) {
	        var position = { };

	        if (event.pageX && event.pageY) {
	          position.top = Math.max(event.pageY, 0);
	          position.left = Math.max(event.pageX, 0);
	        } else {
	          var bounding = angular.element(event.target)[0].getBoundingClientRect();

	          position.top = Math.max(bounding.bottom, 0);
	          position.left = Math.max(bounding.left, 0);
	        }

	        return position;
	      }

	      function getCssPositionPropertiesOfEvent(event) {
	        var position = getPositionPropertiesOfEvent(event);

	        position.top += 'px';
	        position.left += 'px';

	        return position;
	      }

	      function openContextMenu(event) {
	        event.preventDefault();
	        event.stopPropagation();

	        scope.$apply(function() {
	          open(event);
	        });
	      }

	      function closeContextMenu() {
	        scope.$apply(function() {
	          close();
	        });
	      }

	      element.bind(triggerOnEvent, function(event) {
	        openContextMenu(event);
	      });

	      element.bind('keyup', function(event) {
	        // Alt + Shift + F10
	        if (event.keyCode === 121 && event.shiftKey && event.altKey) {
	          if (!contextMenu.active()) {
	            openContextMenu(event);
	          }
	        }
	      });

	      function handleWindowClickEvent(event) {
	        if (contextMenu.active() && event.button !== 2) {
	          closeContextMenu();
	        }
	      }

	      // Firefox treats a right-click as a click and a contextmenu event while other browsers
	      // just treat it as a contextmenu event
	      win.bind('click', handleWindowClickEvent);
	      win.bind(triggerOnEvent, handleWindowClickEvent);

	      win.bind('keyup', function(event) {
	        if (contextMenu.active() && event.keyCode === 27) {
	          closeContextMenu();
	        }
	      });

	      win.on('resize', function(event) {
	        if (target) {
	          var currentTargetPosition = getPosition(target);
	          var position = {
	            top: currentTargetPosition.top + pointerOffset.offsetY,
	            left: currentTargetPosition.left + pointerOffset.offsetX
	          };

	          contextMenu.reposition(position);

	          lastTargetPosition = currentTargetPosition;
	        }
	      });
	    }
	  };
	}]);


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["Mousetrap"] = __webpack_require__(22);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global define:false */
	/**
	 * Copyright 2013 Craig Campbell
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * Mousetrap is a simple keyboard shortcut library for Javascript with
	 * no external dependencies
	 *
	 * @version 1.4.6
	 * @url craig.is/killing/mice
	 */
	(function(window, document, undefined) {

	    /**
	     * mapping of special keycodes to their corresponding keys
	     *
	     * everything in this dictionary cannot use keypress events
	     * so it has to be here to map to the correct keycodes for
	     * keyup/keydown events
	     *
	     * @type {Object}
	     */
	    var _MAP = {
	            8: 'backspace',
	            9: 'tab',
	            13: 'enter',
	            16: 'shift',
	            17: 'ctrl',
	            18: 'alt',
	            20: 'capslock',
	            27: 'esc',
	            32: 'space',
	            33: 'pageup',
	            34: 'pagedown',
	            35: 'end',
	            36: 'home',
	            37: 'left',
	            38: 'up',
	            39: 'right',
	            40: 'down',
	            45: 'ins',
	            46: 'del',
	            91: 'meta',
	            93: 'meta',
	            224: 'meta'
	        },

	        /**
	         * mapping for special characters so they can support
	         *
	         * this dictionary is only used incase you want to bind a
	         * keyup or keydown event to one of these keys
	         *
	         * @type {Object}
	         */
	        _KEYCODE_MAP = {
	            106: '*',
	            107: '+',
	            109: '-',
	            110: '.',
	            111 : '/',
	            186: ';',
	            187: '=',
	            188: ',',
	            189: '-',
	            190: '.',
	            191: '/',
	            192: '`',
	            219: '[',
	            220: '\\',
	            221: ']',
	            222: '\''
	        },

	        /**
	         * this is a mapping of keys that require shift on a US keypad
	         * back to the non shift equivelents
	         *
	         * this is so you can use keyup events with these keys
	         *
	         * note that this will only work reliably on US keyboards
	         *
	         * @type {Object}
	         */
	        _SHIFT_MAP = {
	            '~': '`',
	            '!': '1',
	            '@': '2',
	            '#': '3',
	            '$': '4',
	            '%': '5',
	            '^': '6',
	            '&': '7',
	            '*': '8',
	            '(': '9',
	            ')': '0',
	            '_': '-',
	            '+': '=',
	            ':': ';',
	            '\"': '\'',
	            '<': ',',
	            '>': '.',
	            '?': '/',
	            '|': '\\'
	        },

	        /**
	         * this is a list of special strings you can use to map
	         * to modifier keys when you specify your keyboard shortcuts
	         *
	         * @type {Object}
	         */
	        _SPECIAL_ALIASES = {
	            'option': 'alt',
	            'command': 'meta',
	            'return': 'enter',
	            'escape': 'esc',
	            'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
	        },

	        /**
	         * variable to store the flipped version of _MAP from above
	         * needed to check if we should use keypress or not when no action
	         * is specified
	         *
	         * @type {Object|undefined}
	         */
	        _REVERSE_MAP,

	        /**
	         * a list of all the callbacks setup via Mousetrap.bind()
	         *
	         * @type {Object}
	         */
	        _callbacks = {},

	        /**
	         * direct map of string combinations to callbacks used for trigger()
	         *
	         * @type {Object}
	         */
	        _directMap = {},

	        /**
	         * keeps track of what level each sequence is at since multiple
	         * sequences can start out with the same sequence
	         *
	         * @type {Object}
	         */
	        _sequenceLevels = {},

	        /**
	         * variable to store the setTimeout call
	         *
	         * @type {null|number}
	         */
	        _resetTimer,

	        /**
	         * temporary state where we will ignore the next keyup
	         *
	         * @type {boolean|string}
	         */
	        _ignoreNextKeyup = false,

	        /**
	         * temporary state where we will ignore the next keypress
	         *
	         * @type {boolean}
	         */
	        _ignoreNextKeypress = false,

	        /**
	         * are we currently inside of a sequence?
	         * type of action ("keyup" or "keydown" or "keypress") or false
	         *
	         * @type {boolean|string}
	         */
	        _nextExpectedAction = false;

	    /**
	     * loop through the f keys, f1 to f19 and add them to the map
	     * programatically
	     */
	    for (var i = 1; i < 20; ++i) {
	        _MAP[111 + i] = 'f' + i;
	    }

	    /**
	     * loop through to map numbers on the numeric keypad
	     */
	    for (i = 0; i <= 9; ++i) {
	        _MAP[i + 96] = i;
	    }

	    /**
	     * cross browser add event method
	     *
	     * @param {Element|HTMLDocument} object
	     * @param {string} type
	     * @param {Function} callback
	     * @returns void
	     */
	    function _addEvent(object, type, callback) {
	        if (object.addEventListener) {
	            object.addEventListener(type, callback, false);
	            return;
	        }

	        object.attachEvent('on' + type, callback);
	    }

	    /**
	     * takes the event and returns the key character
	     *
	     * @param {Event} e
	     * @return {string}
	     */
	    function _characterFromEvent(e) {

	        // for keypress events we should return the character as is
	        if (e.type == 'keypress') {
	            var character = String.fromCharCode(e.which);

	            // if the shift key is not pressed then it is safe to assume
	            // that we want the character to be lowercase.  this means if
	            // you accidentally have caps lock on then your key bindings
	            // will continue to work
	            //
	            // the only side effect that might not be desired is if you
	            // bind something like 'A' cause you want to trigger an
	            // event when capital A is pressed caps lock will no longer
	            // trigger the event.  shift+a will though.
	            if (!e.shiftKey) {
	                character = character.toLowerCase();
	            }

	            return character;
	        }

	        // for non keypress events the special maps are needed
	        if (_MAP[e.which]) {
	            return _MAP[e.which];
	        }

	        if (_KEYCODE_MAP[e.which]) {
	            return _KEYCODE_MAP[e.which];
	        }

	        // if it is not in the special map

	        // with keydown and keyup events the character seems to always
	        // come in as an uppercase character whether you are pressing shift
	        // or not.  we should make sure it is always lowercase for comparisons
	        return String.fromCharCode(e.which).toLowerCase();
	    }

	    /**
	     * checks if two arrays are equal
	     *
	     * @param {Array} modifiers1
	     * @param {Array} modifiers2
	     * @returns {boolean}
	     */
	    function _modifiersMatch(modifiers1, modifiers2) {
	        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
	    }

	    /**
	     * resets all sequence counters except for the ones passed in
	     *
	     * @param {Object} doNotReset
	     * @returns void
	     */
	    function _resetSequences(doNotReset) {
	        doNotReset = doNotReset || {};

	        var activeSequences = false,
	            key;

	        for (key in _sequenceLevels) {
	            if (doNotReset[key]) {
	                activeSequences = true;
	                continue;
	            }
	            _sequenceLevels[key] = 0;
	        }

	        if (!activeSequences) {
	            _nextExpectedAction = false;
	        }
	    }

	    /**
	     * finds all callbacks that match based on the keycode, modifiers,
	     * and action
	     *
	     * @param {string} character
	     * @param {Array} modifiers
	     * @param {Event|Object} e
	     * @param {string=} sequenceName - name of the sequence we are looking for
	     * @param {string=} combination
	     * @param {number=} level
	     * @returns {Array}
	     */
	    function _getMatches(character, modifiers, e, sequenceName, combination, level) {
	        var i,
	            callback,
	            matches = [],
	            action = e.type;

	        // if there are no events related to this keycode
	        if (!_callbacks[character]) {
	            return [];
	        }

	        // if a modifier key is coming up on its own we should allow it
	        if (action == 'keyup' && _isModifier(character)) {
	            modifiers = [character];
	        }

	        // loop through all callbacks for the key that was pressed
	        // and see if any of them match
	        for (i = 0; i < _callbacks[character].length; ++i) {
	            callback = _callbacks[character][i];

	            // if a sequence name is not specified, but this is a sequence at
	            // the wrong level then move onto the next match
	            if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
	                continue;
	            }

	            // if the action we are looking for doesn't match the action we got
	            // then we should keep going
	            if (action != callback.action) {
	                continue;
	            }

	            // if this is a keypress event and the meta key and control key
	            // are not pressed that means that we need to only look at the
	            // character, otherwise check the modifiers as well
	            //
	            // chrome will not fire a keypress if meta or control is down
	            // safari will fire a keypress if meta or meta+shift is down
	            // firefox will fire a keypress if meta or control is down
	            if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

	                // when you bind a combination or sequence a second time it
	                // should overwrite the first one.  if a sequenceName or
	                // combination is specified in this call it does just that
	                //
	                // @todo make deleting its own method?
	                var deleteCombo = !sequenceName && callback.combo == combination;
	                var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
	                if (deleteCombo || deleteSequence) {
	                    _callbacks[character].splice(i, 1);
	                }

	                matches.push(callback);
	            }
	        }

	        return matches;
	    }

	    /**
	     * takes a key event and figures out what the modifiers are
	     *
	     * @param {Event} e
	     * @returns {Array}
	     */
	    function _eventModifiers(e) {
	        var modifiers = [];

	        if (e.shiftKey) {
	            modifiers.push('shift');
	        }

	        if (e.altKey) {
	            modifiers.push('alt');
	        }

	        if (e.ctrlKey) {
	            modifiers.push('ctrl');
	        }

	        if (e.metaKey) {
	            modifiers.push('meta');
	        }

	        return modifiers;
	    }

	    /**
	     * prevents default for this event
	     *
	     * @param {Event} e
	     * @returns void
	     */
	    function _preventDefault(e) {
	        if (e.preventDefault) {
	            e.preventDefault();
	            return;
	        }

	        e.returnValue = false;
	    }

	    /**
	     * stops propogation for this event
	     *
	     * @param {Event} e
	     * @returns void
	     */
	    function _stopPropagation(e) {
	        if (e.stopPropagation) {
	            e.stopPropagation();
	            return;
	        }

	        e.cancelBubble = true;
	    }

	    /**
	     * actually calls the callback function
	     *
	     * if your callback function returns false this will use the jquery
	     * convention - prevent default and stop propogation on the event
	     *
	     * @param {Function} callback
	     * @param {Event} e
	     * @returns void
	     */
	    function _fireCallback(callback, e, combo, sequence) {

	        // if this event should not happen stop here
	        if (Mousetrap.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
	            return;
	        }

	        if (callback(e, combo) === false) {
	            _preventDefault(e);
	            _stopPropagation(e);
	        }
	    }

	    /**
	     * handles a character key event
	     *
	     * @param {string} character
	     * @param {Array} modifiers
	     * @param {Event} e
	     * @returns void
	     */
	    function _handleKey(character, modifiers, e) {
	        var callbacks = _getMatches(character, modifiers, e),
	            i,
	            doNotReset = {},
	            maxLevel = 0,
	            processedSequenceCallback = false;

	        // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
	        for (i = 0; i < callbacks.length; ++i) {
	            if (callbacks[i].seq) {
	                maxLevel = Math.max(maxLevel, callbacks[i].level);
	            }
	        }

	        // loop through matching callbacks for this key event
	        for (i = 0; i < callbacks.length; ++i) {

	            // fire for all sequence callbacks
	            // this is because if for example you have multiple sequences
	            // bound such as "g i" and "g t" they both need to fire the
	            // callback for matching g cause otherwise you can only ever
	            // match the first one
	            if (callbacks[i].seq) {

	                // only fire callbacks for the maxLevel to prevent
	                // subsequences from also firing
	                //
	                // for example 'a option b' should not cause 'option b' to fire
	                // even though 'option b' is part of the other sequence
	                //
	                // any sequences that do not match here will be discarded
	                // below by the _resetSequences call
	                if (callbacks[i].level != maxLevel) {
	                    continue;
	                }

	                processedSequenceCallback = true;

	                // keep a list of which sequences were matches for later
	                doNotReset[callbacks[i].seq] = 1;
	                _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
	                continue;
	            }

	            // if there were no sequence matches but we are still here
	            // that means this is a regular match so we should fire that
	            if (!processedSequenceCallback) {
	                _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
	            }
	        }

	        // if the key you pressed matches the type of sequence without
	        // being a modifier (ie "keyup" or "keypress") then we should
	        // reset all sequences that were not matched by this event
	        //
	        // this is so, for example, if you have the sequence "h a t" and you
	        // type "h e a r t" it does not match.  in this case the "e" will
	        // cause the sequence to reset
	        //
	        // modifier keys are ignored because you can have a sequence
	        // that contains modifiers such as "enter ctrl+space" and in most
	        // cases the modifier key will be pressed before the next key
	        //
	        // also if you have a sequence such as "ctrl+b a" then pressing the
	        // "b" key will trigger a "keypress" and a "keydown"
	        //
	        // the "keydown" is expected when there is a modifier, but the
	        // "keypress" ends up matching the _nextExpectedAction since it occurs
	        // after and that causes the sequence to reset
	        //
	        // we ignore keypresses in a sequence that directly follow a keydown
	        // for the same character
	        var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
	        if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
	            _resetSequences(doNotReset);
	        }

	        _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
	    }

	    /**
	     * handles a keydown event
	     *
	     * @param {Event} e
	     * @returns void
	     */
	    function _handleKeyEvent(e) {

	        // normalize e.which for key events
	        // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
	        if (typeof e.which !== 'number') {
	            e.which = e.keyCode;
	        }

	        var character = _characterFromEvent(e);

	        // no character found then stop
	        if (!character) {
	            return;
	        }

	        // need to use === for the character check because the character can be 0
	        if (e.type == 'keyup' && _ignoreNextKeyup === character) {
	            _ignoreNextKeyup = false;
	            return;
	        }

	        Mousetrap.handleKey(character, _eventModifiers(e), e);
	    }

	    /**
	     * determines if the keycode specified is a modifier key or not
	     *
	     * @param {string} key
	     * @returns {boolean}
	     */
	    function _isModifier(key) {
	        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
	    }

	    /**
	     * called to set a 1 second timeout on the specified sequence
	     *
	     * this is so after each key press in the sequence you have 1 second
	     * to press the next key before you have to start over
	     *
	     * @returns void
	     */
	    function _resetSequenceTimer() {
	        clearTimeout(_resetTimer);
	        _resetTimer = setTimeout(_resetSequences, 1000);
	    }

	    /**
	     * reverses the map lookup so that we can look for specific keys
	     * to see what can and can't use keypress
	     *
	     * @return {Object}
	     */
	    function _getReverseMap() {
	        if (!_REVERSE_MAP) {
	            _REVERSE_MAP = {};
	            for (var key in _MAP) {

	                // pull out the numeric keypad from here cause keypress should
	                // be able to detect the keys from the character
	                if (key > 95 && key < 112) {
	                    continue;
	                }

	                if (_MAP.hasOwnProperty(key)) {
	                    _REVERSE_MAP[_MAP[key]] = key;
	                }
	            }
	        }
	        return _REVERSE_MAP;
	    }

	    /**
	     * picks the best action based on the key combination
	     *
	     * @param {string} key - character for key
	     * @param {Array} modifiers
	     * @param {string=} action passed in
	     */
	    function _pickBestAction(key, modifiers, action) {

	        // if no action was picked in we should try to pick the one
	        // that we think would work best for this key
	        if (!action) {
	            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
	        }

	        // modifier keys don't work as expected with keypress,
	        // switch to keydown
	        if (action == 'keypress' && modifiers.length) {
	            action = 'keydown';
	        }

	        return action;
	    }

	    /**
	     * binds a key sequence to an event
	     *
	     * @param {string} combo - combo specified in bind call
	     * @param {Array} keys
	     * @param {Function} callback
	     * @param {string=} action
	     * @returns void
	     */
	    function _bindSequence(combo, keys, callback, action) {

	        // start off by adding a sequence level record for this combination
	        // and setting the level to 0
	        _sequenceLevels[combo] = 0;

	        /**
	         * callback to increase the sequence level for this sequence and reset
	         * all other sequences that were active
	         *
	         * @param {string} nextAction
	         * @returns {Function}
	         */
	        function _increaseSequence(nextAction) {
	            return function() {
	                _nextExpectedAction = nextAction;
	                ++_sequenceLevels[combo];
	                _resetSequenceTimer();
	            };
	        }

	        /**
	         * wraps the specified callback inside of another function in order
	         * to reset all sequence counters as soon as this sequence is done
	         *
	         * @param {Event} e
	         * @returns void
	         */
	        function _callbackAndReset(e) {
	            _fireCallback(callback, e, combo);

	            // we should ignore the next key up if the action is key down
	            // or keypress.  this is so if you finish a sequence and
	            // release the key the final key will not trigger a keyup
	            if (action !== 'keyup') {
	                _ignoreNextKeyup = _characterFromEvent(e);
	            }

	            // weird race condition if a sequence ends with the key
	            // another sequence begins with
	            setTimeout(_resetSequences, 10);
	        }

	        // loop through keys one at a time and bind the appropriate callback
	        // function.  for any key leading up to the final one it should
	        // increase the sequence. after the final, it should reset all sequences
	        //
	        // if an action is specified in the original bind call then that will
	        // be used throughout.  otherwise we will pass the action that the
	        // next key in the sequence should match.  this allows a sequence
	        // to mix and match keypress and keydown events depending on which
	        // ones are better suited to the key provided
	        for (var i = 0; i < keys.length; ++i) {
	            var isFinal = i + 1 === keys.length;
	            var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
	            _bindSingle(keys[i], wrappedCallback, action, combo, i);
	        }
	    }

	    /**
	     * Converts from a string key combination to an array
	     *
	     * @param  {string} combination like "command+shift+l"
	     * @return {Array}
	     */
	    function _keysFromString(combination) {
	        if (combination === '+') {
	            return ['+'];
	        }

	        return combination.split('+');
	    }

	    /**
	     * Gets info for a specific key combination
	     *
	     * @param  {string} combination key combination ("command+s" or "a" or "*")
	     * @param  {string=} action
	     * @returns {Object}
	     */
	    function _getKeyInfo(combination, action) {
	        var keys,
	            key,
	            i,
	            modifiers = [];

	        // take the keys from this pattern and figure out what the actual
	        // pattern is all about
	        keys = _keysFromString(combination);

	        for (i = 0; i < keys.length; ++i) {
	            key = keys[i];

	            // normalize key names
	            if (_SPECIAL_ALIASES[key]) {
	                key = _SPECIAL_ALIASES[key];
	            }

	            // if this is not a keypress event then we should
	            // be smart about using shift keys
	            // this will only work for US keyboards however
	            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
	                key = _SHIFT_MAP[key];
	                modifiers.push('shift');
	            }

	            // if this key is a modifier then add it to the list of modifiers
	            if (_isModifier(key)) {
	                modifiers.push(key);
	            }
	        }

	        // depending on what the key combination is
	        // we will try to pick the best event for it
	        action = _pickBestAction(key, modifiers, action);

	        return {
	            key: key,
	            modifiers: modifiers,
	            action: action
	        };
	    }

	    /**
	     * binds a single keyboard combination
	     *
	     * @param {string} combination
	     * @param {Function} callback
	     * @param {string=} action
	     * @param {string=} sequenceName - name of sequence if part of sequence
	     * @param {number=} level - what part of the sequence the command is
	     * @returns void
	     */
	    function _bindSingle(combination, callback, action, sequenceName, level) {

	        // store a direct mapped reference for use with Mousetrap.trigger
	        _directMap[combination + ':' + action] = callback;

	        // make sure multiple spaces in a row become a single space
	        combination = combination.replace(/\s+/g, ' ');

	        var sequence = combination.split(' '),
	            info;

	        // if this pattern is a sequence of keys then run through this method
	        // to reprocess each pattern one key at a time
	        if (sequence.length > 1) {
	            _bindSequence(combination, sequence, callback, action);
	            return;
	        }

	        info = _getKeyInfo(combination, action);

	        // make sure to initialize array if this is the first time
	        // a callback is added for this key
	        _callbacks[info.key] = _callbacks[info.key] || [];

	        // remove an existing match if there is one
	        _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

	        // add this call back to the array
	        // if it is a sequence put it at the beginning
	        // if not put it at the end
	        //
	        // this is important because the way these are processed expects
	        // the sequence ones to come first
	        _callbacks[info.key][sequenceName ? 'unshift' : 'push']({
	            callback: callback,
	            modifiers: info.modifiers,
	            action: info.action,
	            seq: sequenceName,
	            level: level,
	            combo: combination
	        });
	    }

	    /**
	     * binds multiple combinations to the same callback
	     *
	     * @param {Array} combinations
	     * @param {Function} callback
	     * @param {string|undefined} action
	     * @returns void
	     */
	    function _bindMultiple(combinations, callback, action) {
	        for (var i = 0; i < combinations.length; ++i) {
	            _bindSingle(combinations[i], callback, action);
	        }
	    }

	    // start!
	    _addEvent(document, 'keypress', _handleKeyEvent);
	    _addEvent(document, 'keydown', _handleKeyEvent);
	    _addEvent(document, 'keyup', _handleKeyEvent);

	    var Mousetrap = {

	        /**
	         * binds an event to mousetrap
	         *
	         * can be a single key, a combination of keys separated with +,
	         * an array of keys, or a sequence of keys separated by spaces
	         *
	         * be sure to list the modifier keys first to make sure that the
	         * correct key ends up getting bound (the last key in the pattern)
	         *
	         * @param {string|Array} keys
	         * @param {Function} callback
	         * @param {string=} action - 'keypress', 'keydown', or 'keyup'
	         * @returns void
	         */
	        bind: function(keys, callback, action) {
	            keys = keys instanceof Array ? keys : [keys];
	            _bindMultiple(keys, callback, action);
	            return this;
	        },

	        /**
	         * unbinds an event to mousetrap
	         *
	         * the unbinding sets the callback function of the specified key combo
	         * to an empty function and deletes the corresponding key in the
	         * _directMap dict.
	         *
	         * TODO: actually remove this from the _callbacks dictionary instead
	         * of binding an empty function
	         *
	         * the keycombo+action has to be exactly the same as
	         * it was defined in the bind method
	         *
	         * @param {string|Array} keys
	         * @param {string} action
	         * @returns void
	         */
	        unbind: function(keys, action) {
	            return Mousetrap.bind(keys, function() {}, action);
	        },

	        /**
	         * triggers an event that has already been bound
	         *
	         * @param {string} keys
	         * @param {string=} action
	         * @returns void
	         */
	        trigger: function(keys, action) {
	            if (_directMap[keys + ':' + action]) {
	                _directMap[keys + ':' + action]({}, keys);
	            }
	            return this;
	        },

	        /**
	         * resets the library back to its initial state.  this is useful
	         * if you want to clear out the current keyboard shortcuts and bind
	         * new ones - for example if you switch to another page
	         *
	         * @returns void
	         */
	        reset: function() {
	            _callbacks = {};
	            _directMap = {};
	            return this;
	        },

	       /**
	        * should we stop this event before firing off callbacks
	        *
	        * @param {Event} e
	        * @param {Element} element
	        * @return {boolean}
	        */
	        stopCallback: function(e, element) {

	            // if the element has the class "mousetrap" then no need to stop
	            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
	                return false;
	            }

	            // stop for input, select, and textarea
	            return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
	        },

	        /**
	         * exposes _handleKey publicly so it can be overwritten by extensions
	         */
	        handleKey: _handleKey
	    };

	    // expose mousetrap to the global object
	    window.Mousetrap = Mousetrap;

	    // expose mousetrap as an AMD module
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (Mousetrap), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	}) (window, document);


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.api')
	  .factory('HALAPIResource', ['$timeout',
	      '$q',
	      'PathHelper', __webpack_require__(24)
	  ]);


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	/* globals Hyperagent */
	__webpack_require__(25);

	module.exports = function HALAPIResource($timeout, $q, PathHelper) {
	  'use strict';
	  var configure = function() {
	    Hyperagent.configure('ajax', function(settings) {
	      var deferred = $q.defer(),
	          resolve = settings.success,
	          reject = settings.error;

	      settings.success = deferred.resolve;
	      settings.reject = deferred.reject;

	      deferred.promise.then(function(response) {
	        $timeout(function() { resolve(response); });
	      }, function(reason) {
	        $timeout(function() { reject(reason); });
	      });

	      return jQuery.ajax(settings);
	    });
	    Hyperagent.configure('defer', $q.defer);
	    // keep this if you want null values to not be overwritten by
	    // Hyperagent.js miniscore
	    // this weird line replaces HA miniscore with normal underscore
	    // Freud would be happy with what ('_', _) reminds me of
	    Hyperagent.configure('_', _);
	  };
	  return {
	    setup: function(uri, params) {
	      if (!params) {
	        params = {};
	      }
	      configure();
	      var url = PathHelper.appBasePath + PathHelper.apiV3 + '/' + uri;
	      var link = new Hyperagent.Resource(_.extend({
	        url: url
	      }, params));
	      if (params.method) {
	        link.props.href = url;
	        link.props.method = params.method;
	      }
	      return link;
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(URITemplate, URI) {(function ($) {
	var define, requireModule;

	(function () {
	  'use strict';
	  var registry = {}, seen = {};

	  define = function (name, deps, callback) {
	    registry[name] = { deps: deps, callback: callback };
	  };

	  requireModule = function (name) {
	    if (seen[name]) { return seen[name]; }
	    seen[name] = {};

	    var mod = registry[name],
	        deps = mod.deps,
	        callback = mod.callback,
	        reified = [],
	        exports;

	    for (var i = 0, l = deps.length; i < l; i++) {
	      if (deps[i] === 'exports') {
	        reified.push(exports = {});
	      } else {
	        reified.push(requireModule(deps[i]));
	      }
	    }

	    var value = callback.apply(this, reified);
	    return seen[name] = exports || value;
	  };
	}());

	define("hyperagent",
	  ["hyperagent/resource","hyperagent/properties","hyperagent/curie","hyperagent/config","exports"],
	  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
	    "use strict";
	    var Resource = __dependency1__.Resource;
	    var LazyResource = __dependency1__.LazyResource;
	    var LinkResource = __dependency1__.LinkResource;
	    var Properties = __dependency2__.Properties;
	    var CurieStore = __dependency3__.CurieStore;
	    var _config = __dependency4__.config;

	    function configure(name, value) {
	      _config[name] = value;
	    }


	    __exports__.Resource = Resource;
	    __exports__.Properties = Properties;
	    __exports__.LazyResource = LazyResource;
	    __exports__.LinkResource = LinkResource;
	    __exports__.CurieStore = CurieStore;
	    __exports__.configure = configure;
	    __exports__._config = _config;
	  });
	define("hyperagent/config",
	  ["hyperagent/miniscore","exports"],
	  function(__dependency1__, __exports__) {
	    "use strict";
	    var _ = __dependency1__._;

	    var config = {};

	    // Provide defaults in case we're in a browser.
	    if (typeof window !== 'undefined') {
	      config.ajax = $ && $.ajax && $.ajax.bind && $.ajax.bind($);
	      config.defer = window.Q && window.Q.defer;
	      config._ = _;
	      config.loadHooks = [];
	    }


	    __exports__.config = config;
	  });
	define("hyperagent/curie",
	  ["exports"],
	  function(__exports__) {
	    "use strict";
	    /**
	     * A simple data storage to register and expand CURIES:
	     * http://www.w3.org/TR/curie/
	     */
	    function CurieStore() {
	      this._store = {};
	    }

	    CurieStore.prototype.register = function register(key, value) {
	      this._store[key] = URITemplate(value);
	    };

	    CurieStore._split = function (value) {
	      var index = value.indexOf(':');
	      var curie = value.substring(0, index);
	      var ref = value.substring(index + 1);

	      if (value === -1 || value === (value.length - 1)) {
	        return null;
	      }

	      return [curie, ref];
	    };

	    /**
	     * Boolean if the store is empty.
	     */
	    CurieStore.prototype.empty = function empty() {
	      return Object.keys(this._store).length === 0;
	    };

	    /**
	     * Expands a CURIE value or returns the value back if it cannot be
	     * expanded.
	     */
	    CurieStore.prototype.expand = function expand(value) {
	      var template;
	      var curie = CurieStore._split(value);

	      if (!curie) {
	        return value;
	      }

	      template = this._store[curie[0]];
	      if (template === undefined) {
	        return value;
	      }

	      return template.expand({ rel: curie[1] });
	    };

	    /**
	     * A boolean indicator whether a value can (probably) be expanded.
	     */
	    CurieStore.prototype.canExpand = function canExpand(value) {
	      var curie = CurieStore._split(value);

	      if (!curie) {
	        return false;
	      }

	      return this._store[curie[0]] !== undefined;
	    };

	    __exports__.CurieStore = CurieStore;
	  });
	define("hyperagent/loader",
	  ["hyperagent/config","exports"],
	  function(__dependency1__, __exports__) {
	    "use strict";
	    var config = __dependency1__.config;

	    function loadAjax(options) {
	      var deferred = config.defer();
	      if (options.headers) {
	        config._.extend(options.headers, {
	          'Accept': 'application/hal+json, application/json, */*; q=0.01',
	          'X-Requested-With': 'XMLHttpRequest'
	        });
	      }
	      config.ajax(config._.extend({
	        success: deferred.resolve,
	        error: deferred.reject,
	        dataType: 'html'  // We don't want auto-converting
	      }, options));

	      return deferred.promise;
	    }

	    __exports__.loadAjax = loadAjax;
	  });
	define("hyperagent/miniscore",
	  ["exports"],
	  function(__exports__) {
	    "use strict";
	    /*jshint strict:false */
	    /**
	     * A minimal collection of underscore functions used in the project without
	     * pre-ES5 compatibility.
	     */

	    var _ = {};
	    var breaker = {};

	    _.each = _.forEach = function (obj, iterator, context) {
	      if (obj === null || obj === undefined) {
	        return;
	      }

	      if (obj.forEach === Array.prototype.forEach) {
	        obj.forEach(iterator, context);
	      } else if (obj.length === +obj.length) {
	        for (var i = 0, l = obj.length; i < l; i++) {
	          if (iterator.call(context, obj[i], i, obj) === breaker) {
	            return;
	          }
	        }
	      } else {
	        for (var key in obj) {
	          if (obj.hasOwnProperty(key)) {
	            if (iterator.call(context, obj[key], key, obj) === breaker) {
	              return;
	            }
	          }
	        }
	      }
	    };

	    _.contains = function (obj, target) {
	      if (obj === null || obj === undefined) {
	        return false;
	      }

	      if (obj.indexOf === Array.prototype.indexOf) {
	        return obj.indexOf(target) !== -1;
	      }

	      return _.any(obj, function (value) {
	        return value === target;
	      });
	    };

	    _.pick = function (obj) {
	      var copy = {};
	      var keys = Array.prototype.concat.apply(Array.prototype,
	          Array.prototype.slice.call(arguments, 1));

	      _.each(keys, function (key) {
	        if (key in obj) {
	          copy[key] = obj[key];
	        }
	      });
	      return copy;
	    };

	    _.extend = function (obj) {
	      _.each(Array.prototype.slice.call(arguments, 1), function (source) {
	        if (source) {
	          for (var prop in source) {
	            obj[prop] = source[prop];
	          }
	        }
	      });
	      return obj;
	    };

	    _.defaults = function (obj) {
	      _.each(Array.prototype.slice.call(arguments, 1), function (source) {
	        if (source) {
	          for (var prop in source) {
	            if (obj[prop] === null || obj[prop] === undefined) {
	              obj[prop] = source[prop];
	            }
	          }
	        }
	      });
	      return obj;
	    };

	    _.clone = function (obj) {
	      if (obj !== Object(obj)) {
	        return obj;
	      }

	      return Array.isArray(obj) ? obj.slice() : _.extend({}, obj);
	    };

	    __exports__._ = _;
	  });
	define("hyperagent/properties",
	  ["hyperagent/config","exports"],
	  function(__dependency1__, __exports__) {
	    "use strict";
	    var config = __dependency1__.config;

	    function Properties(response, options) {
	      // XXX: This function is too large. Let's figure out if we could instead build
	      // one large object for defineProperties first and call on that in the end
	      // and if that would make the code cleaner.
	      options = options || {};
	      if (Object(response) !== response) {
	        throw new Error('The Properties argument must be an object.');
	      }
	      // Overwrite the response object with the original properties if provided.
	      config._.defaults(response, options.original || {});

	      var skipped = ['_links', '_embedded'];
	      Object.keys(response).forEach(function (key) {
	        if (!config._.contains(skipped, key)) {
	          this[key] = response[key];
	        }
	      }.bind(this));

	      // Set up curies
	      var curies = options.curies;
	      if (!curies) {
	        return;
	      }

	      Object.keys(this).forEach(function (key) {
	        if (curies.canExpand(key)) {
	          Object.defineProperty(this, curies.expand(key), {
	            enumerable: true,
	            value: this[key]
	          });
	        }
	      }.bind(this));
	    }

	    __exports__.Properties = Properties;
	  });
	define("hyperagent/resource",
	  ["hyperagent/config","hyperagent/loader","hyperagent/properties","hyperagent/curie","exports"],
	  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
	    "use strict";
	    var config = __dependency1__.config;
	    var loadAjax = __dependency2__.loadAjax;
	    var Properties = __dependency3__.Properties;
	    var CurieStore = __dependency4__.CurieStore;
	    /*jshint strict:false, latedef:false */

	    var _ = config._;

	    function Resource(args) {
	      if (Object(args) === args) {
	        this._options = args;
	      } else {
	        this._options = { url: args };
	      }

	      // Create empty attributes by default.
	      this.props = new Properties({});
	      this.embedded = {};
	      this.links = {};
	      this.curies = new CurieStore();

	      // Set up default loadHooks and add configurables to the end.
	      this._loadHooks = [
	        this._loadLinks,
	        this._loadEmbedded,
	        this._loadProperties
	      ].concat(config.loadHooks);

	      this.loaded = false;
	    }

	    Resource.factory = function (Cls) {
	      return function (object, options) {
	        return new Cls(object, options);
	      };
	    };

	    /**
	     * Fetch the resource from server at the resource's URL using the `loadAjax`
	     * module. By default the following instance options are passed to the AJAX
	     * function:
	     *
	     * - headers
	     * - username
	     * - password
	     * - url (not directly set by the user)
	     *
	     * In addition, all options from `options.ajax` of the Resource instance are
	     * mixed in.
	     *
	     * Parameters:
	     * - options:
	     *   - force: defaults to false, whether to force a new request if the result is
	     *   cached, i. e this resource is already marked as `loaded`.
	     *   - ajax: optional hash of options to override the Resource AJAX options.
	     *
	     * Returns a promise on the this Resource instance.
	     */
	    Resource.prototype.fetch = function fetch(options) {
	      options = _.defaults(options || {}, { force: false });

	      if (this.loaded && !options.force) {
	        // Could use Q sugar here, but that would break compatibility with other
	        // Promise/A+ implementations.
	        var deferred = config.defer();
	        deferred.resolve(this);
	        return deferred.promise;
	      }

	      // Pick only AJAX-relevant options.
	      var ajaxOptions = _.pick(this._options, 'headers', 'username',
	          'password', 'url');
	      if (this._options.ajax) {
	        _.extend(ajaxOptions, this._options.ajax);
	      }
	      if (options.ajax) {
	        _.extend(ajaxOptions, options.ajax);

	      }

	      return loadAjax(ajaxOptions).then(function _ajaxThen(response) {
	        this._parse(response);
	        this.loaded = true;

	        // Return the agent back.
	        return this;
	      }.bind(this));
	    };

	    Resource.prototype.url = function url() {
	      return this._options.url;
	    };

	    /**
	     * Creates a new link resource identified by the given `rel` and expands the link
	     * template if params are provided.
	     *
	     * Arguments:
	     *  - rel: The rel of the link.
	     *  - params: Optional parameters to expand the link if it is a templated link.
	     */
	    Resource.prototype.link = function link(rel, params) {
	      var _link = this.links[rel];
	      if (params) {
	        _link.expand(params);
	      }

	      return _link;
	    };

	    /**
	     * Parses a response string.
	     */
	    Resource.prototype._parse = function _parse(response) {
	      if(!response) {
	         // Intercept empty responses from DELETEs
	        response = "{}";
	      }
	      var object = JSON.parse(response);
	      this._load(object);
	    };

	    /**
	     * Loads the Resource.links resources on creation of the object.
	     */
	    Resource.prototype._loadLinks = function _loadLinks(object) {
	      // HAL actually defines this as OPTIONAL
	      if (object._links) {
	        if (object._links.curies) {
	          this._loadCuries(object._links.curies);
	          // Don't expose these through the normal link interface.
	          delete object._links.curies;
	        }

	        // Don't access through this.links to avoid triggering recursions
	        if (object._links.self) {
	          this._navigateUrl(object._links.self.href);
	        }

	        this.links = new LazyResource(this, object._links, {
	          factory: Resource.factory(LinkResource),
	          curies: this.curies
	        });
	      }
	    };

	    /**
	     * Loads the Resource.embedded resources on creation of the object.
	     */
	    Resource.prototype._loadEmbedded = function _loadEmbedded(object) {
	      if (object._embedded) {
	        this.embedded = new LazyResource(this, object._embedded, {
	          factory: Resource.factory(EmbeddedResource),
	          curies: this.curies
	        });
	      }
	    };


	    /**
	     * Loads the Resource.props resources on creation of the object.
	     */
	    Resource.prototype._loadProperties = function _loadProperties(object) {
	      // Must come after _loadCuries
	      this.props = new Properties(object, {
	        curies: this.curies,
	        original: this.props
	      });
	    };

	    Resource.prototype._load = function _load(object) {
	      this._loadHooks.forEach(function (hook) {
	        hook.bind(this)(object);
	      }.bind(this));
	    };

	    /**
	     * Saves a list of curies to the local curie store.
	     */
	    Resource.prototype._loadCuries = function _loadCuries(curies) {
	      if (!Array.isArray(curies)) {
	        console.warn('Expected `curies` to be an array, got instead: ', curies);
	        return;
	      }

	      curies.forEach(function (value) {
	        if (!value.templated) {
	          console.warn('CURIE links should always be marked as templated: ', value);
	        }

	        this.curies.register(value.name, value.href);
	      }.bind(this));
	    };

	    Resource.resolveUrl = function _resolveUrl(oldUrl, newUrl) {
	      if (!newUrl) {
	        throw new Error('Expected absolute or relative URL, but got: ' + newUrl);
	      }

	      var uri = new URI(newUrl);
	      if (uri.is('absolute')) {
	        // Replace the current url if it's absolute
	        return uri.normalize().toString();
	      } else if (newUrl[0] === '/') {
	        return (new URI(oldUrl))
	          .resource(newUrl).normalize().toString();
	      } else {
	        return new URI([oldUrl, newUrl].join('/'))
	          .normalize().toString();
	      }
	    };

	    /**
	     * Updates the internal URL to the new, relative change. This is not an
	     * idempotent function.
	     *
	     * Returns a boolean indicating whether the navigation changed the previously
	     * used URL or not.
	     */
	    Resource.prototype._navigateUrl = function _navigateUrl(value) {
	      var newUrl = Resource.resolveUrl(this._options.url, value);
	      if (newUrl !== this._options.url) {
	        this._options.url = newUrl;
	        return true;
	      }

	      return false;
	    };

	    /**
	     * Wrap a resource inside a lazy container that loads all properties of the
	     * given `object` on access in a Resource.
	     *
	     * Arguments:
	     *  - parentResource: the parent resource the new lazy one inherits its options
	     *    from
	     *  - object: the object to wrap
	     *  - options: optional options
	     *    - factory: A function taking a the object and the options to wrap inside a
	     *      Resource.
	     */
	    function LazyResource(parentResource, object, options) {
	      this._parent = parentResource;
	      this._options = _.defaults(options || {}, {
	        factory: function (object, options) {
	          var resource = new Resource(options);
	          resource._load(object);

	          return resource;
	        }
	      });

	      // Set _parent and _options to not be enumerable, to allow easy looping over
	      // all entries.
	      Object.defineProperties(this, {
	        _parent: {
	          enumerable: false
	        },
	        _options: {
	          enumerable: false
	        }
	      });

	      _.each(object, function (obj, key) {
	        if (Array.isArray(obj)) {
	          this._setLazyArray(key, obj, true);
	        } else {
	          this._setLazyObject(key, obj, true);
	        }
	      }.bind(this));

	      // Again for curies
	      var curies = this._options.curies;
	      if (curies && !curies.empty()) {
	        _.each(object, function (obj, key) {
	          if (curies.canExpand(key)) {
	            var expanded = curies.expand(key);

	            if (Array.isArray(obj)) {
	              this._setLazyArray(expanded, obj, false);
	            } else {
	              this._setLazyObject(expanded, obj, false);
	            }
	          }
	        }.bind(this));
	      }
	    }

	    LazyResource.prototype._setLazyObject = function _setLazy(key, object, enumerable) {
	      // Define a lazy getter for the resource.
	      Object.defineProperty(this, key, {
	        enumerable: enumerable,
	        get: this._makeGetter(object)
	      });
	    };

	    LazyResource.prototype._setLazyArray = function _setLazy(key, array, enumerable) {
	      // Define a lazy getter for the resource that contains the array.
	      Object.defineProperty(this, key, {
	        enumerable: enumerable,
	        get: function () {
	          return array.map(function (object) {
	            return this._makeGetter(object)();
	          }.bind(this));
	        }
	      });
	    };

	    LazyResource.prototype._makeGetter = function _makeGetter(object) {
	      var parent = this._parent;
	      var options = this._options;
	      var instance;

	      return function () {
	        if (instance === undefined) {
	          instance = new options.factory(object, _.clone(parent._options));
	        }
	        return instance;
	      };
	    };


	    function EmbeddedResource(object, options) {
	      // Inherit from Resource
	      Resource.call(this, options);

	      this._load(object);

	      // Embedded resources are alsways considered as loaded.
	      this.loaded = true;
	    }

	    _.extend(EmbeddedResource.prototype, Resource.prototype);

	    function LinkResource(object, options) {
	      // Inherit from Resource
	      Resource.call(this, options);

	      // Store href for later expansion in case it's a templated URI.
	      this.href = object.href;
	      this.templated = object.templated;

	      // The href is OPTIONAL, even for links.
	      if (!this.href) {
	        console.warn('Link object did not provide an `href`: ', object);
	      } else if (!this.templated) {
	        this._navigateUrl(this.href);
	      }

	      this._load(object);
	    }

	    _.extend(LinkResource.prototype, Resource.prototype);

	    LinkResource.prototype.expand = function (params) {
	      if (!this.templated) {
	        console.log('Trying to expand non-templated LinkResource: ', this);
	      }

	      var url = (new URI.expand(this.href, params)).toString();

	      // If expansion triggered a URL change, consider the current data stale.
	      if (this._navigateUrl(url)) {
	        this.loaded = false;
	      }
	    };

	    LinkResource.prototype.toString = function () {
	      return 'LinkResource(url="' + this.url() + '")';
	    };


	    __exports__.Resource = Resource;
	    __exports__.LazyResource = LazyResource;
	    __exports__.LinkResource = LinkResource;
	  });
	window.Hyperagent = requireModule('hyperagent');
	}(jQuery));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26), __webpack_require__(27)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * URI.js - Mutating URLs
	 * URI Template Support - http://tools.ietf.org/html/rfc6570
	 *
	 * Version: 1.15.0
	 *
	 * Author: Rodney Rehm
	 * Web: http://medialize.github.io/URI.js/
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *   GPL v3 http://opensource.org/licenses/GPL-3.0
	 *
	 */
	(function (root, factory) {
	  'use strict';
	  // https://github.com/umdjs/umd/blob/master/returnExports.js
	  if (true) {
	    // Node
	    module.exports = factory(__webpack_require__(27));
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(['./URI'], factory);
	  } else {
	    // Browser globals (root is window)
	    root.URITemplate = factory(root.URI, root);
	  }
	}(this, function (URI, root) {
	  'use strict';
	  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
	  /*jshint camelcase: false */

	  // save current URITemplate variable, if any
	  var _URITemplate = root && root.URITemplate;

	  var hasOwn = Object.prototype.hasOwnProperty;
	  function URITemplate(expression) {
	    // serve from cache where possible
	    if (URITemplate._cache[expression]) {
	      return URITemplate._cache[expression];
	    }

	    // Allow instantiation without the 'new' keyword
	    if (!(this instanceof URITemplate)) {
	      return new URITemplate(expression);
	    }

	    this.expression = expression;
	    URITemplate._cache[expression] = this;
	    return this;
	  }

	  function Data(data) {
	    this.data = data;
	    this.cache = {};
	  }

	  var p = URITemplate.prototype;
	  // list of operators and their defined options
	  var operators = {
	    // Simple string expansion
	    '' : {
	      prefix: '',
	      separator: ',',
	      named: false,
	      empty_name_separator: false,
	      encode : 'encode'
	    },
	    // Reserved character strings
	    '+' : {
	      prefix: '',
	      separator: ',',
	      named: false,
	      empty_name_separator: false,
	      encode : 'encodeReserved'
	    },
	    // Fragment identifiers prefixed by '#'
	    '#' : {
	      prefix: '#',
	      separator: ',',
	      named: false,
	      empty_name_separator: false,
	      encode : 'encodeReserved'
	    },
	    // Name labels or extensions prefixed by '.'
	    '.' : {
	      prefix: '.',
	      separator: '.',
	      named: false,
	      empty_name_separator: false,
	      encode : 'encode'
	    },
	    // Path segments prefixed by '/'
	    '/' : {
	      prefix: '/',
	      separator: '/',
	      named: false,
	      empty_name_separator: false,
	      encode : 'encode'
	    },
	    // Path parameter name or name=value pairs prefixed by ';'
	    ';' : {
	      prefix: ';',
	      separator: ';',
	      named: true,
	      empty_name_separator: false,
	      encode : 'encode'
	    },
	    // Query component beginning with '?' and consisting
	    // of name=value pairs separated by '&'; an
	    '?' : {
	      prefix: '?',
	      separator: '&',
	      named: true,
	      empty_name_separator: true,
	      encode : 'encode'
	    },
	    // Continuation of query-style &name=value pairs
	    // within a literal query component.
	    '&' : {
	      prefix: '&',
	      separator: '&',
	      named: true,
	      empty_name_separator: true,
	      encode : 'encode'
	    }

	    // The operator characters equals ("="), comma (","), exclamation ("!"),
	    // at sign ("@"), and pipe ("|") are reserved for future extensions.
	  };

	  // storage for already parsed templates
	  URITemplate._cache = {};
	  // pattern to identify expressions [operator, variable-list] in template
	  URITemplate.EXPRESSION_PATTERN = /\{([^a-zA-Z0-9%_]?)([^\}]+)(\}|$)/g;
	  // pattern to identify variables [name, explode, maxlength] in variable-list
	  URITemplate.VARIABLE_PATTERN = /^([^*:]+)((\*)|:(\d+))?$/;
	  // pattern to verify variable name integrity
	  URITemplate.VARIABLE_NAME_PATTERN = /[^a-zA-Z0-9%_]/;

	  // expand parsed expression (expression, not template!)
	  URITemplate.expand = function(expression, data) {
	    // container for defined options for the given operator
	    var options = operators[expression.operator];
	    // expansion type (include keys or not)
	    var type = options.named ? 'Named' : 'Unnamed';
	    // list of variables within the expression
	    var variables = expression.variables;
	    // result buffer for evaluating the expression
	    var buffer = [];
	    var d, variable, i;

	    for (i = 0; (variable = variables[i]); i++) {
	      // fetch simplified data source
	      d = data.get(variable.name);
	      if (!d.val.length) {
	        if (d.type) {
	          // empty variables (empty string)
	          // still lead to a separator being appended!
	          buffer.push('');
	        }
	        // no data, no action
	        continue;
	      }

	      // expand the given variable
	      buffer.push(URITemplate['expand' + type](
	        d,
	        options,
	        variable.explode,
	        variable.explode && options.separator || ',',
	        variable.maxlength,
	        variable.name
	      ));
	    }

	    if (buffer.length) {
	      return options.prefix + buffer.join(options.separator);
	    } else {
	      // prefix is not prepended for empty expressions
	      return '';
	    }
	  };
	  // expand a named variable
	  URITemplate.expandNamed = function(d, options, explode, separator, length, name) {
	    // variable result buffer
	    var result = '';
	    // peformance crap
	    var encode = options.encode;
	    var empty_name_separator = options.empty_name_separator;
	    // flag noting if values are already encoded
	    var _encode = !d[encode].length;
	    // key for named expansion
	    var _name = d.type === 2 ? '': URI[encode](name);
	    var _value, i, l;

	    // for each found value
	    for (i = 0, l = d.val.length; i < l; i++) {
	      if (length) {
	        // maxlength must be determined before encoding can happen
	        _value = URI[encode](d.val[i][1].substring(0, length));
	        if (d.type === 2) {
	          // apply maxlength to keys of objects as well
	          _name = URI[encode](d.val[i][0].substring(0, length));
	        }
	      } else if (_encode) {
	        // encode value
	        _value = URI[encode](d.val[i][1]);
	        if (d.type === 2) {
	          // encode name and cache encoded value
	          _name = URI[encode](d.val[i][0]);
	          d[encode].push([_name, _value]);
	        } else {
	          // cache encoded value
	          d[encode].push([undefined, _value]);
	        }
	      } else {
	        // values are already encoded and can be pulled from cache
	        _value = d[encode][i][1];
	        if (d.type === 2) {
	          _name = d[encode][i][0];
	        }
	      }

	      if (result) {
	        // unless we're the first value, prepend the separator
	        result += separator;
	      }

	      if (!explode) {
	        if (!i) {
	          // first element, so prepend variable name
	          result += URI[encode](name) + (empty_name_separator || _value ? '=' : '');
	        }

	        if (d.type === 2) {
	          // without explode-modifier, keys of objects are returned comma-separated
	          result += _name + ',';
	        }

	        result += _value;
	      } else {
	        // only add the = if it is either default (?&) or there actually is a value (;)
	        result += _name + (empty_name_separator || _value ? '=' : '') + _value;
	      }
	    }

	    return result;
	  };
	  // expand an unnamed variable
	  URITemplate.expandUnnamed = function(d, options, explode, separator, length) {
	    // variable result buffer
	    var result = '';
	    // performance crap
	    var encode = options.encode;
	    var empty_name_separator = options.empty_name_separator;
	    // flag noting if values are already encoded
	    var _encode = !d[encode].length;
	    var _name, _value, i, l;

	    // for each found value
	    for (i = 0, l = d.val.length; i < l; i++) {
	      if (length) {
	        // maxlength must be determined before encoding can happen
	        _value = URI[encode](d.val[i][1].substring(0, length));
	      } else if (_encode) {
	        // encode and cache value
	        _value = URI[encode](d.val[i][1]);
	        d[encode].push([
	          d.type === 2 ? URI[encode](d.val[i][0]) : undefined,
	          _value
	        ]);
	      } else {
	        // value already encoded, pull from cache
	        _value = d[encode][i][1];
	      }

	      if (result) {
	        // unless we're the first value, prepend the separator
	        result += separator;
	      }

	      if (d.type === 2) {
	        if (length) {
	          // maxlength also applies to keys of objects
	          _name = URI[encode](d.val[i][0].substring(0, length));
	        } else {
	          // at this point the name must already be encoded
	          _name = d[encode][i][0];
	        }

	        result += _name;
	        if (explode) {
	          // explode-modifier separates name and value by "="
	          result += (empty_name_separator || _value ? '=' : '');
	        } else {
	          // no explode-modifier separates name and value by ","
	          result += ',';
	        }
	      }

	      result += _value;
	    }

	    return result;
	  };

	  URITemplate.noConflict = function() {
	    if (root.URITemplate === URITemplate) {
	      root.URITemplate = _URITemplate;
	    }

	    return URITemplate;
	  };

	  // expand template through given data map
	  p.expand = function(data) {
	    var result = '';

	    if (!this.parts || !this.parts.length) {
	      // lazilyy parse the template
	      this.parse();
	    }

	    if (!(data instanceof Data)) {
	      // make given data available through the
	      // optimized data handling thingie
	      data = new Data(data);
	    }

	    for (var i = 0, l = this.parts.length; i < l; i++) {
	      /*jshint laxbreak: true */
	      result += typeof this.parts[i] === 'string'
	        // literal string
	        ? this.parts[i]
	        // expression
	        : URITemplate.expand(this.parts[i], data);
	      /*jshint laxbreak: false */
	    }

	    return result;
	  };
	  // parse template into action tokens
	  p.parse = function() {
	    // performance crap
	    var expression = this.expression;
	    var ePattern = URITemplate.EXPRESSION_PATTERN;
	    var vPattern = URITemplate.VARIABLE_PATTERN;
	    var nPattern = URITemplate.VARIABLE_NAME_PATTERN;
	    // token result buffer
	    var parts = [];
	      // position within source template
	    var pos = 0;
	    var variables, eMatch, vMatch;

	    // RegExp is shared accross all templates,
	    // which requires a manual reset
	    ePattern.lastIndex = 0;
	    // I don't like while(foo = bar()) loops,
	    // to make things simpler I go while(true) and break when required
	    while (true) {
	      eMatch = ePattern.exec(expression);
	      if (eMatch === null) {
	        // push trailing literal
	        parts.push(expression.substring(pos));
	        break;
	      } else {
	        // push leading literal
	        parts.push(expression.substring(pos, eMatch.index));
	        pos = eMatch.index + eMatch[0].length;
	      }

	      if (!operators[eMatch[1]]) {
	        throw new Error('Unknown Operator "' + eMatch[1]  + '" in "' + eMatch[0] + '"');
	      } else if (!eMatch[3]) {
	        throw new Error('Unclosed Expression "' + eMatch[0]  + '"');
	      }

	      // parse variable-list
	      variables = eMatch[2].split(',');
	      for (var i = 0, l = variables.length; i < l; i++) {
	        vMatch = variables[i].match(vPattern);
	        if (vMatch === null) {
	          throw new Error('Invalid Variable "' + variables[i] + '" in "' + eMatch[0] + '"');
	        } else if (vMatch[1].match(nPattern)) {
	          throw new Error('Invalid Variable Name "' + vMatch[1] + '" in "' + eMatch[0] + '"');
	        }

	        variables[i] = {
	          name: vMatch[1],
	          explode: !!vMatch[3],
	          maxlength: vMatch[4] && parseInt(vMatch[4], 10)
	        };
	      }

	      if (!variables.length) {
	        throw new Error('Expression Missing Variable(s) "' + eMatch[0] + '"');
	      }

	      parts.push({
	        expression: eMatch[0],
	        operator: eMatch[1],
	        variables: variables
	      });
	    }

	    if (!parts.length) {
	      // template doesn't contain any expressions
	      // so it is a simple literal string
	      // this probably should fire a warning or something?
	      parts.push(expression);
	    }

	    this.parts = parts;
	    return this;
	  };

	  // simplify data structures
	  Data.prototype.get = function(key) {
	    // performance crap
	    var data = this.data;
	    // cache for processed data-point
	    var d = {
	      // type of data 0: undefined/null, 1: string, 2: object, 3: array
	      type: 0,
	      // original values (except undefined/null)
	      val: [],
	      // cache for encoded values (only for non-maxlength expansion)
	      encode: [],
	      encodeReserved: []
	    };
	    var i, l, value;

	    if (this.cache[key] !== undefined) {
	      // we've already processed this key
	      return this.cache[key];
	    }

	    this.cache[key] = d;

	    if (String(Object.prototype.toString.call(data)) === '[object Function]') {
	      // data itself is a callback (global callback)
	      value = data(key);
	    } else if (String(Object.prototype.toString.call(data[key])) === '[object Function]') {
	      // data is a map of callbacks (local callback)
	      value = data[key](key);
	    } else {
	      // data is a map of data
	      value = data[key];
	    }

	    // generalize input into [ [name1, value1], [name2, value2], … ]
	    // so expansion has to deal with a single data structure only
	    if (value === undefined || value === null) {
	      // undefined and null values are to be ignored completely
	      return d;
	    } else if (String(Object.prototype.toString.call(value)) === '[object Array]') {
	      for (i = 0, l = value.length; i < l; i++) {
	        if (value[i] !== undefined && value[i] !== null) {
	          // arrays don't have names
	          d.val.push([undefined, String(value[i])]);
	        }
	      }

	      if (d.val.length) {
	        // only treat non-empty arrays as arrays
	        d.type = 3; // array
	      }
	    } else if (String(Object.prototype.toString.call(value)) === '[object Object]') {
	      for (i in value) {
	        if (hasOwn.call(value, i) && value[i] !== undefined && value[i] !== null) {
	          // objects have keys, remember them for named expansion
	          d.val.push([i, String(value[i])]);
	        }
	      }

	      if (d.val.length) {
	        // only treat non-empty objects as objects
	        d.type = 2; // object
	      }
	    } else {
	      d.type = 1; // primitive string (could've been string, number, boolean and objects with a toString())
	      // arrays don't have names
	      d.val.push([undefined, String(value)]);
	    }

	    return d;
	  };

	  // hook into URI for fluid access
	  URI.expand = function(expression, data) {
	    var template = new URITemplate(expression);
	    var expansion = template.expand(data);

	    return new URI(expansion);
	  };

	  return URITemplate;
	}));


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * URI.js - Mutating URLs
	 *
	 * Version: 1.15.0
	 *
	 * Author: Rodney Rehm
	 * Web: http://medialize.github.io/URI.js/
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *   GPL v3 http://opensource.org/licenses/GPL-3.0
	 *
	 */
	(function (root, factory) {
	  'use strict';
	  // https://github.com/umdjs/umd/blob/master/returnExports.js
	  if (true) {
	    // Node
	    module.exports = factory(__webpack_require__(28), __webpack_require__(29), __webpack_require__(30));
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
	  } else {
	    // Browser globals (root is window)
	    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
	  }
	}(this, function (punycode, IPv6, SLD, root) {
	  'use strict';
	  /*global location, escape, unescape */
	  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
	  /*jshint camelcase: false */

	  // save current URI variable, if any
	  var _URI = root && root.URI;

	  function URI(url, base) {
	    // Allow instantiation without the 'new' keyword
	    if (!(this instanceof URI)) {
	      return new URI(url, base);
	    }

	    if (url === undefined) {
	      if (arguments.length) {
	        throw new TypeError('undefined is not a valid argument for URI');
	      }

	      if (typeof location !== 'undefined') {
	        url = location.href + '';
	      } else {
	        url = '';
	      }
	    }

	    this.href(url);

	    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
	    if (base !== undefined) {
	      return this.absoluteTo(base);
	    }

	    return this;
	  }

	  URI.version = '1.15.0';

	  var p = URI.prototype;
	  var hasOwn = Object.prototype.hasOwnProperty;

	  function escapeRegEx(string) {
	    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
	    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	  }

	  function getType(value) {
	    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
	    if (value === undefined) {
	      return 'Undefined';
	    }

	    return String(Object.prototype.toString.call(value)).slice(8, -1);
	  }

	  function isArray(obj) {
	    return getType(obj) === 'Array';
	  }

	  function filterArrayValues(data, value) {
	    var lookup = {};
	    var i, length;

	    if (isArray(value)) {
	      for (i = 0, length = value.length; i < length; i++) {
	        lookup[value[i]] = true;
	      }
	    } else {
	      lookup[value] = true;
	    }

	    for (i = 0, length = data.length; i < length; i++) {
	      if (lookup[data[i]] !== undefined) {
	        data.splice(i, 1);
	        length--;
	        i--;
	      }
	    }

	    return data;
	  }

	  function arrayContains(list, value) {
	    var i, length;

	    // value may be string, number, array, regexp
	    if (isArray(value)) {
	      // Note: this can be optimized to O(n) (instead of current O(m * n))
	      for (i = 0, length = value.length; i < length; i++) {
	        if (!arrayContains(list, value[i])) {
	          return false;
	        }
	      }

	      return true;
	    }

	    var _type = getType(value);
	    for (i = 0, length = list.length; i < length; i++) {
	      if (_type === 'RegExp') {
	        if (typeof list[i] === 'string' && list[i].match(value)) {
	          return true;
	        }
	      } else if (list[i] === value) {
	        return true;
	      }
	    }

	    return false;
	  }

	  function arraysEqual(one, two) {
	    if (!isArray(one) || !isArray(two)) {
	      return false;
	    }

	    // arrays can't be equal if they have different amount of content
	    if (one.length !== two.length) {
	      return false;
	    }

	    one.sort();
	    two.sort();

	    for (var i = 0, l = one.length; i < l; i++) {
	      if (one[i] !== two[i]) {
	        return false;
	      }
	    }

	    return true;
	  }

	  URI._parts = function() {
	    return {
	      protocol: null,
	      username: null,
	      password: null,
	      hostname: null,
	      urn: null,
	      port: null,
	      path: null,
	      query: null,
	      fragment: null,
	      // state
	      duplicateQueryParameters: URI.duplicateQueryParameters,
	      escapeQuerySpace: URI.escapeQuerySpace
	    };
	  };
	  // state: allow duplicate query parameters (a=1&a=1)
	  URI.duplicateQueryParameters = false;
	  // state: replaces + with %20 (space in query strings)
	  URI.escapeQuerySpace = true;
	  // static properties
	  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
	  URI.idn_expression = /[^a-z0-9\.-]/i;
	  URI.punycode_expression = /(xn--)/i;
	  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
	  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
	  // credits to Rich Brown
	  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
	  // specification: http://www.ietf.org/rfc/rfc4291.txt
	  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
	  // expression used is "gruber revised" (@gruber v2) determined to be the
	  // best solution in a regex-golf we did a couple of ages ago at
	  // * http://mathiasbynens.be/demo/url-regex
	  // * http://rodneyrehm.de/t/url-regex.html
	  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
	  URI.findUri = {
	    // valid "scheme://" or "www."
	    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
	    // everything up to the next whitespace
	    end: /[\s\r\n]|$/,
	    // trim trailing punctuation captured by end RegExp
	    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/
	  };
	  // http://www.iana.org/assignments/uri-schemes.html
	  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
	  URI.defaultPorts = {
	    http: '80',
	    https: '443',
	    ftp: '21',
	    gopher: '70',
	    ws: '80',
	    wss: '443'
	  };
	  // allowed hostname characters according to RFC 3986
	  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
	  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
	  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
	  // map DOM Elements to their URI attribute
	  URI.domAttributes = {
	    'a': 'href',
	    'blockquote': 'cite',
	    'link': 'href',
	    'base': 'href',
	    'script': 'src',
	    'form': 'action',
	    'img': 'src',
	    'area': 'href',
	    'iframe': 'src',
	    'embed': 'src',
	    'source': 'src',
	    'track': 'src',
	    'input': 'src', // but only if type="image"
	    'audio': 'src',
	    'video': 'src'
	  };
	  URI.getDomAttribute = function(node) {
	    if (!node || !node.nodeName) {
	      return undefined;
	    }

	    var nodeName = node.nodeName.toLowerCase();
	    // <input> should only expose src for type="image"
	    if (nodeName === 'input' && node.type !== 'image') {
	      return undefined;
	    }

	    return URI.domAttributes[nodeName];
	  };

	  function escapeForDumbFirefox36(value) {
	    // https://github.com/medialize/URI.js/issues/91
	    return escape(value);
	  }

	  // encoding / decoding according to RFC3986
	  function strictEncodeURIComponent(string) {
	    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
	    return encodeURIComponent(string)
	      .replace(/[!'()*]/g, escapeForDumbFirefox36)
	      .replace(/\*/g, '%2A');
	  }
	  URI.encode = strictEncodeURIComponent;
	  URI.decode = decodeURIComponent;
	  URI.iso8859 = function() {
	    URI.encode = escape;
	    URI.decode = unescape;
	  };
	  URI.unicode = function() {
	    URI.encode = strictEncodeURIComponent;
	    URI.decode = decodeURIComponent;
	  };
	  URI.characters = {
	    pathname: {
	      encode: {
	        // RFC3986 2.1: For consistency, URI producers and normalizers should
	        // use uppercase hexadecimal digits for all percent-encodings.
	        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
	        map: {
	          // -._~!'()*
	          '%24': '$',
	          '%26': '&',
	          '%2B': '+',
	          '%2C': ',',
	          '%3B': ';',
	          '%3D': '=',
	          '%3A': ':',
	          '%40': '@'
	        }
	      },
	      decode: {
	        expression: /[\/\?#]/g,
	        map: {
	          '/': '%2F',
	          '?': '%3F',
	          '#': '%23'
	        }
	      }
	    },
	    reserved: {
	      encode: {
	        // RFC3986 2.1: For consistency, URI producers and normalizers should
	        // use uppercase hexadecimal digits for all percent-encodings.
	        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
	        map: {
	          // gen-delims
	          '%3A': ':',
	          '%2F': '/',
	          '%3F': '?',
	          '%23': '#',
	          '%5B': '[',
	          '%5D': ']',
	          '%40': '@',
	          // sub-delims
	          '%21': '!',
	          '%24': '$',
	          '%26': '&',
	          '%27': '\'',
	          '%28': '(',
	          '%29': ')',
	          '%2A': '*',
	          '%2B': '+',
	          '%2C': ',',
	          '%3B': ';',
	          '%3D': '='
	        }
	      }
	    },
	    urnpath: {
	      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
	      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
	      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
	      // note that the colon character is not featured in the encoding map; this is because URI.js
	      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
	      // should not appear unencoded in a segment itself.
	      // See also the note above about RFC3986 and capitalalized hex digits.
	      encode: {
	        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
	        map: {
	          '%21': '!',
	          '%24': '$',
	          '%27': '\'',
	          '%28': '(',
	          '%29': ')',
	          '%2A': '*',
	          '%2B': '+',
	          '%2C': ',',
	          '%3B': ';',
	          '%3D': '=',
	          '%40': '@'
	        }
	      },
	      // These characters are the characters called out by RFC2141 as "reserved" characters that
	      // should never appear in a URN, plus the colon character (see note above).
	      decode: {
	        expression: /[\/\?#:]/g,
	        map: {
	          '/': '%2F',
	          '?': '%3F',
	          '#': '%23',
	          ':': '%3A'
	        }
	      }
	    }
	  };
	  URI.encodeQuery = function(string, escapeQuerySpace) {
	    var escaped = URI.encode(string + '');
	    if (escapeQuerySpace === undefined) {
	      escapeQuerySpace = URI.escapeQuerySpace;
	    }

	    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
	  };
	  URI.decodeQuery = function(string, escapeQuerySpace) {
	    string += '';
	    if (escapeQuerySpace === undefined) {
	      escapeQuerySpace = URI.escapeQuerySpace;
	    }

	    try {
	      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
	    } catch(e) {
	      // we're not going to mess with weird encodings,
	      // give up and return the undecoded original string
	      // see https://github.com/medialize/URI.js/issues/87
	      // see https://github.com/medialize/URI.js/issues/92
	      return string;
	    }
	  };
	  // generate encode/decode path functions
	  var _parts = {'encode':'encode', 'decode':'decode'};
	  var _part;
	  var generateAccessor = function(_group, _part) {
	    return function(string) {
	      try {
	        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
	          return URI.characters[_group][_part].map[c];
	        });
	      } catch (e) {
	        // we're not going to mess with weird encodings,
	        // give up and return the undecoded original string
	        // see https://github.com/medialize/URI.js/issues/87
	        // see https://github.com/medialize/URI.js/issues/92
	        return string;
	      }
	    };
	  };

	  for (_part in _parts) {
	    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
	    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
	  }

	  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
	    return function(string) {
	      // Why pass in names of functions, rather than the function objects themselves? The
	      // definitions of some functions (but in particular, URI.decode) will occasionally change due
	      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
	      // that the functions we use here are "fresh".
	      var actualCodingFunc;
	      if (!_innerCodingFuncName) {
	        actualCodingFunc = URI[_codingFuncName];
	      } else {
	        actualCodingFunc = function(string) {
	          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
	        };
	      }

	      var segments = (string + '').split(_sep);

	      for (var i = 0, length = segments.length; i < length; i++) {
	        segments[i] = actualCodingFunc(segments[i]);
	      }

	      return segments.join(_sep);
	    };
	  };

	  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
	  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
	  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
	  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
	  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');

	  URI.encodeReserved = generateAccessor('reserved', 'encode');

	  URI.parse = function(string, parts) {
	    var pos;
	    if (!parts) {
	      parts = {};
	    }
	    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

	    // extract fragment
	    pos = string.indexOf('#');
	    if (pos > -1) {
	      // escaping?
	      parts.fragment = string.substring(pos + 1) || null;
	      string = string.substring(0, pos);
	    }

	    // extract query
	    pos = string.indexOf('?');
	    if (pos > -1) {
	      // escaping?
	      parts.query = string.substring(pos + 1) || null;
	      string = string.substring(0, pos);
	    }

	    // extract protocol
	    if (string.substring(0, 2) === '//') {
	      // relative-scheme
	      parts.protocol = null;
	      string = string.substring(2);
	      // extract "user:pass@host:port"
	      string = URI.parseAuthority(string, parts);
	    } else {
	      pos = string.indexOf(':');
	      if (pos > -1) {
	        parts.protocol = string.substring(0, pos) || null;
	        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
	          // : may be within the path
	          parts.protocol = undefined;
	        } else if (string.substring(pos + 1, pos + 3) === '//') {
	          string = string.substring(pos + 3);

	          // extract "user:pass@host:port"
	          string = URI.parseAuthority(string, parts);
	        } else {
	          string = string.substring(pos + 1);
	          parts.urn = true;
	        }
	      }
	    }

	    // what's left must be the path
	    parts.path = string;

	    // and we're done
	    return parts;
	  };
	  URI.parseHost = function(string, parts) {
	    // extract host:port
	    var pos = string.indexOf('/');
	    var bracketPos;
	    var t;

	    if (pos === -1) {
	      pos = string.length;
	    }

	    if (string.charAt(0) === '[') {
	      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
	      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
	      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
	      bracketPos = string.indexOf(']');
	      parts.hostname = string.substring(1, bracketPos) || null;
	      parts.port = string.substring(bracketPos + 2, pos) || null;
	      if (parts.port === '/') {
	        parts.port = null;
	      }
	    } else {
	      var firstColon = string.indexOf(':');
	      var firstSlash = string.indexOf('/');
	      var nextColon = string.indexOf(':', firstColon + 1);
	      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
	        // IPv6 host contains multiple colons - but no port
	        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
	        parts.hostname = string.substring(0, pos) || null;
	        parts.port = null;
	      } else {
	        t = string.substring(0, pos).split(':');
	        parts.hostname = t[0] || null;
	        parts.port = t[1] || null;
	      }
	    }

	    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
	      pos++;
	      string = '/' + string;
	    }

	    return string.substring(pos) || '/';
	  };
	  URI.parseAuthority = function(string, parts) {
	    string = URI.parseUserinfo(string, parts);
	    return URI.parseHost(string, parts);
	  };
	  URI.parseUserinfo = function(string, parts) {
	    // extract username:password
	    var firstSlash = string.indexOf('/');
	    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
	    var t;

	    // authority@ must come before /path
	    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
	      t = string.substring(0, pos).split(':');
	      parts.username = t[0] ? URI.decode(t[0]) : null;
	      t.shift();
	      parts.password = t[0] ? URI.decode(t.join(':')) : null;
	      string = string.substring(pos + 1);
	    } else {
	      parts.username = null;
	      parts.password = null;
	    }

	    return string;
	  };
	  URI.parseQuery = function(string, escapeQuerySpace) {
	    if (!string) {
	      return {};
	    }

	    // throw out the funky business - "?"[name"="value"&"]+
	    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

	    if (!string) {
	      return {};
	    }

	    var items = {};
	    var splits = string.split('&');
	    var length = splits.length;
	    var v, name, value;

	    for (var i = 0; i < length; i++) {
	      v = splits[i].split('=');
	      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
	      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
	      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

	      if (hasOwn.call(items, name)) {
	        if (typeof items[name] === 'string') {
	          items[name] = [items[name]];
	        }

	        items[name].push(value);
	      } else {
	        items[name] = value;
	      }
	    }

	    return items;
	  };

	  URI.build = function(parts) {
	    var t = '';

	    if (parts.protocol) {
	      t += parts.protocol + ':';
	    }

	    if (!parts.urn && (t || parts.hostname)) {
	      t += '//';
	    }

	    t += (URI.buildAuthority(parts) || '');

	    if (typeof parts.path === 'string') {
	      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
	        t += '/';
	      }

	      t += parts.path;
	    }

	    if (typeof parts.query === 'string' && parts.query) {
	      t += '?' + parts.query;
	    }

	    if (typeof parts.fragment === 'string' && parts.fragment) {
	      t += '#' + parts.fragment;
	    }
	    return t;
	  };
	  URI.buildHost = function(parts) {
	    var t = '';

	    if (!parts.hostname) {
	      return '';
	    } else if (URI.ip6_expression.test(parts.hostname)) {
	      t += '[' + parts.hostname + ']';
	    } else {
	      t += parts.hostname;
	    }

	    if (parts.port) {
	      t += ':' + parts.port;
	    }

	    return t;
	  };
	  URI.buildAuthority = function(parts) {
	    return URI.buildUserinfo(parts) + URI.buildHost(parts);
	  };
	  URI.buildUserinfo = function(parts) {
	    var t = '';

	    if (parts.username) {
	      t += URI.encode(parts.username);

	      if (parts.password) {
	        t += ':' + URI.encode(parts.password);
	      }

	      t += '@';
	    }

	    return t;
	  };
	  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
	    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
	    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
	    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
	    // URI.js treats the query string as being application/x-www-form-urlencoded
	    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

	    var t = '';
	    var unique, key, i, length;
	    for (key in data) {
	      if (hasOwn.call(data, key) && key) {
	        if (isArray(data[key])) {
	          unique = {};
	          for (i = 0, length = data[key].length; i < length; i++) {
	            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
	              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
	              if (duplicateQueryParameters !== true) {
	                unique[data[key][i] + ''] = true;
	              }
	            }
	          }
	        } else if (data[key] !== undefined) {
	          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
	        }
	      }
	    }

	    return t.substring(1);
	  };
	  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
	    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
	    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
	    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
	  };

	  URI.addQuery = function(data, name, value) {
	    if (typeof name === 'object') {
	      for (var key in name) {
	        if (hasOwn.call(name, key)) {
	          URI.addQuery(data, key, name[key]);
	        }
	      }
	    } else if (typeof name === 'string') {
	      if (data[name] === undefined) {
	        data[name] = value;
	        return;
	      } else if (typeof data[name] === 'string') {
	        data[name] = [data[name]];
	      }

	      if (!isArray(value)) {
	        value = [value];
	      }

	      data[name] = (data[name] || []).concat(value);
	    } else {
	      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
	    }
	  };
	  URI.removeQuery = function(data, name, value) {
	    var i, length, key;

	    if (isArray(name)) {
	      for (i = 0, length = name.length; i < length; i++) {
	        data[name[i]] = undefined;
	      }
	    } else if (typeof name === 'object') {
	      for (key in name) {
	        if (hasOwn.call(name, key)) {
	          URI.removeQuery(data, key, name[key]);
	        }
	      }
	    } else if (typeof name === 'string') {
	      if (value !== undefined) {
	        if (data[name] === value) {
	          data[name] = undefined;
	        } else if (isArray(data[name])) {
	          data[name] = filterArrayValues(data[name], value);
	        }
	      } else {
	        data[name] = undefined;
	      }
	    } else {
	      throw new TypeError('URI.removeQuery() accepts an object, string as the first parameter');
	    }
	  };
	  URI.hasQuery = function(data, name, value, withinArray) {
	    if (typeof name === 'object') {
	      for (var key in name) {
	        if (hasOwn.call(name, key)) {
	          if (!URI.hasQuery(data, key, name[key])) {
	            return false;
	          }
	        }
	      }

	      return true;
	    } else if (typeof name !== 'string') {
	      throw new TypeError('URI.hasQuery() accepts an object, string as the name parameter');
	    }

	    switch (getType(value)) {
	      case 'Undefined':
	        // true if exists (but may be empty)
	        return name in data; // data[name] !== undefined;

	      case 'Boolean':
	        // true if exists and non-empty
	        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
	        return value === _booly;

	      case 'Function':
	        // allow complex comparison
	        return !!value(data[name], name, data);

	      case 'Array':
	        if (!isArray(data[name])) {
	          return false;
	        }

	        var op = withinArray ? arrayContains : arraysEqual;
	        return op(data[name], value);

	      case 'RegExp':
	        if (!isArray(data[name])) {
	          return Boolean(data[name] && data[name].match(value));
	        }

	        if (!withinArray) {
	          return false;
	        }

	        return arrayContains(data[name], value);

	      case 'Number':
	        value = String(value);
	        /* falls through */
	      case 'String':
	        if (!isArray(data[name])) {
	          return data[name] === value;
	        }

	        if (!withinArray) {
	          return false;
	        }

	        return arrayContains(data[name], value);

	      default:
	        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
	    }
	  };


	  URI.commonPath = function(one, two) {
	    var length = Math.min(one.length, two.length);
	    var pos;

	    // find first non-matching character
	    for (pos = 0; pos < length; pos++) {
	      if (one.charAt(pos) !== two.charAt(pos)) {
	        pos--;
	        break;
	      }
	    }

	    if (pos < 1) {
	      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
	    }

	    // revert to last /
	    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
	      pos = one.substring(0, pos).lastIndexOf('/');
	    }

	    return one.substring(0, pos + 1);
	  };

	  URI.withinString = function(string, callback, options) {
	    options || (options = {});
	    var _start = options.start || URI.findUri.start;
	    var _end = options.end || URI.findUri.end;
	    var _trim = options.trim || URI.findUri.trim;
	    var _attributeOpen = /[a-z0-9-]=["']?$/i;

	    _start.lastIndex = 0;
	    while (true) {
	      var match = _start.exec(string);
	      if (!match) {
	        break;
	      }

	      var start = match.index;
	      if (options.ignoreHtml) {
	        // attribut(e=["']?$)
	        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
	        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
	          continue;
	        }
	      }

	      var end = start + string.slice(start).search(_end);
	      var slice = string.slice(start, end).replace(_trim, '');
	      if (options.ignore && options.ignore.test(slice)) {
	        continue;
	      }

	      end = start + slice.length;
	      var result = callback(slice, start, end, string);
	      string = string.slice(0, start) + result + string.slice(end);
	      _start.lastIndex = start + result.length;
	    }

	    _start.lastIndex = 0;
	    return string;
	  };

	  URI.ensureValidHostname = function(v) {
	    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
	    // they are not part of DNS and therefore ignored by URI.js

	    if (v.match(URI.invalid_hostname_characters)) {
	      // test punycode
	      if (!punycode) {
	        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-] and Punycode.js is not available');
	      }

	      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
	        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
	      }
	    }
	  };

	  // noConflict
	  URI.noConflict = function(removeAll) {
	    if (removeAll) {
	      var unconflicted = {
	        URI: this.noConflict()
	      };

	      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
	        unconflicted.URITemplate = root.URITemplate.noConflict();
	      }

	      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
	        unconflicted.IPv6 = root.IPv6.noConflict();
	      }

	      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
	        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
	      }

	      return unconflicted;
	    } else if (root.URI === this) {
	      root.URI = _URI;
	    }

	    return this;
	  };

	  p.build = function(deferBuild) {
	    if (deferBuild === true) {
	      this._deferred_build = true;
	    } else if (deferBuild === undefined || this._deferred_build) {
	      this._string = URI.build(this._parts);
	      this._deferred_build = false;
	    }

	    return this;
	  };

	  p.clone = function() {
	    return new URI(this);
	  };

	  p.valueOf = p.toString = function() {
	    return this.build(false)._string;
	  };


	  function generateSimpleAccessor(_part){
	    return function(v, build) {
	      if (v === undefined) {
	        return this._parts[_part] || '';
	      } else {
	        this._parts[_part] = v || null;
	        this.build(!build);
	        return this;
	      }
	    };
	  }

	  function generatePrefixAccessor(_part, _key){
	    return function(v, build) {
	      if (v === undefined) {
	        return this._parts[_part] || '';
	      } else {
	        if (v !== null) {
	          v = v + '';
	          if (v.charAt(0) === _key) {
	            v = v.substring(1);
	          }
	        }

	        this._parts[_part] = v;
	        this.build(!build);
	        return this;
	      }
	    };
	  }

	  p.protocol = generateSimpleAccessor('protocol');
	  p.username = generateSimpleAccessor('username');
	  p.password = generateSimpleAccessor('password');
	  p.hostname = generateSimpleAccessor('hostname');
	  p.port = generateSimpleAccessor('port');
	  p.query = generatePrefixAccessor('query', '?');
	  p.fragment = generatePrefixAccessor('fragment', '#');

	  p.search = function(v, build) {
	    var t = this.query(v, build);
	    return typeof t === 'string' && t.length ? ('?' + t) : t;
	  };
	  p.hash = function(v, build) {
	    var t = this.fragment(v, build);
	    return typeof t === 'string' && t.length ? ('#' + t) : t;
	  };

	  p.pathname = function(v, build) {
	    if (v === undefined || v === true) {
	      var res = this._parts.path || (this._parts.hostname ? '/' : '');
	      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
	    } else {
	      if (this._parts.urn) {
	        this._parts.path = v ? URI.recodeUrnPath(v) : '';
	      } else {
	        this._parts.path = v ? URI.recodePath(v) : '/';
	      }
	      this.build(!build);
	      return this;
	    }
	  };
	  p.path = p.pathname;
	  p.href = function(href, build) {
	    var key;

	    if (href === undefined) {
	      return this.toString();
	    }

	    this._string = '';
	    this._parts = URI._parts();

	    var _URI = href instanceof URI;
	    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
	    if (href.nodeName) {
	      var attribute = URI.getDomAttribute(href);
	      href = href[attribute] || '';
	      _object = false;
	    }

	    // window.location is reported to be an object, but it's not the sort
	    // of object we're looking for:
	    // * location.protocol ends with a colon
	    // * location.query != object.search
	    // * location.hash != object.fragment
	    // simply serializing the unknown object should do the trick
	    // (for location, not for everything...)
	    if (!_URI && _object && href.pathname !== undefined) {
	      href = href.toString();
	    }

	    if (typeof href === 'string' || href instanceof String) {
	      this._parts = URI.parse(String(href), this._parts);
	    } else if (_URI || _object) {
	      var src = _URI ? href._parts : href;
	      for (key in src) {
	        if (hasOwn.call(this._parts, key)) {
	          this._parts[key] = src[key];
	        }
	      }
	    } else {
	      throw new TypeError('invalid input');
	    }

	    this.build(!build);
	    return this;
	  };

	  // identification accessors
	  p.is = function(what) {
	    var ip = false;
	    var ip4 = false;
	    var ip6 = false;
	    var name = false;
	    var sld = false;
	    var idn = false;
	    var punycode = false;
	    var relative = !this._parts.urn;

	    if (this._parts.hostname) {
	      relative = false;
	      ip4 = URI.ip4_expression.test(this._parts.hostname);
	      ip6 = URI.ip6_expression.test(this._parts.hostname);
	      ip = ip4 || ip6;
	      name = !ip;
	      sld = name && SLD && SLD.has(this._parts.hostname);
	      idn = name && URI.idn_expression.test(this._parts.hostname);
	      punycode = name && URI.punycode_expression.test(this._parts.hostname);
	    }

	    switch (what.toLowerCase()) {
	      case 'relative':
	        return relative;

	      case 'absolute':
	        return !relative;

	      // hostname identification
	      case 'domain':
	      case 'name':
	        return name;

	      case 'sld':
	        return sld;

	      case 'ip':
	        return ip;

	      case 'ip4':
	      case 'ipv4':
	      case 'inet4':
	        return ip4;

	      case 'ip6':
	      case 'ipv6':
	      case 'inet6':
	        return ip6;

	      case 'idn':
	        return idn;

	      case 'url':
	        return !this._parts.urn;

	      case 'urn':
	        return !!this._parts.urn;

	      case 'punycode':
	        return punycode;
	    }

	    return null;
	  };

	  // component specific input validation
	  var _protocol = p.protocol;
	  var _port = p.port;
	  var _hostname = p.hostname;

	  p.protocol = function(v, build) {
	    if (v !== undefined) {
	      if (v) {
	        // accept trailing ://
	        v = v.replace(/:(\/\/)?$/, '');

	        if (!v.match(URI.protocol_expression)) {
	          throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
	        }
	      }
	    }
	    return _protocol.call(this, v, build);
	  };
	  p.scheme = p.protocol;
	  p.port = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v !== undefined) {
	      if (v === 0) {
	        v = null;
	      }

	      if (v) {
	        v += '';
	        if (v.charAt(0) === ':') {
	          v = v.substring(1);
	        }

	        if (v.match(/[^0-9]/)) {
	          throw new TypeError('Port "' + v + '" contains characters other than [0-9]');
	        }
	      }
	    }
	    return _port.call(this, v, build);
	  };
	  p.hostname = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v !== undefined) {
	      var x = {};
	      URI.parseHost(v, x);
	      v = x.hostname;
	    }
	    return _hostname.call(this, v, build);
	  };

	  // compound accessors
	  p.host = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v === undefined) {
	      return this._parts.hostname ? URI.buildHost(this._parts) : '';
	    } else {
	      URI.parseHost(v, this._parts);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.authority = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v === undefined) {
	      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
	    } else {
	      URI.parseAuthority(v, this._parts);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.userinfo = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v === undefined) {
	      if (!this._parts.username) {
	        return '';
	      }

	      var t = URI.buildUserinfo(this._parts);
	      return t.substring(0, t.length -1);
	    } else {
	      if (v[v.length-1] !== '@') {
	        v += '@';
	      }

	      URI.parseUserinfo(v, this._parts);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.resource = function(v, build) {
	    var parts;

	    if (v === undefined) {
	      return this.path() + this.search() + this.hash();
	    }

	    parts = URI.parse(v);
	    this._parts.path = parts.path;
	    this._parts.query = parts.query;
	    this._parts.fragment = parts.fragment;
	    this.build(!build);
	    return this;
	  };

	  // fraction accessors
	  p.subdomain = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    // convenience, return "www" from "www.example.org"
	    if (v === undefined) {
	      if (!this._parts.hostname || this.is('IP')) {
	        return '';
	      }

	      // grab domain and add another segment
	      var end = this._parts.hostname.length - this.domain().length - 1;
	      return this._parts.hostname.substring(0, end) || '';
	    } else {
	      var e = this._parts.hostname.length - this.domain().length;
	      var sub = this._parts.hostname.substring(0, e);
	      var replace = new RegExp('^' + escapeRegEx(sub));

	      if (v && v.charAt(v.length - 1) !== '.') {
	        v += '.';
	      }

	      if (v) {
	        URI.ensureValidHostname(v);
	      }

	      this._parts.hostname = this._parts.hostname.replace(replace, v);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.domain = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (typeof v === 'boolean') {
	      build = v;
	      v = undefined;
	    }

	    // convenience, return "example.org" from "www.example.org"
	    if (v === undefined) {
	      if (!this._parts.hostname || this.is('IP')) {
	        return '';
	      }

	      // if hostname consists of 1 or 2 segments, it must be the domain
	      var t = this._parts.hostname.match(/\./g);
	      if (t && t.length < 2) {
	        return this._parts.hostname;
	      }

	      // grab tld and add another segment
	      var end = this._parts.hostname.length - this.tld(build).length - 1;
	      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
	      return this._parts.hostname.substring(end) || '';
	    } else {
	      if (!v) {
	        throw new TypeError('cannot set domain empty');
	      }

	      URI.ensureValidHostname(v);

	      if (!this._parts.hostname || this.is('IP')) {
	        this._parts.hostname = v;
	      } else {
	        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
	        this._parts.hostname = this._parts.hostname.replace(replace, v);
	      }

	      this.build(!build);
	      return this;
	    }
	  };
	  p.tld = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (typeof v === 'boolean') {
	      build = v;
	      v = undefined;
	    }

	    // return "org" from "www.example.org"
	    if (v === undefined) {
	      if (!this._parts.hostname || this.is('IP')) {
	        return '';
	      }

	      var pos = this._parts.hostname.lastIndexOf('.');
	      var tld = this._parts.hostname.substring(pos + 1);

	      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
	        return SLD.get(this._parts.hostname) || tld;
	      }

	      return tld;
	    } else {
	      var replace;

	      if (!v) {
	        throw new TypeError('cannot set TLD empty');
	      } else if (v.match(/[^a-zA-Z0-9-]/)) {
	        if (SLD && SLD.is(v)) {
	          replace = new RegExp(escapeRegEx(this.tld()) + '$');
	          this._parts.hostname = this._parts.hostname.replace(replace, v);
	        } else {
	          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
	        }
	      } else if (!this._parts.hostname || this.is('IP')) {
	        throw new ReferenceError('cannot set TLD on non-domain host');
	      } else {
	        replace = new RegExp(escapeRegEx(this.tld()) + '$');
	        this._parts.hostname = this._parts.hostname.replace(replace, v);
	      }

	      this.build(!build);
	      return this;
	    }
	  };
	  p.directory = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v === undefined || v === true) {
	      if (!this._parts.path && !this._parts.hostname) {
	        return '';
	      }

	      if (this._parts.path === '/') {
	        return '/';
	      }

	      var end = this._parts.path.length - this.filename().length - 1;
	      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

	      return v ? URI.decodePath(res) : res;

	    } else {
	      var e = this._parts.path.length - this.filename().length;
	      var directory = this._parts.path.substring(0, e);
	      var replace = new RegExp('^' + escapeRegEx(directory));

	      // fully qualifier directories begin with a slash
	      if (!this.is('relative')) {
	        if (!v) {
	          v = '/';
	        }

	        if (v.charAt(0) !== '/') {
	          v = '/' + v;
	        }
	      }

	      // directories always end with a slash
	      if (v && v.charAt(v.length - 1) !== '/') {
	        v += '/';
	      }

	      v = URI.recodePath(v);
	      this._parts.path = this._parts.path.replace(replace, v);
	      this.build(!build);
	      return this;
	    }
	  };
	  p.filename = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v === undefined || v === true) {
	      if (!this._parts.path || this._parts.path === '/') {
	        return '';
	      }

	      var pos = this._parts.path.lastIndexOf('/');
	      var res = this._parts.path.substring(pos+1);

	      return v ? URI.decodePathSegment(res) : res;
	    } else {
	      var mutatedDirectory = false;

	      if (v.charAt(0) === '/') {
	        v = v.substring(1);
	      }

	      if (v.match(/\.?\//)) {
	        mutatedDirectory = true;
	      }

	      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
	      v = URI.recodePath(v);
	      this._parts.path = this._parts.path.replace(replace, v);

	      if (mutatedDirectory) {
	        this.normalizePath(build);
	      } else {
	        this.build(!build);
	      }

	      return this;
	    }
	  };
	  p.suffix = function(v, build) {
	    if (this._parts.urn) {
	      return v === undefined ? '' : this;
	    }

	    if (v === undefined || v === true) {
	      if (!this._parts.path || this._parts.path === '/') {
	        return '';
	      }

	      var filename = this.filename();
	      var pos = filename.lastIndexOf('.');
	      var s, res;

	      if (pos === -1) {
	        return '';
	      }

	      // suffix may only contain alnum characters (yup, I made this up.)
	      s = filename.substring(pos+1);
	      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
	      return v ? URI.decodePathSegment(res) : res;
	    } else {
	      if (v.charAt(0) === '.') {
	        v = v.substring(1);
	      }

	      var suffix = this.suffix();
	      var replace;

	      if (!suffix) {
	        if (!v) {
	          return this;
	        }

	        this._parts.path += '.' + URI.recodePath(v);
	      } else if (!v) {
	        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
	      } else {
	        replace = new RegExp(escapeRegEx(suffix) + '$');
	      }

	      if (replace) {
	        v = URI.recodePath(v);
	        this._parts.path = this._parts.path.replace(replace, v);
	      }

	      this.build(!build);
	      return this;
	    }
	  };
	  p.segment = function(segment, v, build) {
	    var separator = this._parts.urn ? ':' : '/';
	    var path = this.path();
	    var absolute = path.substring(0, 1) === '/';
	    var segments = path.split(separator);

	    if (segment !== undefined && typeof segment !== 'number') {
	      build = v;
	      v = segment;
	      segment = undefined;
	    }

	    if (segment !== undefined && typeof segment !== 'number') {
	      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
	    }

	    if (absolute) {
	      segments.shift();
	    }

	    if (segment < 0) {
	      // allow negative indexes to address from the end
	      segment = Math.max(segments.length + segment, 0);
	    }

	    if (v === undefined) {
	      /*jshint laxbreak: true */
	      return segment === undefined
	        ? segments
	        : segments[segment];
	      /*jshint laxbreak: false */
	    } else if (segment === null || segments[segment] === undefined) {
	      if (isArray(v)) {
	        segments = [];
	        // collapse empty elements within array
	        for (var i=0, l=v.length; i < l; i++) {
	          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
	            continue;
	          }

	          if (segments.length && !segments[segments.length -1].length) {
	            segments.pop();
	          }

	          segments.push(v[i]);
	        }
	      } else if (v || typeof v === 'string') {
	        if (segments[segments.length -1] === '') {
	          // empty trailing elements have to be overwritten
	          // to prevent results such as /foo//bar
	          segments[segments.length -1] = v;
	        } else {
	          segments.push(v);
	        }
	      }
	    } else {
	      if (v) {
	        segments[segment] = v;
	      } else {
	        segments.splice(segment, 1);
	      }
	    }

	    if (absolute) {
	      segments.unshift('');
	    }

	    return this.path(segments.join(separator), build);
	  };
	  p.segmentCoded = function(segment, v, build) {
	    var segments, i, l;

	    if (typeof segment !== 'number') {
	      build = v;
	      v = segment;
	      segment = undefined;
	    }

	    if (v === undefined) {
	      segments = this.segment(segment, v, build);
	      if (!isArray(segments)) {
	        segments = segments !== undefined ? URI.decode(segments) : undefined;
	      } else {
	        for (i = 0, l = segments.length; i < l; i++) {
	          segments[i] = URI.decode(segments[i]);
	        }
	      }

	      return segments;
	    }

	    if (!isArray(v)) {
	      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
	    } else {
	      for (i = 0, l = v.length; i < l; i++) {
	        v[i] = URI.decode(v[i]);
	      }
	    }

	    return this.segment(segment, v, build);
	  };

	  // mutating query string
	  var q = p.query;
	  p.query = function(v, build) {
	    if (v === true) {
	      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    } else if (typeof v === 'function') {
	      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	      var result = v.call(this, data);
	      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	      this.build(!build);
	      return this;
	    } else if (v !== undefined && typeof v !== 'string') {
	      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	      this.build(!build);
	      return this;
	    } else {
	      return q.call(this, v, build);
	    }
	  };
	  p.setQuery = function(name, value, build) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

	    if (typeof name === 'string' || name instanceof String) {
	      data[name] = value !== undefined ? value : null;
	    } else if (typeof name === 'object') {
	      for (var key in name) {
	        if (hasOwn.call(name, key)) {
	          data[key] = name[key];
	        }
	      }
	    } else {
	      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
	    }

	    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	    if (typeof name !== 'string') {
	      build = value;
	    }

	    this.build(!build);
	    return this;
	  };
	  p.addQuery = function(name, value, build) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    URI.addQuery(data, name, value === undefined ? null : value);
	    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	    if (typeof name !== 'string') {
	      build = value;
	    }

	    this.build(!build);
	    return this;
	  };
	  p.removeQuery = function(name, value, build) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    URI.removeQuery(data, name, value);
	    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
	    if (typeof name !== 'string') {
	      build = value;
	    }

	    this.build(!build);
	    return this;
	  };
	  p.hasQuery = function(name, value, withinArray) {
	    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
	    return URI.hasQuery(data, name, value, withinArray);
	  };
	  p.setSearch = p.setQuery;
	  p.addSearch = p.addQuery;
	  p.removeSearch = p.removeQuery;
	  p.hasSearch = p.hasQuery;

	  // sanitizing URLs
	  p.normalize = function() {
	    if (this._parts.urn) {
	      return this
	        .normalizeProtocol(false)
	        .normalizePath(false)
	        .normalizeQuery(false)
	        .normalizeFragment(false)
	        .build();
	    }

	    return this
	      .normalizeProtocol(false)
	      .normalizeHostname(false)
	      .normalizePort(false)
	      .normalizePath(false)
	      .normalizeQuery(false)
	      .normalizeFragment(false)
	      .build();
	  };
	  p.normalizeProtocol = function(build) {
	    if (typeof this._parts.protocol === 'string') {
	      this._parts.protocol = this._parts.protocol.toLowerCase();
	      this.build(!build);
	    }

	    return this;
	  };
	  p.normalizeHostname = function(build) {
	    if (this._parts.hostname) {
	      if (this.is('IDN') && punycode) {
	        this._parts.hostname = punycode.toASCII(this._parts.hostname);
	      } else if (this.is('IPv6') && IPv6) {
	        this._parts.hostname = IPv6.best(this._parts.hostname);
	      }

	      this._parts.hostname = this._parts.hostname.toLowerCase();
	      this.build(!build);
	    }

	    return this;
	  };
	  p.normalizePort = function(build) {
	    // remove port of it's the protocol's default
	    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
	      this._parts.port = null;
	      this.build(!build);
	    }

	    return this;
	  };
	  p.normalizePath = function(build) {
	    var _path = this._parts.path;
	    if (!_path) {
	      return this;
	    }

	    if (this._parts.urn) {
	      this._parts.path = URI.recodeUrnPath(this._parts.path);
	      this.build(!build);
	      return this;
	    }

	    if (this._parts.path === '/') {
	      return this;
	    }

	    var _was_relative;
	    var _leadingParents = '';
	    var _parent, _pos;

	    // handle relative paths
	    if (_path.charAt(0) !== '/') {
	      _was_relative = true;
	      _path = '/' + _path;
	    }

	    // resolve simples
	    _path = _path
	      .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
	      .replace(/\/{2,}/g, '/');

	    // remember leading parents
	    if (_was_relative) {
	      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
	      if (_leadingParents) {
	        _leadingParents = _leadingParents[0];
	      }
	    }

	    // resolve parents
	    while (true) {
	      _parent = _path.indexOf('/..');
	      if (_parent === -1) {
	        // no more ../ to resolve
	        break;
	      } else if (_parent === 0) {
	        // top level cannot be relative, skip it
	        _path = _path.substring(3);
	        continue;
	      }

	      _pos = _path.substring(0, _parent).lastIndexOf('/');
	      if (_pos === -1) {
	        _pos = _parent;
	      }
	      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
	    }

	    // revert to relative
	    if (_was_relative && this.is('relative')) {
	      _path = _leadingParents + _path.substring(1);
	    }

	    _path = URI.recodePath(_path);
	    this._parts.path = _path;
	    this.build(!build);
	    return this;
	  };
	  p.normalizePathname = p.normalizePath;
	  p.normalizeQuery = function(build) {
	    if (typeof this._parts.query === 'string') {
	      if (!this._parts.query.length) {
	        this._parts.query = null;
	      } else {
	        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
	      }

	      this.build(!build);
	    }

	    return this;
	  };
	  p.normalizeFragment = function(build) {
	    if (!this._parts.fragment) {
	      this._parts.fragment = null;
	      this.build(!build);
	    }

	    return this;
	  };
	  p.normalizeSearch = p.normalizeQuery;
	  p.normalizeHash = p.normalizeFragment;

	  p.iso8859 = function() {
	    // expect unicode input, iso8859 output
	    var e = URI.encode;
	    var d = URI.decode;

	    URI.encode = escape;
	    URI.decode = decodeURIComponent;
	    try {
	      this.normalize();
	    } finally {
	      URI.encode = e;
	      URI.decode = d;
	    }
	    return this;
	  };

	  p.unicode = function() {
	    // expect iso8859 input, unicode output
	    var e = URI.encode;
	    var d = URI.decode;

	    URI.encode = strictEncodeURIComponent;
	    URI.decode = unescape;
	    try {
	      this.normalize();
	    } finally {
	      URI.encode = e;
	      URI.decode = d;
	    }
	    return this;
	  };

	  p.readable = function() {
	    var uri = this.clone();
	    // removing username, password, because they shouldn't be displayed according to RFC 3986
	    uri.username('').password('').normalize();
	    var t = '';
	    if (uri._parts.protocol) {
	      t += uri._parts.protocol + '://';
	    }

	    if (uri._parts.hostname) {
	      if (uri.is('punycode') && punycode) {
	        t += punycode.toUnicode(uri._parts.hostname);
	        if (uri._parts.port) {
	          t += ':' + uri._parts.port;
	        }
	      } else {
	        t += uri.host();
	      }
	    }

	    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
	      t += '/';
	    }

	    t += uri.path(true);
	    if (uri._parts.query) {
	      var q = '';
	      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
	        var kv = (qp[i] || '').split('=');
	        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
	          .replace(/&/g, '%26');

	        if (kv[1] !== undefined) {
	          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
	            .replace(/&/g, '%26');
	        }
	      }
	      t += '?' + q.substring(1);
	    }

	    t += URI.decodeQuery(uri.hash(), true);
	    return t;
	  };

	  // resolving relative and absolute URLs
	  p.absoluteTo = function(base) {
	    var resolved = this.clone();
	    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
	    var basedir, i, p;

	    if (this._parts.urn) {
	      throw new Error('URNs do not have any generally defined hierarchical components');
	    }

	    if (!(base instanceof URI)) {
	      base = new URI(base);
	    }

	    if (!resolved._parts.protocol) {
	      resolved._parts.protocol = base._parts.protocol;
	    }

	    if (this._parts.hostname) {
	      return resolved;
	    }

	    for (i = 0; (p = properties[i]); i++) {
	      resolved._parts[p] = base._parts[p];
	    }

	    if (!resolved._parts.path) {
	      resolved._parts.path = base._parts.path;
	      if (!resolved._parts.query) {
	        resolved._parts.query = base._parts.query;
	      }
	    } else if (resolved._parts.path.substring(-2) === '..') {
	      resolved._parts.path += '/';
	    }

	    if (resolved.path().charAt(0) !== '/') {
	      basedir = base.directory();
	      basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
	      resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
	      resolved.normalizePath();
	    }

	    resolved.build();
	    return resolved;
	  };
	  p.relativeTo = function(base) {
	    var relative = this.clone().normalize();
	    var relativeParts, baseParts, common, relativePath, basePath;

	    if (relative._parts.urn) {
	      throw new Error('URNs do not have any generally defined hierarchical components');
	    }

	    base = new URI(base).normalize();
	    relativeParts = relative._parts;
	    baseParts = base._parts;
	    relativePath = relative.path();
	    basePath = base.path();

	    if (relativePath.charAt(0) !== '/') {
	      throw new Error('URI is already relative');
	    }

	    if (basePath.charAt(0) !== '/') {
	      throw new Error('Cannot calculate a URI relative to another relative URI');
	    }

	    if (relativeParts.protocol === baseParts.protocol) {
	      relativeParts.protocol = null;
	    }

	    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
	      return relative.build();
	    }

	    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
	      return relative.build();
	    }

	    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
	      relativeParts.hostname = null;
	      relativeParts.port = null;
	    } else {
	      return relative.build();
	    }

	    if (relativePath === basePath) {
	      relativeParts.path = '';
	      return relative.build();
	    }

	    // determine common sub path
	    common = URI.commonPath(relative.path(), base.path());

	    // If the paths have nothing in common, return a relative URL with the absolute path.
	    if (!common) {
	      return relative.build();
	    }

	    var parents = baseParts.path
	      .substring(common.length)
	      .replace(/[^\/]*$/, '')
	      .replace(/.*?\//g, '../');

	    relativeParts.path = parents + relativeParts.path.substring(common.length);

	    return relative.build();
	  };

	  // comparing URIs
	  p.equals = function(uri) {
	    var one = this.clone();
	    var two = new URI(uri);
	    var one_map = {};
	    var two_map = {};
	    var checked = {};
	    var one_query, two_query, key;

	    one.normalize();
	    two.normalize();

	    // exact match
	    if (one.toString() === two.toString()) {
	      return true;
	    }

	    // extract query string
	    one_query = one.query();
	    two_query = two.query();
	    one.query('');
	    two.query('');

	    // definitely not equal if not even non-query parts match
	    if (one.toString() !== two.toString()) {
	      return false;
	    }

	    // query parameters have the same length, even if they're permuted
	    if (one_query.length !== two_query.length) {
	      return false;
	    }

	    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
	    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

	    for (key in one_map) {
	      if (hasOwn.call(one_map, key)) {
	        if (!isArray(one_map[key])) {
	          if (one_map[key] !== two_map[key]) {
	            return false;
	          }
	        } else if (!arraysEqual(one_map[key], two_map[key])) {
	          return false;
	        }

	        checked[key] = true;
	      }
	    }

	    for (key in two_map) {
	      if (hasOwn.call(two_map, key)) {
	        if (!checked[key]) {
	          // two contains a parameter not present in one
	          return false;
	        }
	      }
	    }

	    return true;
	  };

	  // state
	  p.duplicateQueryParameters = function(v) {
	    this._parts.duplicateQueryParameters = !!v;
	    return this;
	  };

	  p.escapeQuerySpace = function(v) {
	    this._parts.escapeQuerySpace = !!v;
	    return this;
	  };

	  return URI;
	}));


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! http://mths.be/punycode v1.2.3 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports;
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			while (length--) {
				array[length] = fn(array[length]);
			}
			return array;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings.
		 * @private
		 * @param {String} domain The domain name.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			return map(string.split(regexSeparators), fn).join('.');
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    length,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name to Unicode. Only the
		 * Punycoded parts of the domain name will be converted, i.e. it doesn't
		 * matter if you call it on a string that has already been converted to
		 * Unicode.
		 * @memberOf punycode
		 * @param {String} domain The Punycode domain name to convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(domain) {
			return mapDomain(domain, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name to Punycode. Only the
		 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
		 * matter if you call it with a domain that's already in ASCII.
		 * @memberOf punycode
		 * @param {String} domain The domain name to convert, as a Unicode string.
		 * @returns {String} The Punycode representation of the given domain name.
		 */
		function toASCII(domain) {
			return mapDomain(domain, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.2.3',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <http://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module), (function() { return this; }())))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * URI.js - Mutating URLs
	 * IPv6 Support
	 *
	 * Version: 1.15.0
	 *
	 * Author: Rodney Rehm
	 * Web: http://medialize.github.io/URI.js/
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *   GPL v3 http://opensource.org/licenses/GPL-3.0
	 *
	 */

	(function (root, factory) {
	  'use strict';
	  // https://github.com/umdjs/umd/blob/master/returnExports.js
	  if (true) {
	    // Node
	    module.exports = factory();
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(factory);
	  } else {
	    // Browser globals (root is window)
	    root.IPv6 = factory(root);
	  }
	}(this, function (root) {
	  'use strict';

	  /*
	  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
	  var _out = IPv6.best(_in);
	  var _expected = "fe80::204:61ff:fe9d:f156";

	  console.log(_in, _out, _expected, _out === _expected);
	  */

	  // save current IPv6 variable, if any
	  var _IPv6 = root && root.IPv6;

	  function bestPresentation(address) {
	    // based on:
	    // Javascript to test an IPv6 address for proper format, and to
	    // present the "best text representation" according to IETF Draft RFC at
	    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
	    // 8 Feb 2010 Rich Brown, Dartware, LLC
	    // Please feel free to use this code as long as you provide a link to
	    // http://www.intermapper.com
	    // http://intermapper.com/support/tools/IPV6-Validator.aspx
	    // http://download.dartware.com/thirdparty/ipv6validator.js

	    var _address = address.toLowerCase();
	    var segments = _address.split(':');
	    var length = segments.length;
	    var total = 8;

	    // trim colons (:: or ::a:b:c… or …a:b:c::)
	    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
	      // must have been ::
	      // remove first two items
	      segments.shift();
	      segments.shift();
	    } else if (segments[0] === '' && segments[1] === '') {
	      // must have been ::xxxx
	      // remove the first item
	      segments.shift();
	    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
	      // must have been xxxx::
	      segments.pop();
	    }

	    length = segments.length;

	    // adjust total segments for IPv4 trailer
	    if (segments[length - 1].indexOf('.') !== -1) {
	      // found a "." which means IPv4
	      total = 7;
	    }

	    // fill empty segments them with "0000"
	    var pos;
	    for (pos = 0; pos < length; pos++) {
	      if (segments[pos] === '') {
	        break;
	      }
	    }

	    if (pos < total) {
	      segments.splice(pos, 1, '0000');
	      while (segments.length < total) {
	        segments.splice(pos, 0, '0000');
	      }

	      length = segments.length;
	    }

	    // strip leading zeros
	    var _segments;
	    for (var i = 0; i < total; i++) {
	      _segments = segments[i].split('');
	      for (var j = 0; j < 3 ; j++) {
	        if (_segments[0] === '0' && _segments.length > 1) {
	          _segments.splice(0,1);
	        } else {
	          break;
	        }
	      }

	      segments[i] = _segments.join('');
	    }

	    // find longest sequence of zeroes and coalesce them into one segment
	    var best = -1;
	    var _best = 0;
	    var _current = 0;
	    var current = -1;
	    var inzeroes = false;
	    // i; already declared

	    for (i = 0; i < total; i++) {
	      if (inzeroes) {
	        if (segments[i] === '0') {
	          _current += 1;
	        } else {
	          inzeroes = false;
	          if (_current > _best) {
	            best = current;
	            _best = _current;
	          }
	        }
	      } else {
	        if (segments[i] === '0') {
	          inzeroes = true;
	          current = i;
	          _current = 1;
	        }
	      }
	    }

	    if (_current > _best) {
	      best = current;
	      _best = _current;
	    }

	    if (_best > 1) {
	      segments.splice(best, _best, '');
	    }

	    length = segments.length;

	    // assemble remaining segments
	    var result = '';
	    if (segments[0] === '')  {
	      result = ':';
	    }

	    for (i = 0; i < length; i++) {
	      result += segments[i];
	      if (i === length - 1) {
	        break;
	      }

	      result += ':';
	    }

	    if (segments[length - 1] === '') {
	      result += ':';
	    }

	    return result;
	  }

	  function noConflict() {
	    /*jshint validthis: true */
	    if (root.IPv6 === this) {
	      root.IPv6 = _IPv6;
	    }
	  
	    return this;
	  }

	  return {
	    best: bestPresentation,
	    noConflict: noConflict
	  };
	}));


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * URI.js - Mutating URLs
	 * Second Level Domain (SLD) Support
	 *
	 * Version: 1.15.0
	 *
	 * Author: Rodney Rehm
	 * Web: http://medialize.github.io/URI.js/
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *   GPL v3 http://opensource.org/licenses/GPL-3.0
	 *
	 */

	(function (root, factory) {
	  'use strict';
	  // https://github.com/umdjs/umd/blob/master/returnExports.js
	  if (true) {
	    // Node
	    module.exports = factory();
	  } else if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module.
	    define(factory);
	  } else {
	    // Browser globals (root is window)
	    root.SecondLevelDomains = factory(root);
	  }
	}(this, function (root) {
	  'use strict';

	  // save current SecondLevelDomains variable, if any
	  var _SecondLevelDomains = root && root.SecondLevelDomains;

	  var SLD = {
	    // list of known Second Level Domains
	    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
	    // ----
	    // publicsuffix.org is more current and actually used by a couple of browsers internally.
	    // downside is it also contains domains like "dyndns.org" - which is fine for the security
	    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
	    // ----
	    list: {
	      'ac':' com gov mil net org ',
	      'ae':' ac co gov mil name net org pro sch ',
	      'af':' com edu gov net org ',
	      'al':' com edu gov mil net org ',
	      'ao':' co ed gv it og pb ',
	      'ar':' com edu gob gov int mil net org tur ',
	      'at':' ac co gv or ',
	      'au':' asn com csiro edu gov id net org ',
	      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
	      'bb':' biz co com edu gov info net org store tv ',
	      'bh':' biz cc com edu gov info net org ',
	      'bn':' com edu gov net org ',
	      'bo':' com edu gob gov int mil net org tv ',
	      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
	      'bs':' com edu gov net org ',
	      'bz':' du et om ov rg ',
	      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
	      'ck':' biz co edu gen gov info net org ',
	      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
	      'co':' com edu gov mil net nom org ',
	      'cr':' ac c co ed fi go or sa ',
	      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
	      'do':' art com edu gob gov mil net org sld web ',
	      'dz':' art asso com edu gov net org pol ',
	      'ec':' com edu fin gov info med mil net org pro ',
	      'eg':' com edu eun gov mil name net org sci ',
	      'er':' com edu gov ind mil net org rochest w ',
	      'es':' com edu gob nom org ',
	      'et':' biz com edu gov info name net org ',
	      'fj':' ac biz com info mil name net org pro ',
	      'fk':' ac co gov net nom org ',
	      'fr':' asso com f gouv nom prd presse tm ',
	      'gg':' co net org ',
	      'gh':' com edu gov mil org ',
	      'gn':' ac com gov net org ',
	      'gr':' com edu gov mil net org ',
	      'gt':' com edu gob ind mil net org ',
	      'gu':' com edu gov net org ',
	      'hk':' com edu gov idv net org ',
	      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
	      'id':' ac co go mil net or sch web ',
	      'il':' ac co gov idf k12 muni net org ',
	      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
	      'iq':' com edu gov i mil net org ',
	      'ir':' ac co dnssec gov i id net org sch ',
	      'it':' edu gov ',
	      'je':' co net org ',
	      'jo':' com edu gov mil name net org sch ',
	      'jp':' ac ad co ed go gr lg ne or ',
	      'ke':' ac co go info me mobi ne or sc ',
	      'kh':' com edu gov mil net org per ',
	      'ki':' biz com de edu gov info mob net org tel ',
	      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
	      'kn':' edu gov net org ',
	      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
	      'kw':' com edu gov net org ',
	      'ky':' com edu gov net org ',
	      'kz':' com edu gov mil net org ',
	      'lb':' com edu gov net org ',
	      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
	      'lr':' com edu gov net org ',
	      'lv':' asn com conf edu gov id mil net org ',
	      'ly':' com edu gov id med net org plc sch ',
	      'ma':' ac co gov m net org press ',
	      'mc':' asso tm ',
	      'me':' ac co edu gov its net org priv ',
	      'mg':' com edu gov mil nom org prd tm ',
	      'mk':' com edu gov inf name net org pro ',
	      'ml':' com edu gov net org presse ',
	      'mn':' edu gov org ',
	      'mo':' com edu gov net org ',
	      'mt':' com edu gov net org ',
	      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
	      'mw':' ac co com coop edu gov int museum net org ',
	      'mx':' com edu gob net org ',
	      'my':' com edu gov mil name net org sch ',
	      'nf':' arts com firm info net other per rec store web ',
	      'ng':' biz com edu gov mil mobi name net org sch ',
	      'ni':' ac co com edu gob mil net nom org ',
	      'np':' com edu gov mil net org ',
	      'nr':' biz com edu gov info net org ',
	      'om':' ac biz co com edu gov med mil museum net org pro sch ',
	      'pe':' com edu gob mil net nom org sld ',
	      'ph':' com edu gov i mil net ngo org ',
	      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
	      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
	      'pr':' ac biz com edu est gov info isla name net org pro prof ',
	      'ps':' com edu gov net org plo sec ',
	      'pw':' belau co ed go ne or ',
	      'ro':' arts com firm info nom nt org rec store tm www ',
	      'rs':' ac co edu gov in org ',
	      'sb':' com edu gov net org ',
	      'sc':' com edu gov net org ',
	      'sh':' co com edu gov net nom org ',
	      'sl':' com edu gov net org ',
	      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
	      'sv':' com edu gob org red ',
	      'sz':' ac co org ',
	      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
	      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
	      'tw':' club com ebiz edu game gov idv mil net org ',
	      'mu':' ac co com gov net or org ',
	      'mz':' ac co edu gov org ',
	      'na':' co com ',
	      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
	      'pa':' abo ac com edu gob ing med net nom org sld ',
	      'pt':' com edu gov int net nome org publ ',
	      'py':' com edu gov mil net org ',
	      'qa':' com edu gov mil net org ',
	      're':' asso com nom ',
	      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
	      'rw':' ac co com edu gouv gov int mil net ',
	      'sa':' com edu gov med net org pub sch ',
	      'sd':' com edu gov info med net org tv ',
	      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
	      'sg':' com edu gov idn net org per ',
	      'sn':' art com edu gouv org perso univ ',
	      'sy':' com edu gov mil net news org ',
	      'th':' ac co go in mi net or ',
	      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
	      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
	      'tz':' ac co go ne or ',
	      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
	      'ug':' ac co go ne or org sc ',
	      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
	      'us':' dni fed isa kids nsn ',
	      'uy':' com edu gub mil net org ',
	      've':' co com edu gob info mil net org web ',
	      'vi':' co com k12 net org ',
	      'vn':' ac biz com edu gov health info int name net org pro ',
	      'ye':' co com gov ltd me net org plc ',
	      'yu':' ac co edu gov org ',
	      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
	      'zm':' ac co com edu gov net org sch '
	    },
	    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
	    // in both performance and memory footprint. No initialization required.
	    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
	    // Following methods use lastIndexOf() rather than array.split() in order
	    // to avoid any memory allocations.
	    has: function(domain) {
	      var tldOffset = domain.lastIndexOf('.');
	      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
	        return false;
	      }
	      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
	      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
	        return false;
	      }
	      var sldList = SLD.list[domain.slice(tldOffset+1)];
	      if (!sldList) {
	        return false;
	      }
	      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
	    },
	    is: function(domain) {
	      var tldOffset = domain.lastIndexOf('.');
	      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
	        return false;
	      }
	      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
	      if (sldOffset >= 0) {
	        return false;
	      }
	      var sldList = SLD.list[domain.slice(tldOffset+1)];
	      if (!sldList) {
	        return false;
	      }
	      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
	    },
	    get: function(domain) {
	      var tldOffset = domain.lastIndexOf('.');
	      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
	        return null;
	      }
	      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
	      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
	        return null;
	      }
	      var sldList = SLD.list[domain.slice(tldOffset+1)];
	      if (!sldList) {
	        return null;
	      }
	      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
	        return null;
	      }
	      return domain.slice(sldOffset+1);
	    },
	    noConflict: function(){
	      if (root.SecondLevelDomains === this) {
	        root.SecondLevelDomains = _SecondLevelDomains;
	      }
	      return this;
	    }
	  };

	  return SLD;
	}));


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// As the settings are transported from ruby code (gon)
	// we can not enforce camel case here.

	/* jshint camelcase: false */

	module.exports = function(PathHelper, $q, $http) {

	  // fetches configuration from the ApiV3 endpoint
	  // TODO: this currently saves the request between page reloads,
	  // but could easily be stored in localStorage
	  var cache = false,
	      path = PathHelper.apiConfigurationPath(),
	      fetchSettings = function() {
	        var data = $q.defer();
	        $http.get(path).success(function(settings) {
	          data.resolve(settings);
	        }).error(function(err) {
	          data.reject(err);
	        });
	        return data.promise;
	      },
	      api = function() {
	        var settings = $q.defer();
	        if (cache) {
	          settings.resolve(cache);
	        } else {
	          fetchSettings().then(function(data) {
	            cache = data;
	            settings.resolve(data);
	          });
	        }
	        return settings.promise;
	      };

	  var initSettings = function() {
	    var settings = {},
	        defaults = {
	          enabled_modules: [],
	          display: [],
	          user_preferences: {
	            impaired: false,
	            time_zone: '',
	            others: {
	              comments_sorting: 'asc'
	            }
	          }
	        };

	    if (window.gon !== undefined) {
	      settings = window.gon.settings;
	    }

	    return _.merge(defaults, settings);
	  };

	  return {
	    settings: initSettings(),
	    api: api,
	    userPreferencesPresent: function() {
	      return this.settings.hasOwnProperty('user_preferences');
	    },
	    displaySettingPresent: function(setting) {
	      return this.settings.display.hasOwnProperty(setting) &&
	        this.settings.display[setting] !== false;
	    },
	    accessibilityModeEnabled: function() {
	      return this.settings.user_preferences.impaired;
	    },
	    commentsSortedInDescendingOrder: function() {
	      return this.settings.user_preferences.others.comments_sorting === 'desc';
	    },
	    isTimezoneSet: function() {
	      return this.settings.user_preferences.time_zone !== '';
	    },
	    timezone: function() {
	      return this.settings.user_preferences.time_zone;
	    },
	    dateFormatPresent: function() {
	      return this.displaySettingPresent('date_format') &&
	             this.settings.display.date_format !== '';
	    },
	    dateFormat: function() {
	      return this.settings.display.date_format;
	    },
	    timeFormatPresent: function() {
	      return this.displaySettingPresent('time_format') &&
	             this.settings.display.time_format !== '';
	    },
	    timeFormat: function() {
	      return this.settings.display.time_format;
	    },
	    isModuleEnabled: function(module) {
	      return this.settings.enabled_modules.indexOf(module) >= 0;
	    },
	    startOfWeekPresent: function() {
	      return this.displaySettingPresent('start_of_week') &&
	             this.settings.display.start_of_week !== '';
	    },
	    startOfWeek: function() {
	      if(this.startOfWeekPresent()) {
	        return this.settings.display.start_of_week;
	      }

	      // This if/else statement is used because
	      // jquery regionals have different start day for German locale
	      if(I18n.locale === 'en') {
	        return 1;
	      } else if(I18n.locale === 'de') {
	        return 0;
	      }

	      return '';
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.helpers')
	  .constant('CUSTOM_FIELD_PREFIX', 'cf_')
	  .service('AutoCompleteHelper', ['$http', 'PathHelper', __webpack_require__(34)])
	  .service('CustomFieldHelper', ['CUSTOM_FIELD_PREFIX', 'I18n', __webpack_require__(
	    35)])
	  .service('PathHelper', __webpack_require__(36))
	  .factory('SvgHelper', __webpack_require__(33))
	  .service('UrlParamsHelper', ['I18n', 'PaginationService', 'PathHelper',
	    __webpack_require__(37)])
	  .service('WorkPackageLoadingHelper', ['$timeout', __webpack_require__(
	    38)]);


/***/ },
/* 33 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {

	  var SvgHelper = function(node) {
	    this.root = this.provideNode('svg').attr({
	      'width': 640,
	      'height': 480
	    });
	    jQuery(node).append(this.root);
	  };

	  SvgHelper.prototype.toString = function() {
	    return "SvgHelper";
	  };

	  SvgHelper.prototype.provideNode = function(elementName) {
	    return document.createElementNS(
	      'http://www.w3.org/2000/svg',
	      elementName
	    );
	  };

	  SvgHelper.prototype.clear = function() {
	    var node = this.root;
	    while (node.hasChildNodes() ){
	      node.removeChild(node.lastChild);
	    }
	    return this;
	  };

	  SvgHelper.prototype.setSize = function(w, h) {
	    this.root.attr({
	      'width': w,
	      'height': h,
	    });
	  };

	  SvgHelper.prototype.rect = function(x, y, w, h, r) {
	    var node = this.provideNode('rect').attr({
	      'x': x,
	      'y': y,
	      'width': w,
	      'height': h
	    });

	    if (r) {
	      node.round(r);
	    }

	    this.root.appendChild(node);
	    return node;
	  };

	  SvgHelper.prototype.path = function(direction) {
	    var node = this.provideNode('path').attr({
	      'd': direction
	    });
	    this.root.appendChild(node);
	    return node;
	  };

	  SvgHelper.prototype.text = function(x, y, text) {
	    var node = this.provideNode('text');
	    node.translate(x, y);
	    node.textContent = text;

	    this.root.appendChild(node);
	    return node;
	  };

	  SvgHelper.prototype.gradient = function(id, stops) {
	    var svg = this.root;
	    var svgNS = svg.namespaceURI;
	    var gradient  = document.createElementNS(svgNS, 'linearGradient');
	    gradient.setAttribute('id', id);
	    for (var i=0; i < stops.length; i++){
	      var attrs = stops[i];
	      var stop = document.createElementNS(svgNS, 'stop');
	      for (var attr in attrs) {
	        if (attrs.hasOwnProperty(attr)) stop.setAttribute(attr, attrs[attr]);
	      }
	      gradient.appendChild(stop);
	    }

	    var defs = svg.querySelector('defs') || svg.insertBefore(document.createElementNS(svgNS, 'defs'), svg.firstChild);
	    return defs.appendChild(gradient);
	  };

	  jQuery.each([SVGSVGElement, SVGRectElement, SVGPathElement,
	      SVGTextElement], function (i, klass) {
	    klass.prototype.attr = function(attributeHash) {
	      for (var key in attributeHash) {
	        if (attributeHash.hasOwnProperty(key)) {
	          this.setAttribute(key, attributeHash[key]);
	        }
	      }
	      // allow chaining.
	      return this;
	    };
	  });

	  jQuery.each([SVGRectElement, SVGTextElement], function (i, klass) {
	    klass.prototype.translate = function(x, y) {
	      return this.attr({
	        'x': x,
	        'y': y
	      });
	    };

	    klass.prototype.insertAfter = function(node) {
	      this.parentNode.insertBefore(node, this.nextSibling);
	    };
	  });

	  SVGRectElement.prototype.round = function(r) {
	    this.attr({
	      'rx': r,
	      'ry': r
	    });
	  };

	  SVGRectElement.prototype.hover = function(f_in, f_out) {
	    this.addEventListener("mouseover", f_in);
	    this.addEventListener("mouseout", f_out);
	  };

	  SVGRectElement.prototype.unhover = function() {
	    // TODO (not sure if we even need this)
	  };

	  SVGRectElement.prototype.click = function(cb) {
	    this.addEventListener("click", cb);
	  };

	  SVGPathElement.prototype.transform = function(transform) {
	    return this.attr({'transform': transform});
	  };


	  return SvgHelper;
	};


/***/ },
/* 34 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {
	  var getAtWhoParameters = function(url) {
	    return {
	      at: '#',
	      start_with_space: false,
	      search_key: 'id_subject',
	      tpl: '<li data-value="${atwho-at}${id}">${to_s}</li>',
	      limit: 10,
	      callbacks: {
	        remote_filter: function(query, callback) {
	          if (query.length > 0) {
	            $http.get(url, { params: { q: query, scope: 'all' } }).
	              success(function(data) {
	                // atjs needs the search key to be a string
	                for (var i = data.length - 1; i >= 0; i--) {
	                  data[i]['id_subject'] = data[i]['id'].toString() + ' ' + data[i]['subject'];
	                }
	                callback(data);
	              });
	          }
	        },
	        sorter: function(query, items, search_key) {
	          return items; // we do not sort
	        }
	      }
	    };
	  };

	  return {
	    enableTextareaAutoCompletion: function(textareas) {
	      angular.forEach(textareas, function(textarea) {
	        var url = PathHelper.workPackageJsonAutoCompletePath();

	        if (url !== undefined && url.length > 0) {
	          angular.element(textarea).atwho(getAtWhoParameters(url));
	        }
	      });
	    }
	  };
	};


/***/ },
/* 35 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(CUSTOM_FIELD_PREFIX, I18n) {

	  var CustomFieldHelper = {
	    isCustomFieldKey: function(key) {
	      return key.substr(0, CUSTOM_FIELD_PREFIX.length) === CUSTOM_FIELD_PREFIX;
	    },
	    getCustomFieldId: function(cfKey) {
	      return parseInt(cfKey.substr(CUSTOM_FIELD_PREFIX.length, 10), 10);
	    },
	    booleanCustomFieldValue: function(value) {
	      if (value) {
	        return value === '0' ? I18n.t('js.general_text_No') : I18n.t('js.general_text_Yes');
	      }
	    },
	    userCustomFieldValue: function(value, users) {
	      if (users && users[value] && users[value].name) {
	        // try to look up users, assume value is an id
	        return users[value].name;
	      }

	      return CustomFieldHelper.nestedCustomFieldValue(value);
	    },
	    versionCustomFieldValue: function(value) {
	      // I am pretty sure that we need to have the same behavior here as
	      // we have for the user custom fields.
	      // However, there is no code that would be using it so ...
	      return CustomFieldHelper.nestedCustomFieldValue(value);
	    },
	    nestedCustomFieldValue: function(value) {
	      if (value && value.name) {
	        return value.name;
	      }

	      return '';
	    },
	    parseNumeric: function(value, parseMethod){
	      if(value && ((typeof(value) == "string" && value.length > 0) || typeof(value) == "number") && !isNaN(value)){
	        return parseMethod(value);
	      }
	      return '';
	    },
	    formatCustomFieldValue: function(value, fieldFormat, users) {
	      switch(fieldFormat) {
	        case 'bool':
	          return CustomFieldHelper.booleanCustomFieldValue(value);
	        case 'user':
	          return CustomFieldHelper.userCustomFieldValue(value, users);
	        case 'version':
	          return CustomFieldHelper.versionCustomFieldValue(value);
	        case 'int':
	          return CustomFieldHelper.parseNumeric(value, parseInt);
	        case 'float':
	          return CustomFieldHelper.parseNumeric(value, parseFloat);
	        default:
	          return value;
	      }
	    }
	  };

	  return CustomFieldHelper;
	};


/***/ },
/* 36 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO forward rails routes
	module.exports = function() {
	  var PathHelper = {
	    apiV2: '/api/v2',
	    apiExperimental: '/api/experimental',
	    apiV3: '/api/v3',

	    appBasePath:  window.appBasePath ? window.appBasePath : '',
	    staticBase:   appBasePath,

	    activityFromPath: function(projectIdentifier, from) {
	      var link = '/activity';

	      if (projectIdentifier) {
	        link = PathHelper.staticBase + PathHelper.projectPath(projectIdentifier) + link;
	      }

	      if (from) {
	        link += '?from=' + from;
	      }

	      return link;
	    },
	    boardsPath: function(projectIdentifier) {
	      return PathHelper.projectPath(projectIdentifier) + '/boards';
	    },
	    boardPath: function(projectIdentifier, boardIdentifier) {
	      return PathHelper.boardsPath(projectIdentifier) + '/' + boardIdentifier;
	    },
	    messagesPath: function(boardIdentifier) {
	      return PathHelper.boardsPath() + '/' + boardIdentifier + '/topics';
	    },
	    messagePath: function(messageIdentifier) {
	      return PathHelper.staticBase + '/topics/' + messageIdentifier;
	    },
	    projectsPath: function() {
	      return '/projects';
	    },
	    projectPath: function(projectIdentifier) {
	      return PathHelper.projectsPath() + '/' + projectIdentifier;
	    },
	    projectWorkPackagesPath: function(projectId) {
	      return PathHelper.projectPath(projectId) + PathHelper.workPackagesPath();
	    },
	    projectWorkPackagesFormPath: function(projectId) {
	      return PathHelper.projectWorkPackagesPath(projectId) + '/form';
	    },
	    queryPath: function(queryIdentifier) {
	      return '/queries/' + queryIdentifier;
	    },
	    timeEntriesPath: function(projectIdentifier, workPackageIdentifier) {
	      var path = '/time_entries';

	      if (workPackageIdentifier) {
	        return PathHelper.workPackagePath(workPackageIdentifier) + path;
	      } else if (projectIdentifier) {
	        return PathHelper.projectPath(projectIdentifier) + path;
	      }

	      return path;
	    },
	    timeEntryPath: function(timeEntryIdentifier) {
	      return PathHelper.staticBase + '/time_entries/' + timeEntryIdentifier;
	    },
	    timeEntryNewPath: function(workPackageId) {
	      return PathHelper.timeEntriesPath(null, workPackageId) + '/new';
	    },
	    timeEntryEditPath: function(timeEntryIdentifier) {
	      return PathHelper.timeEntryPath(timeEntryIdentifier) + '/edit';
	    },
	    workPackagesPath: function() {
	      return '/work_packages';
	    },
	    workPackagePath: function(id) {
	      return PathHelper.staticBase + '/work_packages/' + id;
	    },
	    workPackageDuplicatePath: function(projectId, workPackageId) {
	      return '/projects/' + projectId + '/work_packages/new?copy_from=' + workPackageId;
	    },
	    workPackageMovePath: function(id) {
	      return PathHelper.workPackagePath(id) + '/move/new';
	    },
	    workPackageDeletePath: function(ids) {
	      return PathHelper.workPackagesBulkDeletePath() + '?ids=' + (Array.isArray(ids) ? ids.join() : ids);
	    },
	    usersPath: function() {
	      return PathHelper.staticBase + '/users';
	    },
	    userPath: function(id) {
	      return PathHelper.usersPath() + '/' + id;
	    },
	    versionsPath: function() {
	      return '/versions';
	    },
	    versionPath: function(versionId) {
	      return PathHelper.versionsPath() + '/' + versionId;
	    },
	    subProjectsPath: function() {
	      return '/sub_projects';
	    },
	    workPackagesBulkDeletePath: function() {
	      return PathHelper.workPackagesPath() + '/bulk';
	    },
	    workPackageJsonAutoCompletePath: function() {
	      return '/work_packages/auto_complete.json';
	    },
	    workPackageNewWithParameterPath: function(projectId, parameters) {
	      var path = "/projects/" + projectId + '/work_packages/new?';

	      for (var parameter in parameters) {
	        path += 'work_package[' + parameter + ']=' + parameters[parameter] + ';';
	      }

	      return path;
	    },

	    // Experimental API
	    apiAvailableColumnsPath: function() {
	      return PathHelper.apiQueriesPath() + '/available_columns';
	    },
	    apiCustomFieldsPath: function() {
	      return PathHelper.apiQueriesPath() + '/custom_field_filters';
	    },
	    apiGroupedQueriesPath: function() {
	      return PathHelper.apiQueriesPath() + '/grouped';
	    },
	    apiGroupsPath: function() {
	      return PathHelper.apiExperimental + '/groups';
	    },
	    apiProjectAvailableColumnsPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + '/queries/available_columns';
	    },
	    apiProjectCustomFieldsPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + '/queries/custom_field_filters';
	    },
	    apiProjectGroupedQueriesPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + '/queries/grouped';
	    },
	    apiProjectPath: function(projectIdentifier) {
	      return PathHelper.apiExperimental + PathHelper.projectPath(projectIdentifier);
	    },
	    apiProjectQueriesPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + '/queries';
	    },
	    apiProjectQueryPath: function(projectIdentifier, queryIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + PathHelper.queryPath(queryIdentifier);
	    },
	    apiProjectsPath: function(){
	      return PathHelper.apiExperimental + PathHelper.projectsPath();
	    },
	    apiProjectSubProjectsPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + PathHelper.subProjectsPath();
	    },
	    apiProjectUsersPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + '/users';
	    },
	    apiVersionsPath: function(projectIdentifier) {
	      return PathHelper.apiExperimental + PathHelper.versionsPath();
	    },
	    apiProjectVersionsPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + PathHelper.versionsPath();
	    },
	    apiProjectWorkPackagesPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + PathHelper.workPackagesPath();
	    },
	    apiProjectWorkPackagesSumsPath: function(projectIdentifier) {
	      return PathHelper.apiProjectPath(projectIdentifier) + PathHelper.workPackagesPath() + '/column_sums';
	    },
	    apiQueriesPath: function() {
	      return PathHelper.apiExperimental + '/queries';
	    },
	    apiQueryPath: function(query_id) {
	      return PathHelper.apiQueriesPath() + '/' + query_id;
	    },
	    apiRolesPath: function() {
	      return PathHelper.apiExperimental + '/roles';
	    },
	    apiUsersPath: function() {
	      // experimantal, TODO: Migrate to V3
	      return PathHelper.apiExperimental + '/users';
	    },
	    apiWorkPackagesColumnDataPath: function() {
	      return PathHelper.apiWorkPackagesPath() + '/column_data';
	    },
	    apiWorkPackagesPath: function() {
	      return PathHelper.apiExperimental + '/work_packages';
	    },
	    apiWorkPackagesSumsPath: function() {
	      return PathHelper.apiWorkPackagesPath() + '/column_sums';
	    },

	    // API V3
	    apiConfigurationPath: function() {
	      return PathHelper.apiV3 + '/configuration';
	    },
	    apiQueryStarPath: function(queryId) {
	      return PathHelper.apiV3QueryPath(queryId) + '/star';
	    },
	    apiQueryUnstarPath: function(queryId) {
	      return PathHelper.apiV3QueryPath(queryId) + '/unstar';
	    },
	    apiV3QueryPath: function(queryId) {
	      return PathHelper.apiV3 + PathHelper.queryPath(queryId);
	    },
	    apiV3WorkPackagePath: function(workPackageId) {
	      return PathHelper.apiV3 + '/work_packages/' + workPackageId;
	    },
	    apiPrioritiesPath: function() {
	      return PathHelper.apiV3 + '/priorities';
	    },
	    apiV3ProjectsPath: function(projectIdentifier) {
	      return PathHelper.apiV3 + PathHelper.projectsPath() + '/' + projectIdentifier;
	    },
	    apiV3ProjectCategoriesPath: function(projectIdentifier) {
	      return PathHelper.apiV3ProjectsPath(projectIdentifier) + '/categories';
	    },
	    apiV3TypePath: function(typeId) {
	      return PathHelper.apiV3 + '/types/' + typeId;
	    },
	    apiStatusesPath: function() {
	      return PathHelper.apiV3 + '/statuses';
	    },
	    apiProjectWorkPackageTypesPath: function(projectIdentifier) {
	      return PathHelper.apiV3ProjectsPath(projectIdentifier) + '/types';
	    },
	    apiWorkPackageTypesPath: function() {
	      return PathHelper.apiV3 + '/types';
	    },
	    // Static
	    staticUserPath: function(userId) {
	      return PathHelper.userPath(userId);
	    },
	    staticWorkPackagePath: function(workPackageId) {
	      return PathHelper.workPackagePath(workPackageId);
	    },
	    staticEditWorkPackagePath: function(workPackageId){
	      return PathHelper.staticWorkPackagePath(workPackageId) + '/edit';
	    },
	    staticProjectPath: function(projectIdentifier) {
	      return PathHelper.staticBase + PathHelper.projectPath(projectIdentifier);
	    },
	    staticVersionPath: function(versionId) {
	      return PathHelper.staticBase + PathHelper.versionPath(versionId);
	    },
	    staticProjectWorkPackagesPath: function(projectId) {
	      return PathHelper.staticBase + PathHelper.projectWorkPackagesPath(projectId);
	    },
	    staticWorkPackagesPath: function() {
	      return PathHelper.staticBase + PathHelper.workPackagesPath();
	    },
	    staticWorkPackageNewWithParametersPath: function(projectId, parameters) {
	      return PathHelper.staticBase + PathHelper.workPackageNewWithParameterPath(projectId, parameters);
	    },
	    staticWorkPackagesAutocompletePath: function(projectId) {
	      return PathHelper.staticBase + '/work_packages/auto_complete.json?project_id=' + projectId;
	    },
	    staticProjectWikiPath: function(projectId) {
	      return PathHelper.staticProjectPath(projectId) + '/wiki';
	    },
	    staticProjectCalendarPath: function(projectId) {
	      return PathHelper.staticProjectPath(projectId) + '/work_packages/calendar';
	    },
	    staticProjectNewsPath: function(projectId) {
	      return PathHelper.staticProjectPath(projectId) + '/news';
	    },
	    staticProjectTimelinesPath: function(projectId) {
	      return PathHelper.staticProjectPath(projectId) + '/timelines';
	    },
	    staticMyPagePath: function() {
	      return PathHelper.staticBase + '/my/page';
	    },
	    staticKeyboardShortcutsHelpPath: function() {
	      return PathHelper.staticBase + '/help/keyboard_shortcuts';
	    }
	  };

	  return PathHelper;
	};


/***/ },
/* 37 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, PaginationService, PathHelper) {
	  var UrlParamsHelper = {
	    // copied more or less from angular buildUrl
	    buildQueryString: function(params) {
	      if (!params) return;

	      var parts = [];
	      angular.forEach(params, function(value, key) {
	        if (!value) return;
	        if (!Array.isArray(value)) value = [value];

	        angular.forEach(value, function(v) {
	          if (v !== null && typeof v === 'object') {
	            v = toJson(v);
	          }
	          parts.push(encodeURIComponent(key) + '=' +
	                     encodeURIComponent(v));
	        });
	      });

	      return parts.join('&');
	    },

	    encodeQueryJsonParams: function(query) {
	      var paramsData = {
	        c: query.columns.map(function(column) { return column.name; })
	      };
	      if(!!query.displaySums) {
	        paramsData.s = query.displaySums;
	      }

	      if(query.projectId) {
	        paramsData.p = query.projectId;
	      }
	      if(query.groupBy) {
	        paramsData.g = query.groupBy;
	      }
	      if(query.getSortation()) {
	        paramsData.t = query.getSortation().encode();
	      }
	      if(query.filters && query.filters.length) {
	        paramsData.f = query.filters.filter(function(filter) {
	          return !filter.deactivated;
	        })
	        .map(function(filter) {
	          var filterData = {
	            n: filter.name,
	            o: encodeURIComponent(filter.operator),
	            t: filter.type
	          };
	          if(filter.textValue) {
	            angular.extend(filterData, { v: filter.textValue });
	          } else if(filter.values) {
	            angular.extend(filterData, { v: filter.values });
	          }
	          return filterData;
	        });
	      }
	      paramsData.pa = PaginationService.getPage();
	      paramsData.pp = PaginationService.getPerPage();

	      return JSON.stringify(paramsData);
	    },

	    decodeQueryFromJsonParams: function(queryId, updateJson) {
	      var queryData = {};
	      if(queryId) {
	        queryData.id = queryId;
	      }

	      if(updateJson) {
	        var properties = JSON.parse(updateJson);

	        if(properties.c) {
	          queryData.columns = properties.c.map(function(column) { return { name: column }; });
	        }
	        if(!!properties.s) {
	          queryData.displaySums = properties.s;
	        }
	        if(properties.p) {
	          queryData.projectId = properties.p;
	        }
	        if(properties.g) {
	          queryData.groupBy = properties.g;
	        }

	        // Filters
	        if(properties.f) {
	          queryData.filters = properties.f.map(function(urlFilter) {
	            var filterData = {
	              name: urlFilter.n,
	              operator: decodeURIComponent(urlFilter.o),
	              type: urlFilter.t
	            };
	            if(urlFilter.v) {
	              var vs = Array.isArray(urlFilter.v) ? urlFilter.v : [urlFilter.v];
	              angular.extend(filterData, { values: vs });
	            }
	            return filterData;
	          });
	        }

	        // Sortation
	        if(properties.t) {
	          queryData.sortCriteria = properties.t;
	        }

	        // Pagination
	        if(properties.pa) {
	          queryData.page = properties.pa;
	        }
	        if(properties.pp) {
	          queryData.perPage = properties.pp;
	        }
	      }

	      return queryData;
	    },

	    buildQueryExportOptions: function(query){
	      var relativeUrl;

	      if (query.project_id) {
	        relativeUrl = PathHelper.staticProjectWorkPackagesPath(query.project_id);
	      } else {
	        relativeUrl = PathHelper.staticWorkPackagesPath();
	      }

	      return query.exportFormats.map(function(format){
	        var url = relativeUrl + "." + format.format + "?" + "set_filter=1";
	        if(format.flags){
	          angular.forEach(format.flags, function(flag){
	            url = url + "&" + flag + "=" + "true";
	          });
	        }
	        url = url + "&" + query.getQueryString();

	        return {
	          identifier: format.identifier,
	          label: I18n.t('js.' + format.label_locale),
	          format: format.format,
	          url: url
	        };
	      });
	    }
	  };

	  return UrlParamsHelper;
	};


/***/ },
/* 38 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function($timeout) {
	  var currentRun;

	  return {
	    withDelay: function(delay, callback, params) {
	      $timeout.cancel(currentRun);

	      currentRun = $timeout(function() {
	        return callback.apply(this, params);
	      }, delay);

	      return currentRun;
	    },

	    /**
	     * @name withLoading
	     *
	     * @description Wraps a data-loading function and manages the loading state within the scope
	     * @param {scope} a scope on which an isLoading flag is set
	     * @param {function} callback Function returning a promise
	     * @param {array} params Params forwarded to the callback
	     * @returns {promise} Promise returned by the callback
	     */
	    withLoading: function(scope, callback, params, errorCallback) {
	      scope.isLoading = true;

	      return callback.apply(this, params)
	        .then(function(results){
	          scope.isLoading = false;

	          return results;
	        }, errorCallback);
	    }
	  };
	};


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	__webpack_require__(40);

	angular.module('openproject.layout')
	  .factory('menuItemFactory', [
	    '$rootScope',
	    '$compile',
	    '$http',
	    '$templateCache',
	    '$animate',
	    __webpack_require__(42)
	  ])

	.constant('QUERY_MENU_ITEM_TYPE', 'query-menu-item')
	  .factory('queryMenuItemFactory', [
	    'menuItemFactory',
	    '$state',
	    '$stateParams',
	    '$animate',
	    '$timeout',
	    'QUERY_MENU_ITEM_TYPE',
	    __webpack_require__(43)
	  ])
	  /**
	   * queryMenuItem directive
	   *
	   * Patches query menu items generated on the server-side by applying the link function provided
	   * by the queryMenuItemFactory.
	   * The link function makes the query menu item's 'selected' class reflect the application state
	   * and provides an event-based mechanism to remove the item on the fly.
	   */
	  .directive('queryMenuItem', [
	    'queryMenuItemFactory',
	    function(queryMenuItemFactory) {
	      return {
	        restrict: 'A',
	        scope: true,
	        link: queryMenuItemFactory.link
	      };
	    }
	  ]);


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.layout.controllers')
	  .controller('MainMenuController', [
	    '$rootScope',
	    '$window',
	    __webpack_require__(41)
	  ]);


/***/ },
/* 41 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($rootScope, $window) {

	  this.toggleNavigation = function() {
	    $rootScope.showNavigation = !$rootScope.showNavigation;
	    $rootScope.$broadcast('openproject.layout.navigationToggled', $rootScope.showNavigation);
	    $window.sessionStorage.setItem('openproject:navigation-toggle',
	      !$rootScope.showNavigation ? 'collapsed' : 'expanded');
	  };
	};


/***/ },
/* 42 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	/**
	 * menuItemFactory
	 *
	 * Provides a function to generate menu items for the project menu on the fly.
	 * The container element of the menu items to be inserted is a mandatory option. Moreover a
	 * link function can be set, which will be applied to the generated menu item.
	 *
	 * An example for setting up the factory is given in angular/layout/query-menu-items.js
	 */
	module.exports = function($rootScope, $compile, $http, $templateCache, $animate) {

	  return function(options) {
	    if (!options.container) {
	      throw new Error('Container must be specified menu item to have exacly one of either `template` or `templateUrl`');
	    }

	    var templateUrl = '/templates/layout/menu_item.html',
	        type        = options.type,
	        linkFn      = options.linkFn,
	        container, scope;

	    function getContainer() {
	      return angular.element(options.container);

	    }

	    function generateMenuItem(title, path, objectId) {
	      container = getContainer();
	      if(!container) return;

	      var menuItem;

	      scope = $rootScope.$new(true);

	      scope.type = type;
	      scope.title = title;
	      scope.path = path;
	      scope.objectId = objectId;

	      return $http.get(templateUrl, {
	        cache: $templateCache
	      }).then(function (response) {
	        menuItem = angular.element(response.data);

	        if (linkFn) linkFn(scope, menuItem.children('a'), {});

	        $compile(menuItem)(scope);

	        var previousItem = previousMenuItem(title);
	        return $animate.enter(menuItem, container, previousItem);
	      });
	    }

	    /**
	     * previousMenuItem
	     *
	     * Returns the menu item within the factories's container that has a title
	     * alphabetically before the provided title. The considered menu items have
	     * the type (css class) this factory is responsible for.
	     *
	     * Params
	     *  * title: The string used for comparing.
	     */

	    function previousMenuItem(title) {
	      var allItems     = getContainer().find('li'),
	          previousElement = angular.element(allItems[allItems.size() - 1]),
	          i = allItems.size() - 2;

	      for (i; i >= 0; i--) {
	        if ((title > previousElement.find('a').attr('title')) ||
	            (previousElement.find('.' + type).size() === 0))
	        {
	          return previousElement;
	        }
	        else {
	          previousElement = angular.element(allItems[i]);
	        }
	      }
	    }

	    return {
	      generateMenuItem: generateMenuItem,
	      link: linkFn
	    };
	  };
	};


/***/ },
/* 43 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	/**
	 * queryMenuItemFactory
	 *
	 * Defines a menu item factory for query menu items, which is set up providing type,
	 * container and a link function. The link function makes the item sensitive to its
	 * selected state and provides an event-based way to destroy the menu item, signalled
	 * by the 'openproject.layout.removeMenuItem' event.
	 */
	module.exports = function(menuItemFactory, $state, $stateParams, $animate, $timeout, QUERY_MENU_ITEM_TYPE) {
	  return menuItemFactory({
	    type: QUERY_MENU_ITEM_TYPE,
	    container: '#main-menu-work-packages-wrapper ~ .menu-children',
	    linkFn: function(scope, element, attrs) {
	      scope.queryId = scope.objectId || attrs.objectId;

	      function setActiveState() {
	        // Apparently the queryId sometimes is an number, sometimes a string, sometimes
	        // undefined and sometimes null. Use == instead of == to make sure these
	        // comparisons work.
	        // No idea though, why these sometimes are null and sometimes are undefined.
	        element.toggleClass('selected', $state.includes('work-packages') &&
	                                        (scope.queryId == $stateParams.query_id));
	      }
	      scope.$on('openproject.layout.activateMenuItem', setActiveState);

	      function removeItem() {
	        $animate.leave(element.parent(), function () {
	          scope.$destroy();
	        });
	      }

	      scope.$on('openproject.layout.removeMenuItem', function(event, itemData) {
	        if (itemData.itemType === QUERY_MENU_ITEM_TYPE && itemData.objectId === scope.queryId) {
	          removeItem();
	        }
	      });

	      scope.$on('openproject.layout.renameQueryMenuItem', function(event, itemData) {
	        if (itemData.itemType === QUERY_MENU_ITEM_TYPE && itemData.queryId === scope.queryId) {
	          element.html(itemData.queryName);
	        }
	      });
	    }
	  });
	};


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	__webpack_require__(45);


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.messages.controllers')
	  .controller('MessagesController', ['$scope', '$http', 'PathHelper',
	    'SortService', 'PaginationService',
	    __webpack_require__(46)
	  ]);


/***/ },
/* 46 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, $http, PathHelper, SortService, PaginationService) {
	  $scope.PathHelper = PathHelper;
	  $scope.messages = gon.messages;
	  $scope.totalMessageCount = gon.total_count;
	  $scope.isLoading = false;
	  $scope.projectId = gon.project_id;
	  $scope.activityModuleEnabled = gon.activity_modul_enabled;

	  PaginationService.setPerPageOptions(gon.settings.pagination.per_page_options);
	  SortService.setColumn(gon.sort_column);
	  SortService.setDirection(gon.sort_direction);

	  $scope.loadMessages = function() {
	    $scope.isLoading = true;

	    $http.get(PathHelper.boardPath(gon.project_id, gon.board_id),
	              {
	                params: {
	                          sort: SortService.getSortParam(),
	                          page: PaginationService.getPage(),
	                          per_page: PaginationService.getPerPage()
	                        }
	              })
	         .success(function(data, status, headers, config) {
	           $scope.messages = data.messages;
	           $scope.isLoading = false;
	         })
	         .error(function(data, status, headers, config) {
	           $scope.isLoading = false;
	         });
	  };
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.models')
	  .constant('OPERATORS_NOT_REQUIRING_VALUES', ['o', 'c', '!*', '*', 't', 'w'])
	  .constant('SELECTABLE_FILTER_TYPES', ['list', 'list_optional', 'list_status',
	    'list_subprojects', 'list_model'
	  ])
	  .factory('Filter', ['OPERATORS_NOT_REQUIRING_VALUES',
	    'SELECTABLE_FILTER_TYPES', __webpack_require__(48)
	  ])
	  .factory('Query', ['Filter',
	    'Sortation',
	    'UrlParamsHelper',
	    'INITIALLY_SELECTED_COLUMNS', __webpack_require__(49)
	  ])
	  .factory('Sortation', ['DEFAULT_SORT_CRITERIA', 'MAX_SORT_ELEMENTS', __webpack_require__(
	    50)]);


/***/ },
/* 48 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(OPERATORS_NOT_REQUIRING_VALUES, SELECTABLE_FILTER_TYPES) {
	  var Filter = function (data) {
	    angular.extend(this, data);

	    // Experimental API controller will always give back strings even for numeric values so need to parse them
	    if (this.isSingleInputField() && Array.isArray(this.values)) this.textValue = this.parseSingleValue(this.values[0]);

	    this.pruneValues();
	  };

	  Filter.prototype = {
	    /**
	     * @name toParams
	     * @function
	     *
	     * @description Serializes the filter to parameters required by the backend
	     * @returns {Object} Request parameters
	     */
	    toParams: function() {
	      var params = {};

	      params['op[' + this.name + ']'] = this.operator;
	      params['v[' + this.name + '][]'] = this.getValuesAsArray();

	      return params;
	    },

	    isSingleInputField: function() {
	      return SELECTABLE_FILTER_TYPES.indexOf(this.type) === -1;
	    },

	    parseSingleValue: function(v) {
	      return (this.type == 'integer') ? parseInt(v) : v;
	    },

	    getValuesAsArray: function() {
	      if(this.isSingleInputField()) {
	        return [this.textValue];
	      } else if (Array.isArray(this.values)) {
	        return this.values;
	      } else if (this.values) {
	        return [this.values];
	      } else {
	        return [];
	      }
	    },

	    requiresValues: function() {
	      return OPERATORS_NOT_REQUIRING_VALUES.indexOf(this.operator) === -1;
	    },

	    isConfigured: function() {
	      return this.operator && (this.hasValues() || !this.requiresValues());
	    },

	    pruneValues: function() {
	      if (this.values) {
	        this.values = this.values.filter(function(value) {
	          return value !== '';
	        });
	      }
	    },

	    hasValues: function() {
	      if (this.isSingleInputField()) {
	        return !!this.textValue;
	      } else {
	        return Array.isArray(this.values) ? this.values.length > 0 : !!this.values;
	      }
	    }
	  };

	  return Filter;
	};


/***/ },
/* 49 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(Filter, Sortation, UrlParamsHelper, INITIALLY_SELECTED_COLUMNS) {

	  var Query = function (queryData, options) {
	    angular.extend(this, queryData, options);

	    this.filters = [];
	    this.groupBy = this.groupBy || '';

	    if(queryData.filters){
	      if(options && options.rawFilters) {
	        this.setRawFilters(queryData.filters);
	      } else {
	        this.setFilters(queryData.filters);
	      }
	    }

	    if(queryData.sortCriteria) this.setSortation(queryData.sortCriteria);

	    if(!this.columns) {
	      this.setColumns(INITIALLY_SELECTED_COLUMNS);
	    }
	  };

	  Query.prototype = {
	    /**
	     * @name toParams
	     * @function
	     *
	     * @description Serializes the query to parameters required by the backend
	     * @returns {Object} Request parameters
	     */
	    toParams: function() {
	      return angular.extend.apply(this, [
	        {
	          'f[]': this.getFilterNames(this.getActiveConfiguredFilters()),
	          'c[]': this.getParamColumns(),
	          'group_by': this.groupBy,
	          'sort': this.getEncodedSortation(),
	          'display_sums': this.displaySums,
	          'name': this.name,
	          'is_public': this.isPublic,
	          'accept_empty_query_fields': this.isDirty(),
	        }].concat(this.getActiveConfiguredFilters().map(function(filter) {
	          return filter.toParams();
	        }))
	      );
	    },

	    toUpdateParams: function() {
	      return angular.extend.apply(this, [
	        {
	          'id': this.id,
	          'query_id': this.id,
	          'f[]': this.getFilterNames(this.getActiveConfiguredFilters()),
	          'c[]': this.getParamColumns(),
	          'group_by': this.groupBy,
	          'sort': this.getEncodedSortation(),
	          'display_sums': this.displaySums,
	          'name': this.name,
	          'is_public': this.isPublic,
	          'accept_empty_query_fields': this.isDirty()
	        }].concat(this.getActiveConfiguredFilters().map(function(filter) {
	          return filter.toParams();
	        }))
	      );
	    },

	    save: function(data){
	      // Note: query has already been updated, only the id needs to be set
	      this.id = data.id;
	      this.dirty = false;
	      return this;
	    },

	    star: function() {
	      this.starred = true;
	    },

	    unstar: function() {
	      this.starred = false;
	    },

	    update: function(queryData) {
	      angular.extend(this, queryData);

	      if(queryData.filters){
	        this.filters = [];
	        this.setRawFilters(queryData.filters);
	      }
	      if(queryData.sortCriteria) this.setSortation(queryData.sortCriteria);
	      this.dirty = true;

	      return this;
	    },

	    getQueryString: function(){
	      return UrlParamsHelper.buildQueryString(this.toParams());
	    },

	    getSortation: function(){
	      return this.sortation;
	    },

	    setSortation: function(sortCriteria){
	      this.sortation = new Sortation(sortCriteria);
	    },

	    setGroupBy: function(groupBy) {
	      this.groupBy = groupBy;
	    },

	    updateSortElements: function(sortElements){
	      this.sortation.setSortElements(sortElements);
	    },

	    setName: function(name) {
	      this.name = name;
	    },

	    /**
	     * @name setAvailableWorkPackageFilters
	     * @function
	     *
	     * @description
	     * Sets the available filters, which hold filter data of all selectable filters.
	     * This data is also used to augment filters with their type and a modelname.
	     *
	     * @returns {undefined}
	     */
	    setAvailableWorkPackageFilters: function(availableFilters) {
	      this.availableWorkPackageFilters = availableFilters;

	      if (this.project_id){
	        delete this.availableWorkPackageFilters["project_id"];
	      } else {
	        delete this.availableWorkPackageFilters["subproject_id"];
	      }
	      // TODO RS: Need to assertain if there are any sub-projects and remove filter if not.
	      // The project will have to be fetched prior to this.
	    },

	    /**
	     * @name setFilters
	     * @function
	     *
	     * @description
	     * Aggregates the filter data with meta data from availableWorkPackageFilters.
	     * Then initializes filter objects and sets the query filter reference to them.

	     * @returns {undefined}
	     */
	    setFilters: function(filters) {
	      if (filters){
	        var self = this;

	        this.filters = filters.map(function(filterData){
	          return new Filter(self.getExtendedFilterData(filterData));
	        });
	      }
	    },

	    setRawFilters: function(filters) {
	      this.dirty = true;
	      if (filters){
	        var self = this;

	        this.filters = filters.map(function(filterData){
	          return new Filter(filterData);
	        });
	      }
	    },

	    setColumns: function(columns) {
	      this.columns = columns;
	    },

	    /**
	     * @name isDefault
	     * @function
	     *
	     * @description
	     * Returns true if the query is a default query
	     * @returns {boolean} default
	     */
	    isDefault: function() {
	      return this.name === '_';
	    },

	    /**
	     * @name isGlobal
	     * @function
	     *
	     * @description
	     * Returns true if the query is a global query, meaning a query that is not
	     * scoped to a project.
	     * @returns {boolean} default
	     */
	    isGlobal: function() {
	      return !this.project_id;
	    },

	    /**
	     * @name setFilters
	     * @function
	     *
	     * @description
	     * (Re-)sets the query filters to a single filter for status: open

	     * @returns {undefined}
	     */
	    setDefaultFilter: function() {
	      var statusOpenFilterData = this.getExtendedFilterData({name: 'status_id', operator: 'o'});
	      this.filters = [new Filter(statusOpenFilterData)];
	    },

	    /**
	     * @name getExtendedFilterData
	     * @function
	     *
	     * @description
	     * Extends filter data with meta data from availableWorkPackageFilters.

	     * @returns {object} Extended filter data.
	     */
	    getExtendedFilterData: function(filterData) {
	      return angular.extend(filterData, {
	        type: this.getFilterType(filterData.name),
	        modelName: this.getFilterModelName(filterData.name)
	      });
	    },

	    getFilterNames: function(filters) {
	      return (filters || this.filters).map(function(filter){
	        return filter.name;
	      });
	    },

	    getSelectedColumns: function(){
	      return this.columns;
	    },

	    getParamColumns: function(){
	      var selectedColumns = this.columns.map(function(column) {
	        return column.name;
	      });

	      return selectedColumns;
	    },

	    getEncodedSortation: function() {
	      return !!this.sortation ? this.sortation.encode() : null;
	    },

	    getColumnNames: function() {
	      return this.columns.map(function(column) {
	        return column.name;
	      });
	    },

	    getFilterByName: function(filterName) {
	      return this.filters.filter(function(filter){
	        return filter.name === filterName;
	      })[0];
	    },

	    addFilter: function(filterName, options) {
	      this.dirty = true;
	      var filter = this.getFilterByName(filterName);

	      if (filter) {
	        filter.deactivated = false;
	      } else {
	        var filterData = this.getExtendedFilterData(angular.extend({name: filterName}, options));
	        filter = new Filter(filterData);

	        this.filters.push(filter);
	      }
	    },

	    removeFilter: function(filterName) {
	      this.dirty = true;
	      this.filters.splice(this.getFilterNames().indexOf(filterName), 1);
	    },

	    deactivateFilter: function(filter) {
	      this.dirty = true;
	      filter.deactivated = true;
	    },

	    getFilterType: function(filterName) {
	      if (this.availableWorkPackageFilters && this.availableWorkPackageFilters[filterName]){
	        return this.availableWorkPackageFilters[filterName].type;
	      } else {
	        return 'none';
	      }
	    },

	    getFilterModelName: function(filterName) {
	      if (this.availableWorkPackageFilters && this.availableWorkPackageFilters[filterName]) return this.availableWorkPackageFilters[filterName].modelName;
	    },

	    getActiveFilters: function() {
	      return this.filters.filter(function(filter){
	        return !filter.deactivated;
	      });
	    },

	    getActiveConfiguredFilters: function() {
	      return this.getActiveFilters().filter(function(filter){
	        return filter.isConfigured();
	      });
	    },

	    clearAll: function(){
	      this.groupBy = '';
	      this.displaySums = false;
	      this.id = null;
	      this.clearFilters();
	    },

	    clearFilters: function(){
	      this.filters.map(function(filter){
	        filter.deactivated = true;
	      });
	    },

	    isNew: function() {
	      return !this.id;
	    },

	    isDirty: function() {
	      return this.dirty;
	    },

	    hasName: function() {
	      return !!this.name && !this.isDefault();
	    },

	  };

	  return Query;
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(DEFAULT_SORT_CRITERIA, MAX_SORT_ELEMENTS) {
	  var defaultSortDirection = 'asc';

	  var Sortation = function(sortation) {
	    if (Array.isArray(sortation)) {
	      if (sortation.length > 0) {
	        // Convert sortation element from API meta format
	        this.sortElements = sortation.map(function(sortElement) {
	          return {field: _.first(sortElement), direction: _.last(sortElement)};
	        });
	      } else {
	        this.sortElements = this.decodeEncodedSortation(DEFAULT_SORT_CRITERIA);
	      }
	    } else {
	      // Unless it's an array we expect the sortation to be in a serialized form
	      this.sortElements = this.decodeEncodedSortation(sortation || DEFAULT_SORT_CRITERIA);
	    }
	  };

	  Sortation.prototype.getPrimarySortationCriterion = function() {
	    return this.sortElements[0];
	  };

	  Sortation.prototype.getDisplayedSortDirectionOfHeader = function(headerName) {
	    var sortDirection, displayedSortation = this.getPrimarySortationCriterion();

	    if(displayedSortation && displayedSortation.field === headerName) sortDirection = displayedSortation.direction;

	    return sortDirection;
	  };

	  Sortation.prototype.getCurrentSortDirectionOfHeader = function(headerName) {
	    var sortDirection;

	    angular.forEach(this.sortElements, function(sortation){
	      if(sortation && sortation.field === headerName) sortDirection = sortation.direction;
	    });

	    return sortDirection;
	  };

	  Sortation.prototype.removeSortElement = function(elementName) {
	    var index = this.sortElements.map(function(sortation){
	      return sortation.field;
	    }).indexOf(elementName);

	    if (index !== -1) this.sortElements.splice(index, 1);
	  };

	  Sortation.prototype.addSortElement = function(sortElement) {
	    this.removeSortElement(sortElement.field);

	    this.sortElements.unshift(sortElement);

	    this.capSortElements();
	  };

	  Sortation.prototype.setSortElements = function(sortElements) {
	    var elements = this.sortElements;
	    elements.length = 0;
	    angular.forEach(sortElements, function(element){
	      elements.push(element);
	    });

	    this.capSortElements();
	  };

	  Sortation.prototype.capSortElements = function() {
	    if(this.sortElements.length > MAX_SORT_ELEMENTS) {
	      this.sortElements.length = MAX_SORT_ELEMENTS;
	    }
	  };

	  Sortation.prototype.getTargetSortationOfHeader = function(headerName) {
	    var targetSortation = angular.copy(this);
	    var targetSortDirection = this.getCurrentSortDirectionOfHeader(headerName) === 'asc' ? 'desc' : 'asc';

	    targetSortation.addSortElement({field: headerName, direction: targetSortDirection}, targetSortation);

	    return targetSortation;
	  };

	  Sortation.prototype.decodeEncodedSortation = function(encodedSortation) {
	    return encodedSortation.split(',').map(function(sortParam) {
	      var fieldAndDirection = sortParam.split(':');
	      return { field: fieldAndDirection[0], direction: fieldAndDirection[1] || defaultSortDirection};
	    });
	  };

	  Sortation.prototype.encode = function() {
	    return this.sortElements.map(function(sortation){
	      if (sortation.direction === 'asc') {
	        return sortation.field;
	      } else {
	        return [sortation.field, sortation.direction].join(':');
	      }
	    }).join(',');
	  };

	  return Sortation;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 51 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject')

	.config([
	  '$stateProvider',
	  '$urlRouterProvider',
	  '$urlMatcherFactoryProvider',
	  function($stateProvider, $urlRouterProvider, $urlMatcherFactoryProvider) {

	  (function() {
	    function valToString(val) { return val !== null ? val.toString() : val; }
	    function valFromString(val) { return val !== null ? val.toString() : val; }
	    function regexpMatches(val) { /*jshint validthis:true */ return this.pattern.test(val); }
	    $urlMatcherFactoryProvider.type('projectPathType', {
	        encode: valToString,
	        decode: valFromString,
	        is: regexpMatches,
	        pattern: /.*/
	      });
	  })();

	  $stateProvider
	    .state('work-packages', {
	      url: '{projectPath:projectPathType}/work_packages?query_id',
	      abstract: true,
	      templateUrl: '/templates/work_packages.html',
	      controller: 'WorkPackagesController',
	      resolve: {
	        latestTab: function($state) {
	          var stateName = 'work-packages.list.details.overview'; // the default tab

	          return {
	            getStateName: function() {
	              return stateName;
	            },
	            registerState: function() {
	              stateName = $state.current.name;
	            }
	          };
	        }
	      }
	    })
	    .state('work-packages.list', {
	      url: '',
	      controller: 'WorkPackagesListController',
	      templateUrl: '/templates/work_packages.list.html'
	    })
	    .state('work-packages.list.new', {
	      url: '/create_new?query_props&type',
	      controller: 'WorkPackageNewController',
	      controllerAs: 'vm',
	      templateUrl: '/templates/work_packages.list.new.html'
	    })
	    .state('work-packages.list.details', {
	      url: '/{workPackageId:[0-9]+}?query_props',
	      templateUrl: '/templates/work_packages.list.details.html',
	      controller: 'WorkPackageDetailsController',
	      resolve: {
	        workPackage: function(WorkPackageService, $stateParams) {
	          return WorkPackageService.getWorkPackage($stateParams.workPackageId);
	        }
	      }
	    })
	    .state('work-packages.list.details.overview', {
	      url: '/overview',
	      controller: 'DetailsTabOverviewController',
	      templateUrl: '/templates/work_packages/tabs/overview.html',
	      controllerAs: 'vm'
	    })
	    .state('work-packages.list.details.activity', {
	      url: '/activity',
	      templateUrl: '/templates/work_packages/tabs/activity.html'
	    })
	    .state('work-packages.list.details.activity.details', {
	      url: '#{activity_no:[0-9]+}',
	      templateUrl: '/templates/work_packages/tabs/activity.html'
	    })
	    .state('work-packages.list.details.relations', {
	      url: '/relations',
	      templateUrl: '/templates/work_packages/tabs/relations.html'
	    })
	    .state('work-packages.list.details.watchers', {
	      url: '/watchers',
	      controller: 'DetailsTabWatchersController',
	      templateUrl: '/templates/work_packages/tabs/watchers.html',
	      controllerAs: 'watchers'
	    })
	}])

	.run([
	  '$location',
	  '$rootElement',
	  '$browser',
	  '$rootScope',
	  function($location, $rootElement, $browser, $rootScope) {
	    // Our application is still a hybrid one, meaning most routes are still
	    // handled by Rails. As such, we disable the default link-hijacking that
	    // Angular's HTML5-mode turns on.
	    $rootElement.off('click');
	    $rootElement.on('click', 'a[data-ui-route]', function(event) {
	      if (!jQuery('body').has('div[ui-view]').length) return;
	      if (event.ctrlKey || event.metaKey || event.which == 2) return;

	      // NOTE: making use of event delegation, thus jQuery-only.
	      var elm          = jQuery(event.target);
	      var absHref      = elm.prop('href');
	      var rewrittenUrl = $location.$$rewrite(absHref);

	      if (absHref && !elm.attr('target') &&
	        rewrittenUrl &&
	        !event.isDefaultPrevented()) {

	        event.preventDefault();
	        if (rewrittenUrl != $browser.url()) {
	          // update location manually
	          $location.$$parse(rewrittenUrl);
	          $rootScope.$apply();
	          // hack to work around FF6 bug 684208 when scenario runner clicks on links
	          window.angular['ff-684208-preventDefault'] = true;
	        }
	      }
	    });
	  }
	]);


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.services')
	  .service('ActivityService', ['HALAPIResource',
	    '$http',
	    'PathHelper', __webpack_require__(54)
	  ])
	  .service('AuthorisationService', __webpack_require__(55))
	  .service('GroupService', ['$http', 'PathHelper', __webpack_require__(56)])
	  .service('HookService', __webpack_require__(57))
	  .service('KeyboardShortcutService', [
	    '$window',
	    '$rootScope',
	    '$timeout',
	    'PathHelper',
	    __webpack_require__(58)])
	  .service('PaginationService', ['DEFAULT_PAGINATION_OPTIONS', __webpack_require__(
	    59)])
	  .service('PriorityService', ['$http', 'PathHelper', __webpack_require__(
	    60)])
	  .service('ProjectService', ['$http', 'PathHelper', 'FiltersHelper', __webpack_require__(
	    61)])
	  .service('QueryService', [
	    'Query',
	    'Sortation',
	    '$http',
	    'PathHelper',
	    '$q',
	    'AVAILABLE_WORK_PACKAGE_FILTERS',
	    'StatusService',
	    'TypeService',
	    'PriorityService',
	    'UserService',
	    'VersionService',
	    'CategoryService',
	    'RoleService',
	    'GroupService',
	    'ProjectService',
	    'WorkPackagesTableHelper',
	    'I18n',
	    'queryMenuItemFactory',
	    '$rootScope',
	    'QUERY_MENU_ITEM_TYPE',
	    __webpack_require__(62)
	  ])
	  .service('RoleService', ['$http', 'PathHelper', __webpack_require__(63)])
	  .service('SortService', __webpack_require__(64))
	  .service('StatusService', ['$http', 'PathHelper', __webpack_require__(65)])
	  .factory('TextileService', ['$http', 'PathHelper', __webpack_require__(53)])
	  .service('TimezoneService', ['ConfigurationService', 'I18n', __webpack_require__(
	    66)])
	  .service('TypeService', ['$http', 'PathHelper', __webpack_require__(67)])
	  .service('UserService', [
	    'HALAPIResource',
	    '$http',
	    'PathHelper',
	    __webpack_require__(68)
	  ])
	  .service('VersionService', ['$http', 'PathHelper', __webpack_require__(
	    69)])
	  .service('CategoryService', ['$http', 'PathHelper', __webpack_require__(
	    70)])
	  .constant('DEFAULT_FILTER_PARAMS', {
	    'fields[]': 'status_id',
	    'operators[status_id]': 'o'
	  })
	  .service('WorkPackageService', [
	    '$http',
	    'PathHelper',
	    'WorkPackagesHelper',
	    'HALAPIResource',
	    'DEFAULT_FILTER_PARAMS',
	    'DEFAULT_PAGINATION_OPTIONS',
	    '$rootScope',
	    '$window',
	    '$q',
	    'AuthorisationService',
	    'EditableFieldsState',
	    'WorkPackageFieldService',
	    'NotificationsService',
	    __webpack_require__(71)
	  ])
	  .service('NotificationsService', [
	    'I18n',
	    '$rootScope',
	    __webpack_require__(72)
	  ])
	  .service('ApiNotificationsService', [
	    'NotificationsService',
	    'ApiHelper',
	    __webpack_require__(73)
	  ])
	  .service('WatchersService', __webpack_require__(74))
	  .service('WatchersService', [
	    '$http',
	    '$q',
	    __webpack_require__(74)
	  ])
	  .service('ConversionService', __webpack_require__(75));


/***/ },
/* 53 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {
	  return {
	    renderWithWorkPackageContext: renderWithWorkPackageContext
	  };

	  function renderWithWorkPackageContext(workPackageForm, text) {
	    return render(workPackageForm.links.previewMarkup.props.href, text);
	  }

	  function render(url, text) {
	    return $http({
	      url: url,
	      method: 'POST',
	      data: text,
	      headers: { 'Content-Type': 'text/plain; charset=UTF-8' }
	    });
	  }
	};


/***/ },
/* 54 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(HALAPIResource, $http, PathHelper){

	  var ActivityService = {
	    createComment: function(workPackage, activities, descending, comment) {
	      var options = {
	        ajax: {
	          method: "POST",
	          data: JSON.stringify({ comment: comment }),
	          contentType: "application/json; charset=utf-8"
	        }
	      };

	      return workPackage.links.addComment.fetch(options);
	    },

	    updateComment: function(activity, comment) {
	      var options = {
	        ajax: {
	          method: 'PATCH',
	          data: JSON.stringify({ comment: comment }),
	          contentType: "application/json; charset=utf-8"
	        }
	      };

	      return activity.links.update.fetch(options).then(function(activity){
	        return activity;
	      });
	    }
	  };

	  return ActivityService;
	};


/***/ },
/* 55 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var links = {};

	  var AuthorisationService = {

	    initModelAuth: function(modelName, modelLinks) {
	      links[modelName] = modelLinks;
	    },

	    can: function(modelName, action) {
	      return links[modelName] && (action in links[modelName]);
	    },

	    cannot: function(modelName, action) {
	      return !AuthorisationService.can(modelName, action);
	    }
	  };

	  return AuthorisationService;
	};


/***/ },
/* 56 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {

	  var GroupService = {
	    getGroups: function() {
	      var url = PathHelper.apiGroupsPath();

	      return GroupService.doQuery(url);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return response.data.groups;
	        });
	    }
	  };

	  return GroupService;
	};


/***/ },
/* 57 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var hooks = { };

	  var HookService = {
	    register: function(id, callback) {
	      if (callback && typeof(callback) == "function") {
	        if (!hooks[id]) {
	          hooks[id] = [];
	        }

	        hooks[id].push(callback);
	      }
	    },
	    call: function(id, params) {
	      var results = [];

	      if (hooks[id]) {
	        for (var x = 0; x < hooks[id].length; x++) {
	          var result = hooks[id][x](params);

	          if (result) {
	            results.push(result);
	          }
	        }
	      }

	      return results;
	    }
	  };

	  return HookService;
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($window, $rootScope, $timeout, PathHelper) {

	  // modalHelperInstance
	  // Mousetrap
	  // TODO: globals, should be wrapped in .constant

	  var accessKeys = {
	    preview: 1,
	    newWorkPackage: 2,
	    edit: 3,
	    quickSearch: 4,
	    projectSearch: 5,
	    help: 6,
	    moreMenu: 7,
	    details: 8
	  };

	  // maybe move it to a .constant
	  var shortcuts = {
	    '?': showHelpModal,
	    'up up down down left right left right b a enter': showHelpModal,
	    'g m': 'staticMyPagePath',
	    'g o': projectScoped('staticProjectPath'),
	    'g w p': projectScoped('staticProjectWorkPackagesPath'),
	    'g w i': projectScoped('staticProjectWikiPath'),
	    'g a': projectScoped('activityFromPath'),
	    'g c': projectScoped('staticProjectCalendarPath'),
	    'g n': projectScoped('staticProjectNewsPath'),
	    'g t': projectScoped('staticProjectTimelinesPath'),
	    'n w p': projectScoped('staticWorkPackageNewWithParametersPath'),

	    'g e': accessKey('edit'),
	    'g p': accessKey('preview'),
	    'd w p': accessKey('details'),
	    'm': accessKey('moreMenu'),
	    'p': accessKey('projectSearch'),
	    's': accessKey('quickSearch'),
	    'k': focusPrevItem,
	    'j': focusNextItem
	  };

	  function accessKey(keyName) {
	    var key = accessKeys[keyName];
	    return function() {
	      var elem = angular.element('[accesskey=' + key + ']:first');
	      if (elem.is('input')) {
	        // timeout with delay so that the key is not
	        // triggered on the input
	        $timeout(function() {
	          elem.focus();
	        });
	      } else if(elem.is('[href]')) {
	        clickLink(elem[0]);
	      } else {
	        elem.click();
	      }
	    };
	  }

	  function projectScoped(action) {
	    return function() {
	      var projectIdentifier = $rootScope.projectIdentifier;
	      if (projectIdentifier) {
	        var url = PathHelper[action](projectIdentifier);
	        $window.location.href = url;
	      }
	    };
	  }

	  function clickLink(link) {
	    var cancelled = false;

	    if (document.createEvent) {
	        var event = new MouseEvent('click', {
	          view: window,
	          bubbles: true,
	          cancelable: true
	        });
	        cancelled = !link.dispatchEvent(event);
	    }
	    else if (link.fireEvent) {
	        cancelled = !link.fireEvent('onclick');
	    }

	    if (!cancelled) {
	        window.location = link.href;
	    }
	  }

	  function showHelpModal() {
	    modalHelperInstance.createModal(PathHelper.staticKeyboardShortcutsHelpPath());
	  }

	  // this could be extracted into a separate component if it grows
	  var accessibleListSelector = 'table.list, table.keyboard-accessible-list';
	  var accessibleRowSelector = 'table.list tr, table.keyboard-accessible-list tr';

	  function findListInPage() {
	    var domLists, focusElements;
	    focusElements = [];
	    domLists = angular.element(accessibleListSelector);
	    domLists.find('tbody tr').each(function(index, tr){
	      var firstLink = angular.element(tr).find('a:visible:not(.toggle-all)')[0];
	      if ( firstLink !== undefined ) { focusElements.push(firstLink); }
	    });
	    return focusElements;
	  }

	  function focusItemOffset(offset) {
	    var list, index;
	    list = findListInPage();
	    if (list === null) { return; }
	    index = list.indexOf(
	      angular
	        .element(document.activeElement)
	        .parents(accessibleRowSelector)
	        .find('a:visible')[0]
	    );
	    angular.element(list[(index+offset+list.length) % list.length]).focus();
	  }

	  function focusNextItem() {
	    focusItemOffset(1);
	  }

	  function focusPrevItem() {
	    focusItemOffset(-1);
	  }

	  var KeyboardShortcutService = {
	    activate: function() {

	      _.forEach(shortcuts, function(action, key) {
	        if (_.isFunction(action)) {
	          Mousetrap.bind(key, action);
	        } else {
	          Mousetrap.bind(key, function() {
	            var url = PathHelper[action]();
	            $window.location.href = url;
	          });
	        }
	      });
	    }
	  };

	  return KeyboardShortcutService;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 59 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(DEFAULT_PAGINATION_OPTIONS) {
	  var paginationOptions = {
	    page: DEFAULT_PAGINATION_OPTIONS.page,
	    perPage: DEFAULT_PAGINATION_OPTIONS.perPage,
	    perPageOptions: DEFAULT_PAGINATION_OPTIONS.perPageOptions,
	    maxVisiblePageOptions: DEFAULT_PAGINATION_OPTIONS.maxVisiblePageOptions,
	    optionsTruncationSize: DEFAULT_PAGINATION_OPTIONS.optionsTruncationSize
	  };

	  var PaginationService = {
	    getPaginationOptions: function() {
	      return paginationOptions;
	    },
	    getPage: function() {
	      return paginationOptions.page;
	    },
	    setPage: function(page) {
	      paginationOptions.page = page;
	    },
	    getPerPage: function() {
	      return paginationOptions.perPage;
	    },
	    getMaxVisiblePageOptions: function() {
	      return paginationOptions.maxVisiblePageOptions;
	    },
	    getOptionsTruncationSize: function() {
	      return paginationOptions.optionsTruncationSize;
	    },
	    setPerPage: function(perPage) {
	      paginationOptions.perPage = perPage;
	    },
	    getPerPageOptions: function() {
	      return paginationOptions.perPageOptions;
	    },
	    setPerPageOptions: function(perPageOptions) {
	      paginationOptions.perPageOptions = perPageOptions;
	    },
	    getLowerPageBound: function() {
	      return paginationOptions.perPage * (paginationOptions.page - 1) + 1;
	    },
	    getUpperPageBound: function(limit) {
	      return Math.min(paginationOptions.perPage * paginationOptions.page, limit);
	    },
	    resetPage: function() {
	      paginationOptions.page = 1;
	    },
	    nextPage: function() {
	      paginationOptions.page = paginationOptions.page + 1;
	    },
	    previousPage: function() {
	      paginationOptions.page = paginationOptions.page - 1;
	    }
	  };

	  return PaginationService;
	};


/***/ },
/* 60 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {

	  var PriorityService = {
	    getPriorities: function() {
	      var url = PathHelper.apiPrioritiesPath();

	      return PriorityService.doQuery(url);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return response.data._embedded.elements;
	        });
	    }
	  };

	  return PriorityService;
	};


/***/ },
/* 61 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper, FiltersHelper) {

	  var ProjectService = {
	    getProject: function(projectIdentifier) {
	      var url = PathHelper.apiProjectPath(projectIdentifier);

	      return $http.get(url).then(function(response) {
	        return response.data.project;
	      });
	    },

	    getProjects: function() {
	      var url = PathHelper.apiProjectsPath();

	      return ProjectService.doQuery(url)
	        .then(function(projects){
	          return FiltersHelper.assignAncestorLevels(projects);
	        });
	    },

	    getSubProjects: function(projectIdentifier) {
	      var url = PathHelper.apiProjectSubProjectsPath(projectIdentifier);

	      return ProjectService.doQuery(url);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return response.data.projects;
	        });
	    },
	  };

	  return ProjectService;
	};


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	/* jshint camelcase: false */

	module.exports = function(
	    Query,
	    Sortation,
	    $http,
	    PathHelper,
	    $q,
	    AVAILABLE_WORK_PACKAGE_FILTERS,
	    StatusService,
	    TypeService,
	    PriorityService,
	    UserService,
	    VersionService,
	    CategoryService,
	    RoleService,
	    GroupService,
	    ProjectService,
	    WorkPackagesTableHelper,
	    I18n,
	    queryMenuItemFactory,
	    $rootScope,
	    QUERY_MENU_ITEM_TYPE
	  ) {

	  var query;

	  var availableColumns = [],
	      availableUnusedColumns = [],
	      availableFilterValues = {},
	      availableFilters = {},
	      availableGroupedQueries;

	  var totalEntries;

	  var QueryService = {
	    initQuery: function(queryId, queryData, selectedColumns, exportFormats, afterQuerySetupCallback) {
	      query = new Query({
	        id: queryId,
	        name: queryData.name,
	        project_id: queryData.project_id,
	        displaySums: queryData.display_sums,
	        groupSums: queryData.group_sums,
	        sums: queryData.sums,
	        columns: selectedColumns,
	        groupBy: queryData.group_by,
	        isPublic: queryData.is_public,
	        exportFormats: exportFormats,
	        starred: queryData.starred,
	        links: queryData._links
	      });
	      query.setSortation(queryData.sort_criteria);

	      QueryService.getAvailableFilters(query.project_id)
	        .then(function(availableFilters) {
	          query.setAvailableWorkPackageFilters(availableFilters);
	          if (query.isDefault()) {
	            query.setDefaultFilter();
	          }
	          if(queryData.filters && queryData.filters.length) {
	            query.setFilters(queryData.filters);
	          }

	          return query;
	        })
	        .then(afterQuerySetupCallback);

	      return query;
	    },

	    updateQuery: function(values, afterUpdate) {
	      var queryData = {
	      };
	      if(!!values.display_sums) {
	        queryData.displaySums = values.display_sums;
	      }
	      if(!!values.columns) {
	        queryData.columns = values.columns;
	      }
	      if(!!values.group_by) {
	        queryData.groupBy = values.group_by;
	      }
	      if(!!values.sort_criteria) {
	        queryData.sortCriteria = values.sort_criteria;
	      }
	      query.update(queryData);

	      QueryService.getAvailableFilters(query.project_id)
	        .then(function(availableFilters) {
	          query.setAvailableWorkPackageFilters(availableFilters);
	          if(queryData.filters && queryData.filters.length) {
	            query.setFilters(queryData.filters);
	          }

	          return query;
	        })
	        .then(afterUpdate);

	      return query;
	    },

	    getQuery: function() {
	      return query;
	    },

	    clearQuery: function() {
	      query = null;
	    },

	    getQueryName: function() {
	      if (query && query.hasName()) {
	        return query.name;
	      }
	    },

	    setTotalEntries: function(numberOfEntries) {
	      totalEntries = numberOfEntries;
	    },

	    getTotalEntries: function() {
	      return totalEntries;
	    },

	    getAvailableUnusedColumns: function() {
	      return availableUnusedColumns;
	    },

	    hideColumns: function(columnNames) {
	      WorkPackagesTableHelper.moveColumns(columnNames, this.getSelectedColumns(), availableUnusedColumns);
	    },

	    showColumns: function(columnNames) {
	      WorkPackagesTableHelper.moveColumns(columnNames, availableUnusedColumns, this.getSelectedColumns());
	    },

	    getAvailableGroupedQueries: function() {
	      return availableGroupedQueries;
	    },

	    // data loading

	    loadAvailableGroupedQueries: function(projectIdentifier) {
	      if (availableGroupedQueries) {
	        return $q.when(availableGroupedQueries);
	      }

	      return QueryService.fetchAvailableGroupedQueries(projectIdentifier);
	    },

	    fetchAvailableGroupedQueries: function(projectIdentifier) {
	      var url = projectIdentifier ? PathHelper.apiProjectGroupedQueriesPath(projectIdentifier) : PathHelper.apiGroupedQueriesPath();

	      return QueryService.doQuery(url)
	        .then(function(groupedQueriesResults) {
	          availableGroupedQueries = groupedQueriesResults;
	          return availableGroupedQueries;
	        });
	    },

	    loadAvailableUnusedColumns: function(projectIdentifier) {
	      return QueryService.loadAvailableColumns(projectIdentifier)
	        .then(function(availableColumns) {
	          availableUnusedColumns = QueryService.selectUnusedColumns(availableColumns);
	          return availableUnusedColumns;
	        });
	    },

	    selectUnusedColumns: function(columns) {
	      return WorkPackagesTableHelper.getColumnDifference(
	        columns, QueryService.getSelectedColumns());
	    },

	    loadAvailableColumns: function(projectIdentifier) {
	      // TODO: Once we have a single page app we need to differentiate between different project columns
	      if(availableColumns.length) {
	        return $q.when(availableColumns);
	      }

	      var url = projectIdentifier ? PathHelper.apiProjectAvailableColumnsPath(projectIdentifier) : PathHelper.apiAvailableColumnsPath();

	      return QueryService.doGet(url, function(response){
	        availableColumns = response.data.available_columns;
	        return availableColumns;
	      });
	    },

	    getGroupBy: function() {
	      return query.groupBy;
	    },

	    setGroupBy: function(groupBy) {
	      query.setGroupBy(groupBy);
	      query.dirty = true;
	    },

	    getSelectedColumns: function() {
	      return this.getQuery().getSelectedColumns();
	    },

	    setSelectedColumns: function(selectedColumnNames) {
	      query.dirty = true;
	      var currentColumns = this.getSelectedColumns();

	      this.hideColumns(currentColumns.map(function(column) { return column.name; }));
	      this.showColumns(selectedColumnNames);
	    },

	    updateSortElements: function(sortation) {
	      return query.updateSortElements(sortation);
	    },

	    getSortation: function() {
	      return query.getSortation();
	    },

	    getAvailableFilters: function(projectIdentifier){
	      // TODO once this is becoming more single-page-app-like keep the available filters of the query model in sync when the project identifier is changed on the scope but the page isn't reloaded
	      var identifier = 'global';
	      var getFilters = QueryService.getCustomFieldFilters;
	      var getFiltersArgs = [];
	      if(projectIdentifier){
	        identifier = projectIdentifier;
	        getFilters = QueryService.getProjectCustomFieldFilters;
	        getFiltersArgs.push(identifier);
	      }
	      if(availableFilters[identifier]){
	        return $q.when(availableFilters[identifier]);
	      } else {
	        return getFilters.apply(this, getFiltersArgs)
	          .then(function(data){
	            return QueryService.storeAvailableFilters(identifier, angular.extend(AVAILABLE_WORK_PACKAGE_FILTERS, data.custom_field_filters));
	          });
	      }

	    },

	    getProjectCustomFieldFilters: function(projectIdentifier) {
	      return QueryService.doQuery(PathHelper.apiProjectCustomFieldsPath(projectIdentifier));
	    },

	    getCustomFieldFilters: function() {
	      return QueryService.doQuery(PathHelper.apiCustomFieldsPath());
	    },

	    getAvailableFilterValues: function(filterName, projectIdentifier) {
	      return QueryService.getAvailableFilters(projectIdentifier)
	        .then(function(filters){
	          var filter = filters[filterName];
	          var modelName = filter.modelName;

	          if(filter.values) {
	            // Note: We have filter values already because it is a custom field and the server gives the possible values.
	            var values = filter.values.map(function(value){
	              if(Array.isArray(value)){
	                return { id: value[1], name: value[0] };
	              } else {
	                return { id: value, name: value };
	              }
	            });
	            return $q.when(QueryService.storeAvailableFilterValues(modelName, values));
	          }

	          if(availableFilterValues[modelName]) {
	            return $q.when(availableFilterValues[modelName]);
	          } else {
	            var retrieveAvailableValues;

	            switch(modelName) {
	              case 'status':
	                retrieveAvailableValues = StatusService.getStatuses(projectIdentifier);
	                break;
	              case 'type':
	                retrieveAvailableValues = TypeService.getTypes(projectIdentifier);
	                break;
	              case 'priority':
	                retrieveAvailableValues = PriorityService.getPriorities(projectIdentifier);
	                break;
	              case 'user':
	                retrieveAvailableValues = UserService.getUsers(projectIdentifier);
	                break;
	              case 'version':
	                retrieveAvailableValues = VersionService.getVersions(projectIdentifier);
	                break;
	              case 'category':
	                retrieveAvailableValues = CategoryService.getCategories(projectIdentifier);
	                break;
	              case 'role':
	                retrieveAvailableValues = RoleService.getRoles();
	                break;
	              case 'group':
	                retrieveAvailableValues = GroupService.getGroups();
	                break;
	              case 'project':
	                retrieveAvailableValues = ProjectService.getProjects();
	                break;
	              case 'sub_project':
	                retrieveAvailableValues = ProjectService.getSubProjects(projectIdentifier);
	                break;
	            }

	            return retrieveAvailableValues.then(function(values) {
	              return QueryService.storeAvailableFilterValues(modelName, values);
	            });
	          }
	        });

	    },

	    storeAvailableFilterValues: function(modelName, values) {
	      availableFilterValues[modelName] = values;
	      return values;
	    },

	    storeAvailableFilters: function(projectIdentifier, filters){
	      availableFilters[projectIdentifier] = filters;
	      return availableFilters[projectIdentifier];
	    },

	    // synchronization

	    saveQuery: function() {
	      var url = query.project_id ? PathHelper.apiProjectQueryPath(query.project_id, query.id) : PathHelper.apiQueryPath(query.id);

	      return QueryService.doQuery(url, query.toUpdateParams(), 'PUT', function(response) {
	        query.dirty = false;
	        QueryService.fetchAvailableGroupedQueries(query.project_id);

	        return angular.extend(response.data, { status: { text: I18n.t('js.notice_successful_update') }} );
	      });
	    },

	    saveQueryAs: function(name) {
	      query.setName(name);
	      var url = query.project_id ? PathHelper.apiProjectQueriesPath(query.project_id) : PathHelper.apiQueriesPath();

	      return QueryService.doQuery(url, query.toParams(), 'POST', function(response){
	        query.save(response.data.query);
	        QueryService.fetchAvailableGroupedQueries(query.project_id);

	        // The starred-state does not get saved via the API. So we manually
	        // set it, if the old query was starred.
	        if (query.starred) {
	          QueryService.starQuery();
	        }

	        return angular.extend(response.data, { status: { text: I18n.t('js.notice_successful_create') }} );
	      });
	    },

	    deleteQuery: function() {
	      var url;
	      if(_.isNull(query.project_id)) {
	        url = PathHelper.apiQueryPath(query.id);
	      } else {
	        url = PathHelper.apiProjectQueryPath(query.project_id, query.id);
	      }
	      return QueryService.doQuery(url, query.toUpdateParams(), 'DELETE', function(response){
	        QueryService.fetchAvailableGroupedQueries(query.project_id);

	        $rootScope.$broadcast('openproject.layout.removeMenuItem', {
	          itemType: QUERY_MENU_ITEM_TYPE,
	          objectId: query.id
	        });
	        return angular.extend(response.data, { status: { text: I18n.t('js.notice_successful_delete') }} );
	      });
	    },

	    getQueryPath: function(query) {
	      if (query.project_id) {
	        return PathHelper.staticProjectWorkPackagesPath(query.project_id) + '?query_id=' + query.id;
	      } else {
	        return PathHelper.staticWorkPackagesPath() + '?query_id=' + query.id;
	      }
	    },

	    addOrRemoveMenuItem: function(query) {
	      if (!query) return;
	      if(query.starred) {
	        queryMenuItemFactory
	          .generateMenuItem(query.name, QueryService.getQueryPath(query), query.id)
	          .then(function() {
	            $rootScope.$broadcast('openproject.layout.activateMenuItem', {
	              itemType: QUERY_MENU_ITEM_TYPE,
	              objectId: query.id
	            });
	          });

	      } else {
	        $rootScope.$broadcast('openproject.layout.removeMenuItem', {
	          itemType: QUERY_MENU_ITEM_TYPE,
	          objectId: query.id
	        });
	      }
	    },

	    toggleQueryStarred: function(query) {
	      if(query.starred) {
	        return QueryService.unstarQuery();
	      } else {
	        return QueryService.starQuery();
	      }
	    },

	    starQuery: function() {
	      var url = PathHelper.apiQueryStarPath(query.id);
	      var theQuery = query;

	      var success = function(response){
	        theQuery.star();
	        QueryService.addOrRemoveMenuItem(theQuery);
	        return response.data;
	      };

	      var failure = function(response){
	        var msg = undefined;

	        if(response.data.errors) {
	          msg = response.data.errors.join(", ");
	        }

	        return QueryService.failure(msg)(response);
	      };

	      return QueryService.doPatch(url, success, failure);
	    },

	    unstarQuery: function() {
	      var url = PathHelper.apiQueryUnstarPath(query.id);
	      var theQuery = query;

	      return QueryService.doPatch(url, function(response){
	        theQuery.unstar();
	        QueryService.addOrRemoveMenuItem(theQuery);
	        return response.data;
	      });
	    },

	    updateHighlightName: function() {
	      // TODO Implement an API endpoint for updating the names or add an appropriate endpoint that returns query names for all highlighted queries
	      return this.unstarQuery().then(this.starQuery);
	    },

	    doGet: function(url, success, failure) {
	      return QueryService.doQuery(url, null, 'GET', success, failure);
	    },

	    doPatch: function(url, success, failure) {
	      return QueryService.doQuery(url, null, 'PATCH', success, failure);
	    },

	    doQuery: function(url, params, method, success, failure) {
	      method = method || 'GET';
	      success = success || function(response){
	        return response.data;
	      };
	      failure = failure || QueryService.failure();

	      return $http({
	        method: method,
	        url: url,
	        params: params,
	        headers: {'Content-Type': 'application/x-www-form-urlencoded'}
	      }).then(success, failure);
	    },

	    failure: function(msg){
	      msg = msg || I18n.t('js.notice_bad_request');
	      return function(response){
	        return angular.extend(response, { status: { text: msg, isError: true }} );
	      };
	    }
	  };

	  return QueryService;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 63 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {

	  var RoleService = {
	    getRoles: function() {
	      var url = PathHelper.apiRolesPath();

	      return RoleService.doQuery(url);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return response.data.roles;
	        });
	    }
	  };

	  return RoleService;
	};


/***/ },
/* 64 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var sortOptions = {
	    column: "",
	    direction: ""
	  };
	  var SortService = {
	    getColumn: function() {
	      return sortOptions.column;
	    },
	    setColumn: function(column) {
	      sortOptions.column = column;
	    },
	    getDirection: function() {
	      return sortOptions.direction;
	    },
	    setDirection: function(direction) {
	      var sortDirection = direction;

	      if (sortDirection == '-') {
	        sortDirection = 'desc';
	      }

	      if (sortDirection != '' && sortDirection != 'asc' && sortDirection != 'desc') {
	        throw new Error("Parameter does not match possible values 'asc' or 'desc'!");
	      }

	      sortOptions.direction = sortDirection;
	    },
	    isDescending: function() {
	      return sortOptions.direction == 'desc';
	    },
	    getSortParam: function() {
	      var direction = sortOptions.direction;

	      if (!direction) {
	        direction = 'asc';
	      }

	      return sortOptions.column + ':' + direction;
	    }
	  };

	  return SortService;
	};


/***/ },
/* 65 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {

	  var StatusService = {
	    getStatuses: function() {
	      return StatusService.doQuery(PathHelper.apiStatusesPath());
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return response.data._embedded.elements;
	        });
	    }
	  };

	  return StatusService;
	};


/***/ },
/* 66 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(ConfigurationService, I18n) {
	  var TimezoneService = {

	    setupLocale: function() {
	      moment.locale(I18n.locale);
	    },

	    parseDatetime: function(datetime, format) {
	      var d = moment.utc(datetime, format);

	      if (ConfigurationService.isTimezoneSet()) {
	        d.local();
	        d.tz(ConfigurationService.timezone());
	      }

	      return d;
	    },

	    parseDate: function(date, format) {
	      return moment(date, format);
	    },

	    parseISODate: function(date) {
	      return TimezoneService.parseDate(date, 'YYYY-MM-DD');
	    },

	    formattedDate: function(date) {
	      var d = TimezoneService.parseDate(date);
	      return d.format(TimezoneService.getDateFormat());
	    },

	    formattedTime: function(datetimeString) {
	      return TimezoneService.parseDatetime(datetimeString).format(TimezoneService.getTimeFormat());
	    },

	    formattedDatetime: function(datetimeString) {
	      var d = TimezoneService.parseDatetime(datetimeString);
	      return d.format(TimezoneService.getDateFormat()) + ' ' +
	        d.format(TimezoneService.getTimeFormat());
	    },

	    formattedISODate: function(date) {
	      return TimezoneService.parseDate(date).format('YYYY-MM-DD');
	    },

	    isValidISODate: function(date) {
	      return TimezoneService.isValid(date, 'YYYY-MM-DD');
	    },

	    isValid: function(date, dateFormat) {
	      var format = dateFormat || (ConfigurationService.dateFormatPresent() ?
	                   ConfigurationService.dateFormat() : 'L');
	      return moment(date, [format]).isValid();
	    },

	    getDateFormat: function() {
	      return ConfigurationService.dateFormatPresent() ? ConfigurationService.dateFormat() : 'L';
	    },

	    getTimeFormat: function() {
	      return ConfigurationService.timeFormatPresent() ? ConfigurationService.timeFormat() : 'LT';
	    }
	  };

	  return TimezoneService;
	};


/***/ },
/* 67 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {

	  var TypeService = {
	    getTypes: function(projectIdentifier) {
	      var url;

	      if(projectIdentifier) {
	        url = PathHelper.apiProjectWorkPackageTypesPath(projectIdentifier);
	      } else {
	        url = PathHelper.apiWorkPackageTypesPath();
	      }


	      return TypeService.doQuery(url);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return response.data._embedded.elements;
	        });
	    }
	  };

	  return TypeService;
	};


/***/ },
/* 68 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(HALAPIResource, $http, PathHelper) {

	  var registeredUserIds = [], cachedUsers = {};

	  var UserService = {
	    getUser: function(id) {
	      // TODO authorization
	      var resource = HALAPIResource.setup("users/" + id);
	      return resource.fetch();
	    },

	    getUsers: function(projectIdentifier) {
	      var url, params;

	      if (projectIdentifier) {
	        url = PathHelper.apiProjectUsersPath(projectIdentifier);
	      } else {
	        url = PathHelper.apiUsersPath();
	        params = {status: 'all'};
	      }

	      return UserService.doQuery(url, params);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return response.data.users;
	        });
	    }

	  };

	  return UserService;
	};


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {

	  var VersionService = {

	    // TODO: check if code invoked anywere
	    getVersions: function(projectIdentifier) {
	      var url;

	      if(projectIdentifier) {
	        url = PathHelper.apiProjectVersionsPath(projectIdentifier);
	      } else {
	        url = PathHelper.apiVersionsPath();
	      }

	      return VersionService.doQuery(url);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response){
	          return _.sortBy(response.data.versions, 'name');
	        });
	    }
	  };

	  return VersionService;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($http, PathHelper) {

	  var CategoryService = {
	    getCategories: function(projectIdentifier) {
	      if(!projectIdentifier) {
	        return [];
	      }

	      var url = PathHelper.apiV3ProjectCategoriesPath(projectIdentifier);

	      return CategoryService.doQuery(url);
	    },

	    doQuery: function(url, params) {
	      return $http.get(url, { params: params })
	        .then(function(response) {
	          var elements =  response.data._embedded.elements;
	          return _.sortBy(elements, 'name');
	        });
	    }
	  };

	  return CategoryService;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_, URI) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++
	/* globals URI */

	module.exports = function($http,
	    PathHelper,
	    WorkPackagesHelper,
	    HALAPIResource,
	    DEFAULT_FILTER_PARAMS,
	    DEFAULT_PAGINATION_OPTIONS,
	    $rootScope,
	    $window,
	    $q,
	    AuthorisationService,
	    EditableFieldsState,
	    WorkPackageFieldService,
	    NotificationsService
	  ) {
	  var workPackage;

	  function getPendingChanges(workPackage) {
	    var data = {
	      // _links: {}
	    };
	    if (workPackage.form) {
	      _.forEach(workPackage.form.pendingChanges, function(value, field) {
	        if (WorkPackageFieldService.isSpecified(workPackage, field)) {
	          if(field === 'date') {
	            if(WorkPackageFieldService.isMilestone(workPackage)) {
	              data['startDate'] = data['dueDate'] = value ? value : null;
	              return;
	            }
	            data['startDate'] = value['startDate'];
	            data['dueDate'] = value['dueDate'];
	            return;
	          }
	          if (WorkPackageFieldService.isSavedAsLink(workPackage, field)) {
	            data._links = data._links || {};
	            data._links[field] = value ? value.props : { href: null };
	          } else {
	            data[field] = value;
	          }
	        }
	      });
	    }

	    if (_.isEmpty(data)) {
	      return null;
	    } else {
	      return JSON.stringify(data);
	    }
	  }

	  var WorkPackageService = {
	    initializeWorkPackage: function(projectIdentifier, initialData) {
	      var changes = _.clone(initialData);
	      var wp = {
	        embedded: {},
	        props: {},
	        links: {
	          update: HALAPIResource
	            .setup(PathHelper
	              .projectWorkPackagesFormPath(projectIdentifier)),
	          updateImmediately: HALAPIResource.setup(
	            PathHelper.projectWorkPackagesPath(projectIdentifier),
	            { method: 'post' }
	          )
	        }
	      };
	      var options = { ajax: {
	          method: 'POST',
	          headers: {
	            Accept: 'application/hal+json'
	          },
	          data: JSON.stringify(changes),
	          contentType: 'application/json; charset=utf-8'
	        }};

	      return wp.links.update.fetch(options)
	        .then(function(form) {
	          form.pendingChanges = changes;
	          wp.form = form;
	          EditableFieldsState.workPackage = wp;
	          EditableFieldsState.errors = null;
	          return wp;
	        });
	    },

	    getWorkPackage: function(id) {
	      var resource = HALAPIResource.setup('work_packages/' + id);
	      return resource.fetch().then(function (wp) {
	        return $q.all([
	          WorkPackageService.loadWorkPackageForm(wp),
	          wp.links.schema.fetch()
	        ]).then(function(result) {
	            wp.form = result[0];
	            wp.schema = result[1];
	            workPackage = wp;
	            EditableFieldsState.workPackage = wp;
	            EditableFieldsState.errors = null;
	            return wp;
	          });
	      });
	    },

	    getWorkPackagesByQueryId: function(projectIdentifier, queryId) {
	      var url = projectIdentifier ? PathHelper.apiProjectWorkPackagesPath(projectIdentifier) : PathHelper.apiWorkPackagesPath();
	      var params = queryId ? { query_id: queryId } : DEFAULT_FILTER_PARAMS;
	      return WorkPackageService.doQuery(url, params);
	    },

	    getWorkPackages: function(projectIdentifier, query, paginationOptions) {
	      var url = projectIdentifier ? PathHelper.apiProjectWorkPackagesPath(projectIdentifier) : PathHelper.apiWorkPackagesPath();
	      var params = {};

	      if(query) {
	        angular.extend(params, query.toUpdateParams());
	      }

	      if(paginationOptions) {
	        angular.extend(params, {
	          page: paginationOptions.page,
	          per_page: paginationOptions.perPage
	        });
	      } else {
	        angular.extend(params, {
	          page: DEFAULT_PAGINATION_OPTIONS.page,
	          per_page: DEFAULT_PAGINATION_OPTIONS.perPage,
	        });
	      }

	      return WorkPackageService.doQuery(url, params);
	    },

	    loadWorkPackageColumnsData: function(workPackages, columnNames, group_by) {
	      var url = PathHelper.apiWorkPackagesColumnDataPath();

	      var params = {
	        'ids[]': workPackages.map(function(workPackage){
	          return workPackage.id;
	        }),
	        'column_names[]': columnNames,
	        'group_by': group_by
	      };

	      return WorkPackageService.doQuery(url, params);
	    },

	    // Note: Should this be on a project-service?
	    getWorkPackagesSums: function(projectIdentifier, query, columns){
	      var columnNames = columns.map(function(column){
	        return column.name;
	      });

	      if (projectIdentifier){
	        var url = PathHelper.apiProjectWorkPackagesSumsPath(projectIdentifier);
	      } else {
	        var url = PathHelper.apiWorkPackagesSumsPath();
	      }

	      var params = angular.extend(query.toParams(), {
	        'column_names[]': columnNames
	      });

	      return WorkPackageService.doQuery(url, params);
	    },

	    augmentWorkPackagesWithColumnsData: function(workPackages, columns, group_by) {
	      var columnNames = columns.map(function(column) {
	        return column.name;
	      });

	      return WorkPackageService.loadWorkPackageColumnsData(workPackages, columnNames, group_by)
	        .then(function(data){
	          var columnsData = data.columns_data;
	          var columnsMeta = data.columns_meta;

	          angular.forEach(columns, function(column, i){
	            column.total_sum = columnsMeta.total_sums[i];
	            if (columnsMeta.group_sums) column.group_sums = columnsMeta.group_sums[i];

	            angular.forEach(workPackages, function(workPackage, j) {
	              WorkPackagesHelper.augmentWorkPackageWithData(workPackage, column.name, !!column.custom_field, columnsData[i][j]);
	            });
	          });

	          return workPackages;
	        });
	    },

	    loadWorkPackageForm: function(workPackage) {
	      if (this.authorizedFor(workPackage, 'update')) {
	        var options = { ajax: {
	          method: 'POST',
	          headers: {
	            Accept: 'application/hal+json'
	          },
	          data:getPendingChanges(workPackage),
	          contentType: 'application/json; charset=utf-8'
	        }, force: true};

	        return workPackage.links.update.fetch(options).then(function(form) {
	          workPackage.form = form;
	          return form;
	        });
	      }

	      return $q.when();
	    },

	    authorizedFor: function(workPackage, action) {
	      var modelName = 'work_package' + workPackage.id;

	      AuthorisationService.initModelAuth(modelName, workPackage.links);

	      return AuthorisationService.can(modelName, action);
	    },

	    updateWithPayload: function(workPackage, payload) {
	      var options = { ajax: {
	        method: 'PATCH',
	        url: workPackage.links.updateImmediately.href,
	        headers: {
	          Accept: 'application/hal+json'
	        },
	        data: JSON.stringify(payload),
	        contentType: 'application/json; charset=utf-8'
	      }, force: true};
	      return workPackage.links.updateImmediately.fetch(options);
	    },

	    updateWorkPackage: function(workPackage, notify) {
	      var options = { ajax: {
	        method: workPackage.links.updateImmediately.props.method,
	        url: URI(workPackage.links.updateImmediately.props.href)
	            .addSearch('notify', notify).toString(),
	        headers: {
	          Accept: 'application/hal+json'
	        },
	        data: getPendingChanges(workPackage),
	        contentType: 'application/json; charset=utf-8'
	      }, force: true};
	      return workPackage.links.updateImmediately.fetch(options);
	    },

	    addWorkPackageRelation: function(workPackage, toId, relationType) {
	      var options = { ajax: {
	        method: 'POST',
	        data: JSON.stringify({
	          to_id: toId,
	          relation_type: relationType
	        }),
	        contentType: 'application/json; charset=utf-8'
	      } };
	      return workPackage.links.addRelation.fetch(options).then(function(relation) {
	        return relation;
	      });
	    },

	    removeWorkPackageRelation: function(relation) {
	      var options = { ajax: { method: 'DELETE' } };
	      return relation.links.remove.fetch(options).then(function(response){
	        return response;
	      });
	    },

	    doQuery: function(url, params) {
	      return $http({
	        method: 'GET',
	        url: url,
	        params: params,
	        headers: {'Content-Type': 'application/x-www-form-urlencoded'}
	      }).then(function(response){
	                return response.data;
	              },
	              function(failedResponse) {
	                NotificationsService.addError(
	                  I18n.t('js.work_packages.query.errors.unretrievable_query')
	                );
	              }
	      );
	    },

	    performBulkDelete: function(ids, defaultHandling) {
	      if (defaultHandling && !$window.confirm(I18n.t('js.text_work_packages_destroy_confirmation'))) {
	        return;
	      }

	      var params = {
	        'ids[]': ids
	      };
	      var promise = $http['delete'](PathHelper.workPackagesBulkDeletePath(), { params: params });

	      if (defaultHandling) {
	        promise.success(function(data, status) {
	                // TODO wire up to API and process API response
	                NotificationsService.addSuccess(
	                  I18n.t('js.work_packages.message_successful_bulk_delete')
	                );
	                $rootScope.$emit('workPackagesRefreshRequired');
	              })
	              .error(function(data, status) {
	                // TODO wire up to API and processs API response
	                NotificationsService.addError(
	                  I18n.t('js.work_packages.message_error_during_bulk_delete')
	                );
	              });
	      }

	      return promise;
	    }
	  };

	  return WorkPackageService;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(27)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, $rootScope) {
	  'use strict';
	  // private
	  var createNotification = function(message) {
	    if(typeof message === 'string') {
	      return { message: message };
	    }
	    return message;
	  },
	  createSuccessNotification = function(message) {
	    return _.extend(createNotification(message), { type: 'success' });
	  },
	  createWarningNotification = function(message) {
	    return _.extend(createNotification(message), { type: 'warning' });
	  },
	  createErrorNotification = function(message, errors) {
	    return _.extend(createNotification(message), {
	      type: 'error',
	      errors: errors || []
	    });
	  },
	  createWorkPackageUploadNotification = function(message, uploads) {
	    if(!uploads) {
	      throw new Error('Cannot create an upload notification without uploads!');
	    }
	    return _.extend(createNotification(message), {
	      type: 'upload',
	      uploads: uploads
	    });
	  },
	  broadcast = function(event, data) {
	    $rootScope.$broadcast(event, data);
	  };

	  // public
	  var add = function(message) {
	    var notification = createNotification(message);
	    broadcast('notification.add', notification);
	    return notification;
	  },
	  addError = function(message, errors) {
	    return add(createErrorNotification(message, errors));
	  },
	  addWarning = function(message) {
	    return add(createWarningNotification(message));
	  },
	  addSuccess = function(message) {
	    return add(createSuccessNotification(message));
	  },
	  addWorkPackageUpload = function(message, uploads) {
	    return add(createWorkPackageUploadNotification(message, uploads));
	  },
	  remove = function(notification) {
	    broadcast('notification.remove', notification);
	  };

	  return {
	    add: add,
	    remove: remove,
	    addError: addError,
	    addWarning: addWarning,
	    addSuccess: addSuccess,
	    addWorkPackageUpload: addWorkPackageUpload
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 73 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(NotificationsService, ApiHelper) {
	  'use strict';

	  var addError = function(error) {
	    var messages = ApiHelper.getErrorMessages(error);

	    if (messages.length > 1) {
	      NotificationsService.addError('', messages);
	    }
	    else {
	      NotificationsService.addError(messages[0]);
	    }
	  };

	  var addSuccess = function(text) {
	    NotificationsService.addSuccess(text);
	  };

	  return {
	    addError: addError,
	    addSuccess: addSuccess
	  };
	};


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++


	module.exports = function($http, $q) {
	  'use strict';

	  var getWatchers = function(path) {
	    return function() {
	      var watchers = $q.defer();
	      $http.get(path).success(function(data) {
	        watchers.resolve(data._embedded.elements);
	      }).error(function(err) {
	        watchers.reject(err);
	      });
	      return watchers.promise;
	    };
	  };

	  var watching = function(workPackage) {
	        var path = workPackage.links.watchers.url();
	        return getWatchers(path)();
	      },
	      available = function(workPackage) {
	        var path = workPackage.links.availableWatchers.url();
	        return getWatchers(path)();
	      },
	      all = function(workPackage) {
	        var watchers = $q.defer();
	        $q.all([watching(workPackage), available(workPackage)]).then(function(allWatchers) {
	          var watching = allWatchers[0],
	              available = _.filter(allWatchers[1], function(user) {
	                return _.findIndex(watching, function(watchingUser) {
	                  return user.id === watchingUser.id;
	                }) === -1;
	              });
	          watchers.resolve({ watching: watching, available: available });
	        }, function(err) {
	          watchers.reject(err);
	        });
	        return watchers.promise;
	      },
	      add = function(workPackage, watcher) {
	        var added = $q.defer(),
	            // somehow, the path will not be correctly inferred when using url()
	            path = workPackage.links.addWatcher.props.href,
	            method = workPackage.links.addWatcher.props.method,
	            payload = {
	              user: {
	                href: watcher._links.self.href // watcher is not a ressource
	              }
	            };

	        $http[method](path, payload).then(function() {
	          added.resolve(watcher);
	        }, function(err) {
	          added.reject(err);
	        });

	        return added.promise;
	      },
	      remove = function(workPackage, watcher) {
	        var removed = $q.defer(),
	            path = workPackage.links.removeWatcher.props.href,
	            method = workPackage.links.removeWatcher.props.method;

	        path = path.replace(/\{user\_id\}/, watcher.id);

	        $http[method](path).then(function() {
	          removed.resolve(watcher);
	        }, function(err) {
	          remove.reject(err);
	        });

	        return removed.promise;
	      };

	  /*
	   * NOTE: In theorey, this service is independent from WorkPackages,
	   * however, the only thing currently handled by it is WorkPackage
	   * related watching.
	   * This might change in the future, as other Objects are watchable in
	   * OP - e.g. wiki pages.
	   *
	   * The public interface is therefore designed around handling WPs
	   */
	  return {
	    watchingForWorkPackage: watching,
	    availableForWorkPackage: available,
	    forWorkPackage: all,
	    addForWorkPackage: add,
	    removeFromWorkPackage: remove
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 75 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var ConversionService = {
	    //TODO: not sure if we need GigaBytes
	    megabytes: function(bytes) {
	      if (angular.isNumber(bytes)) {
	        return Number((bytes / 1000000).toFixed(1));
	      }
	      return bytes;
	    },
	    kilobytes: function(bytes) {
	      if (angular.isNumber(bytes)) {
	        return Number((bytes / 1000).toFixed(1));
	      }
	      return bytes;
	    },
	    fileSize: function(bytes) {
	      if (1000 <= bytes && bytes < 1000000) {
	        return ConversionService.kilobytes(bytes) + 'kB';
	      }
	      if (bytes >= 1000000) {
	        return ConversionService.megabytes(bytes) + 'MB';
	      }
	      return bytes + 'B';
	    }
	  };

	  return ConversionService;
	};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	__webpack_require__(77);


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.timeEntries.controllers')
	  .controller('TimeEntriesController', ['$scope', '$http', 'PathHelper',
	    'SortService', 'PaginationService', 'NotificationsService',
	    __webpack_require__(78)
	  ]);


/***/ },
/* 78 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, $http, PathHelper, SortService, PaginationService, NotificationsService) {
	  $scope.PathHelper = PathHelper;
	  $scope.timeEntries = gon.timeEntries;
	  $scope.totalEntryCount = gon.total_count;
	  $scope.isLoading = false;

	  SortService.setColumn(gon.sort_column);
	  SortService.setDirection(gon.sort_direction);

	  $scope.loadTimeEntries = function() {
	    $scope.isLoading = true;

	    $http.get(PathHelper.timeEntriesPath(gon.project_id, gon.work_package_id),
	              {
	                params: {
	                          sort: SortService.getSortParam(),
	                          page: PaginationService.getPage()
	                        }
	              })
	         .success(function(data, status, headers, config) {
	           $scope.timeEntries = data.timeEntries;
	           $scope.isLoading = false;
	         })
	         .error(function(data, status, headers, config) {
	           $scope.isLoading = false;
	         });
	  };

	  $scope.deleteTimeEntry = function(id) {
	    if (window.confirm(I18n.t('js.text_are_you_sure'))) {
	      $http['delete'](PathHelper.timeEntryPath(id))
	           .success(function(data) {
	             var index = 0;

	             for (var i = 0; i < $scope.timeEntries.length; i++) {
	               if ($scope.timeEntries[i].id === id) {
	                 index = i;
	                 break;
	               }
	             }

	             $scope.timeEntries.splice(index, 1);

	             NotificationsService.addSuccess(data.text);
	           })
	           .error(function(data) {
	             NotificationsService.addError(data.text);
	           });
	    }
	  };
	};


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	__webpack_require__(80);
	__webpack_require__(83);
	__webpack_require__(92);
	__webpack_require__(95);
	__webpack_require__(111);


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.timelines.controllers')
	  .controller('TimelineSelectionController', ['$scope', '$window', __webpack_require__(
	    81)])
	  .controller('TimelinesController', ['$scope', __webpack_require__(
	    82)]);


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, $window) {
	  var vm;
	  $scope.vm = vm = {};

	  vm.timelines = gon.timelines;
	  vm.currentTimelineId = gon.current_timeline_id;
	  vm.currentTimeline = _.find(vm.timelines, { 'id': vm.currentTimelineId });

	  vm.switchTimeline = function() {
	    $window.location.href = vm.currentTimeline.path;
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 82 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope) {
	  $scope.timelineOptions = gon.timeline_options;

	  // Setup
	  $scope.init = function(id) {
	    var timelineOptions = $scope.timelineOptions[id];
	    var timeline = Timeline.create(id, timelineOptions);

	    // Get server-side stuff into scope
	    $scope.timeline = timeline;
	  };
	};


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.timelines.directives')
	  .constant('WORK_PACKAGE_DATE_COLUMNS', ['start_date', 'due_date'])
	  .directive('timelineColumnData', ['WORK_PACKAGE_DATE_COLUMNS', 'I18n',
	    'CustomFieldHelper', __webpack_require__(85)
	  ])
	  .directive('timelineColumnName', ['I18n', 'CustomFieldHelper', __webpack_require__(
	    86)])
	  .directive('timelineContainer', ['$window', 'Timeline', __webpack_require__(
	    87)])
	  .directive('timelineGroupingLabel', [__webpack_require__(
	    88)])
	  .directive('timelineTableContainer', ['TimelineLoaderService',
	    'TimelineTableHelper', 'SvgHelper', 'PathHelper', __webpack_require__(
	      84)
	  ])
	  .directive('timelineTable', ['TimelineTableHelper', __webpack_require__(
	    89)])
	  .directive('timelineTableRow', __webpack_require__(90))
	  .directive('timelineToolbar', ['I18n', __webpack_require__(
	    91)]);


/***/ },
/* 84 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(TimelineLoaderService, TimelineTableHelper, SvgHelper, PathHelper) {

	  return {
	    restrict: 'E',
	    replace: true,
	    require: '^timelineContainer',
	    templateUrl: '/templates/timelines/timeline_table_container.html',
	    scope: { timeline: '=' },
	    link: function(scope, element, attributes, timelineContainerCtrl) {
	      // Hide charts until tables are drawn
	      scope.underConstruction = true;

	      function showWarning() {
	        scope.underConstruction = false;
	        scope.warning = true;
	        scope.$apply();
	      }

	      function showError(errorMessage) {
	        scope.underConstruction = false;
	        timelineContainerCtrl.showError(errorMessage);
	      }

	      function fetchData() {
	        return TimelineLoaderService.loadTimelineData(scope.timeline);
	      }

	      function completeUI() {
	        var paperElement  = jQuery('#timeline-container-' + scope.timeline.id + ' .tl-chart')[0];
	        scope.timeline.paper = new SvgHelper(paperElement);

	        // perform some zooming. if there is a zoom level stored with the
	        // report, zoom to it. otherwise, zoom out. this also constructs
	        // timeline graph.
	        scope.timeline.zoom(scope.timeline.zoomIndex);

	        scope.underConstruction = false;
	        scope.warning = false;

	        scope.timeline.getChart().scroll(function() {
	          scope.timeline.adjustTooltip();
	        });

	        jQuery(window).scroll(function() {
	          scope.timeline.adjustTooltip();
	        });
	      }

	      function buildWorkPackageTable(timeline){
	        timeline.lefthandTree = null; // reset cached data tree

	        if (timeline.isGrouping() && timeline.options.grouping_two_enabled) {
	          timeline.secondLevelGroupingAdjustments();
	        }

	        var tree = timeline.getLefthandTree();

	        if (tree.containsPlanningElements() || tree.containsProjects()) {
	          timeline.adjustForPlanningElements();
	          scope.rows = TimelineTableHelper.getTableRowsFromTimelineTree(tree, timeline.options);
	        } else{
	          scope.rows = [];
	        }

	        return scope.rows;
	      }

	      function drawChart(tree) {
	        var timeline = scope.timeline;

	        try {
	          window.clearTimeout(timeline.safetyHook);

	          if (scope.rows.length > 0) {
	            completeUI();
	          } else {
	            timeline.warn(I18n.t('js.label_no_data'), 'warning', showWarning);
	          }
	        } catch (e) {
	          timeline.die(e);
	        }
	      }

	      function renderTimeline() {
	        return fetchData()
	          .then(buildWorkPackageTable)
	          .then(drawChart, showError);
	      }

	      function reloadTimeline() {
	        return fetchData()
	          .then(buildWorkPackageTable)
	          .then(function() {
	            if (scope.currentOutlineLevel) {
	              scope.timeline.expandToOutlineLevel(scope.currentOutlineLevel); // also triggers rebuildAll()
	            } else {
	              scope.timeline.rebuildAll();
	            }
	          }, showError);
	      }

	      function registerModalHelper() {
	        scope.timeline.modalHelper = modalHelperInstance;

	        scope.timeline.modalHelper.setupTimeline(
	          scope.timeline,
	          {
	            url_prefix                : PathHelper.staticBase,
	            project_prefix            : PathHelper.projectsPath()
	          }
	        );

	        jQuery(scope.timeline.modalHelper).on('closed', function() {
	          reloadTimeline().then(function() {
	            window.clearTimeout(scope.timeline.safetyHook);
	          });
	          // TODO remove and do updates via scope
	        });
	      }

	      // start timeline
	      scope.timeline.registerTimelineContainer(element);
	      registerModalHelper();

	      renderTimeline();
	    }
	  };
	};


/***/ },
/* 85 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WORK_PACKAGE_DATE_COLUMNS, I18n, CustomFieldHelper) {


	  return {
	    restrict: 'A',
	    scope: {
	      rowObject: '=',
	      columnName: '=',
	      timeline: '=',
	      customFields: '='
	    },
	    templateUrl: '/templates/timelines/timeline_column_data.html',
	    link: function(scope, element) {
	      scope.isDateColumn = WORK_PACKAGE_DATE_COLUMNS.indexOf(scope.columnName) !== -1;

	      if (CustomFieldHelper.isCustomFieldKey(scope.columnName)) {
	        // watch custom field because they are loaded after the rows are being iterated
	        scope.$watch('timeline.custom_fields', function() {
	          scope.columnData = getCustomFieldColumnData(scope.rowObject, scope.columnName, scope.customFields, scope.timeline.users);
	        });
	      } else {
	        scope.columnData = getColumnData();
	      }

	      setHistoricalData(scope);

	      function getColumnData() {
	        switch(scope.columnName) {
	          case 'start_date':
	            return scope.rowObject.start_date;
	          case 'due_date':
	            return scope.rowObject.due_date;
	          default:
	            return scope.rowObject.getAttribute(getAttributeAccessor(scope.columnName));
	        }
	      }

	      function getAttributeAccessor(attr) {
	        return {
	          "type": "getTypeName",
	          "status": "getStatusName",
	          "responsible": "getResponsibleName",
	          "assigned_to": "getAssignedName",
	          "project": "getProjectName"
	        }[attr] || attr;
	      }

	      function hasChanged(planningElement, attr) {
	        return planningElement.does_historical_differ(getAttributeAccessor(attr));
	      }

	      function getCustomFieldColumnData(object, customFieldName, customFields, users) {
	        if(!customFields) return; // custom_fields provides necessary meta information about the custom field column

	        var customField = customFields[CustomFieldHelper.getCustomFieldId(customFieldName)];

	        if (customField) {
	          return CustomFieldHelper.formatCustomFieldValue(object[customFieldName], customField.field_format, users);
	        }
	      }

	      function setHistoricalData() {
	        scope.historicalDataDiffers = hasChanged(scope.rowObject, scope.columnName);

	        scope.historicalDateKind = getHistoricalDateKind(scope.rowObject, scope.columnName);
	        scope.labelTimelineChanged = I18n.t('js.timelines.change');

	        if (scope.rowObject.historical_element) {
	          scope.historicalData = scope.rowObject.historical_element.getAttribute(getAttributeAccessor(scope.columnName)) || I18n.t('js.timelines.empty');
	        }
	      }

	      function getHistoricalDateKind(planningElement, attr) {
	        if (!hasChanged(planningElement, attr)) return;

	        var newDate = planningElement[attr];
	        var oldDate = planningElement.historical_element[attr];

	        if (oldDate && newDate) {
	          return (newDate < oldDate ? 'preponed' : 'postponed');
	        }
	        return "changed";
	      }
	    }
	  };
	};


/***/ },
/* 86 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, CustomFieldHelper) {
	  return {
	    restrict: 'A',
	    scope: {
	      columnName: '=',
	      customFields: '=',
	      localePrefix: '@'
	    },
	    link: function(scope, element) {
	      if (CustomFieldHelper.isCustomFieldKey(scope.columnName)) {
	        scope.$watch('customFields', function(){
	          var customFieldId = CustomFieldHelper.getCustomFieldId(scope.columnName);
	          if (scope.customFields && scope.customFields[customFieldId]) {
	            element.html(scope.customFields[customFieldId].name);
	          }
	        });
	      } else {
	        element.html(I18n.t(scope.localePrefix + '.' + scope.columnName));
	      }
	    }
	  };
	};


/***/ },
/* 87 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($window, Timeline) {
	  setTimelinesWidth = function(scope) {
	    var contentElement = angular.element('#content');

	    if (contentElement.length > 0) {
	      scope.timelineWidth = contentElement.width();
	    }
	  };

	  return {
	    restrict: 'E',
	    replace: true,
	    controller: ['$scope', function($scope) {
	        this.showError = function(errorMessage) {
	          $scope.errorMessage = errorMessage;
	        };
	      }],
	    scope: { timelineId: '@' },
	    transclude: true,
	    template: '<div ng-style="{ width: timelineWidth }">' +
	              '<div ng-hide="!!errorMessage" ng-transclude id="{{timelineContainerElementId}}"/>' +
	              '<div ng-if="!!errorMessage" ng-bind="errorMessage" class="flash error"/>' +
	              '</div>',
	    link: function(scope) {
	      scope.timelineContainerElementId = 'timeline-container-' + scope.timelineId;

	      // As part of a wiki the timeline container would have to stick to the wiki's width
	      // limitation. We set the timeline width programmatically to bypass the width
	      // limitation.
	      if (angular.element('.wiki-content').length > 0) {
	        setTimelinesWidth(scope);

	        angular.element($window).bind('resize', function() {
	          scope.$apply(function() {
	            setTimelinesWidth(scope);
	          });
	        });
	      }
	    }
	  };
	};


/***/ },
/* 88 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    link: function(scope, element, attributes) {
	      scope.showGroupingLabel = function() {
	        return !scope.$first && scope.row.firstLevelGroup !== scope.rows[scope.$index-1].firstLevelGroup;
	      };
	    }
	  };
	  // TODO restrict to 'E' once https://github.com/angular/angular.js/issues/1459 is solved
	};


/***/ },
/* 89 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(TimelineTableHelper) {
	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/timelines/timeline_table.html',
	    scope: true,
	    link: function(scope, element, attributes) {
	      scope.columns = scope.timeline.options.columns;
	      scope.height = scope.timeline.decoHeight();
	      scope.excludeEmpty = scope.timeline.options.exclude_empty === 'yes';
	      scope.isGrouping = scope.timeline.isGrouping();
	      scope.hideTreeRoot = scope.isGrouping || scope.timeline.options.hide_tree_root;

	      scope.toggleRowExpansion = function(row){
	        if(row.expanded) {
	          var expansionMethod = function(node){ node.resetVisible(); };
	        } else {
	          var expansionMethod = function(node){ node.setVisible(); };
	        }

	        TimelineTableHelper.applyToNodes(row.childNodes, expansionMethod, row.expanded);
	        row.expanded = !row.expanded;
	        TimelineTableHelper.setLastVisible(scope.rows);
	      };
	    }
	  };
	};


/***/ },
/* 90 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    // TODO restrict to 'E' once https://github.com/angular/angular.js/issues/1459 is solved
	    scope: true,
	    link: function(scope, element, attributes) {
	      var rowObject = scope.row.payload;

	      scope.rowObject = rowObject;
	      scope.rowObjectType = rowObject.objectType;
	      scope.changeDetected = rowObject.objectType === 'PlanningElement' && (rowObject.hasAlternateDates() || rowObject.isNewlyAdded() || rowObject.isDeleted());
	      scope.indent = scope.hideTreeRoot ? scope.row.level-1 : scope.row.level;

	      // set dom element
	      scope.row.dom_element = element;

	      scope.$watch('row.expanded', function(expanded, formerlyExpanded) {
	        if(expanded !== formerlyExpanded) scope.timeline.rebuildAll();
	      });
	    }
	  };
	};


/***/ },
/* 91 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n) {

	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/timelines/toolbar.html',
	    scope: { timeline: '=' },
	    controller: function() {
	      var vm = this;

	      vm.currentScale = 'monthly';

	      vm.updateToolbar = function() {
	        vm.currentOutlineLevel = vm.timeline.OUTLINE_LEVELS[vm.timeline.expansionIndex];
	        vm.currentScale = vm.timeline.ZOOM_SCALES[vm.timeline.zoomIndex];
	      };

	      vm.increaseZoom = function() {
	        var scaleIndex = vm.timeline.ZOOM_SCALES.indexOf(vm.currentScale);

	        if(scaleIndex < Object.keys(vm.timeline.ZOOM_CONFIGURATIONS).length - 1) {
	          scaleIndex++;
	        }
	        vm.currentScale = vm.timeline.ZOOM_SCALES[scaleIndex];
	      };

	      vm.decreaseZoom = function() {
	        var scaleIndex = vm.timeline.ZOOM_SCALES.indexOf(vm.currentScale);

	        if(scaleIndex > 0) {
	          scaleIndex--;
	        }
	        vm.currentScale = vm.timeline.ZOOM_SCALES[scaleIndex];
	      };

	      vm.resetOutline = function(){
	        vm.timeline.expandTo(0);
	        vm.currentOutlineLevel = vm.timeline.OUTLINE_LEVELS[vm.timeline.expansionIndex];
	      };
	    },
	    controllerAs: 'ctrl',
	    bindToController: true,
	    link: function(scope, _element, _attributes, ctrl) {
	      scope.I18n = I18n;

	      scope.$watch('ctrl.currentScale', function(newScale, oldScale){
	        if (newScale !== oldScale) {
	          var scaleIndex = ctrl.timeline.ZOOM_SCALES.indexOf(ctrl.currentScale);

	          ctrl.timeline.zoom(scaleIndex);
	        }
	      });

	      scope.$watch('ctrl.currentOutlineLevel', function(outlineLevel, formerLevel) {
	        if (outlineLevel !== formerLevel) {
	          ctrl.timeline.expansionIndex = ctrl.timeline.OUTLINE_LEVELS.indexOf(outlineLevel);
	          ctrl.timeline.expandToOutlineLevel(outlineLevel); // TODO replace event-driven adaption by bindings
	        }
	      });

	      ctrl.updateToolbar();
	    }
	  };
	};


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.timelines.helpers')
	  .factory('FilterQueryStringBuilder', __webpack_require__(93))
	  .factory('TimelineTableHelper', __webpack_require__(94));


/***/ },
/* 93 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {

	  var FilterQueryStringBuilder = (function() {

	    /**
	     * FilterQueryStringBuilder
	     *
	     * Simple serializer of query strings that satisfies OpenProject's filter
	     * API. Transforms hashes of desired filterings into the proper query strings.
	     *
	     * Examples:
	     *
	     *   fqsb = (new FilterQueryStringBuilder({
	     *     'type_id': [4, 5]
	     *   })).build(
	     *     '/api/v2/projects/sample_project/planning_elements.json'
	     *   );
	     *
	     *   => /api/v2/projects/sample_project/planning_elements.json?f[]=type_id&op[type_id]==&v[type_id][]=4&v[type_id][]=5
	     *
	     *   fqsb = (new FilterQueryStringBuilder())
	     *     .filter({ 'type_id': [4, 5] })
	     *     .append({ 'at_time': 1380795754 })
	     *     .build( '/api/v2/projects/sample_project/planning_elements.json' );
	     *
	     *   => /api/v2/projects/sample_project/planning_elements.json?f[]=type_id&op[type_id]==&v[type_id][]=4&v[type_id][]=5&at_time=1380795754
	     */
	    var FilterQueryStringBuilder = function (filterHash) {
	      this.filterHash = filterHash || {};
	      this.paramsHash = {};
	    };

	    FilterQueryStringBuilder.prototype.filter = function(filters) {
	      this.filterHash = jQuery.extend({}, this.filterHash, filters);
	      return this;
	    };

	    FilterQueryStringBuilder.prototype.append = function(addition) {
	      this.paramsHash = jQuery.extend({}, this.paramsHash, addition);
	      return this;
	    };

	    FilterQueryStringBuilder.prototype.buildMetaDataForKey = function(key) {
	      this.queryStringParts.push({name: 'f[]', value: key},
	                                 {name: 'op[' + key + ']', value: '='});
	    };

	    FilterQueryStringBuilder.prototype.prepareFilterDataForKeyAndValue = function(key, value) {
	      this.queryStringParts.push({name: 'v[' + key + '][]', value: value});
	    };

	    FilterQueryStringBuilder.prototype.prepareAdditionalQueryData = function(key, value) {
	      this.queryStringParts.push({name: key, value: value});
	    };

	    FilterQueryStringBuilder.prototype.prepareFilterDataForKeyAndArrayOfValues = function(key, value) {
	      jQuery.each(value, jQuery.proxy( function(i, e) {
	         this.prepareFilterDataForKeyAndValue(key, e);
	      }, this));
	    };

	    FilterQueryStringBuilder.prototype.buildFilterDataForValue = function(key, value) {
	      if (Array.isArray(value)) {
	        this.prepareFilterDataForKeyAndArrayOfValues(key, value);
	      } else {
	        this.prepareFilterDataForKeyAndValue(key, value);
	      }
	    };

	    FilterQueryStringBuilder.prototype.registerKeyAndValue = function(key, value) {
	      this.buildMetaDataForKey(key);
	      this.buildFilterDataForValue(key, value);
	    };

	    FilterQueryStringBuilder.prototype.prepareQueryStringParts = function() {
	      this.queryStringParts = [];
	      jQuery.each(this.filterHash, jQuery.proxy(this.registerKeyAndValue, this));
	      jQuery.each(this.paramsHash, jQuery.proxy(this.prepareAdditionalQueryData, this));
	    };

	    FilterQueryStringBuilder.prototype.buildQueryStringFromQueryStringParts = function(url) {
	      return jQuery.map(this.queryStringParts, function(e, i) {
	        return e.name + "=" + encodeURIComponent(e.value);
	      }).join('&');
	    };

	    FilterQueryStringBuilder.prototype.buildUrlFromQueryStringParts = function(url) {
	      var resultUrl = url;
	      resultUrl += "?";
	      resultUrl += this.buildQueryStringFromQueryStringParts();
	      return resultUrl;
	    };

	    FilterQueryStringBuilder.prototype.build = function(url) {
	      this.prepareQueryStringParts();
	      return this.buildUrlFromQueryStringParts(url);
	    };

	    return FilterQueryStringBuilder;
	  })();

	  return FilterQueryStringBuilder;
	};


/***/ },
/* 94 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var NodeFilter = function(options) {
	    this.options = options;
	  };

	  NodeFilter.prototype.memberOfHiddenOtherGroup = function(node) {
	    return this.options && this.options.hide_other_group === 'yes' && node.level === 1 && node.payload.objectType === 'Project' && node.payload.getFirstLevelGrouping() === 0;
	  };

	  NodeFilter.prototype.hiddenOrFilteredOut = function(node) {
	    var nodeObject = node.payload;

	    return nodeObject.hide() || nodeObject.filteredOut();
	  };

	  NodeFilter.prototype.nodeExcluded = function(node) {
	    return this.hiddenOrFilteredOut(node) || this.memberOfHiddenOtherGroup(node);
	  };

	  var TimelineTableHelper = {
	    flattenTimelineTree: function(root, filterCallback, processNodeCallback){
	      var nodes = [];

	      angular.forEach(root.childNodes, function(node){
	        if (!filterCallback(node)) {
	          // add relevant information to row
	          if (processNodeCallback) processNodeCallback(node, root);

	          // add subtree to nodes
	          nodes.push(node);
	          nodes = nodes.concat(TimelineTableHelper.flattenTimelineTree(node, filterCallback, processNodeCallback));
	        }
	      });

	      return nodes;
	    },

	    addRowDataToNode: function(node, parent) {
	      // ancestors
	      if (parent) {
	        node.ancestors = [parent];
	        if(parent.ancestors) node.ancestors = parent.ancestors.concat(node.ancestors);

	      }

	      // first level group
	      var isNested = node.level >= 2;
	      if (node.payload.objectType === 'Project' && !isNested) {
	        node.firstLevelGroup        = node.payload.getFirstLevelGrouping();
	        node.firstLevelGroupingName = node.payload.getFirstLevelGroupingName();
	      } else {
	        // inherit group from parent
	        node.firstLevelGroup = parent.firstLevelGroup;
	      }
	    },

	    getTableRowsFromTimelineTree: function(tree, options) {
	      var nodeFilter = new NodeFilter(options);

	      // add relevant information to tree root serving as first row
	      TimelineTableHelper.addRowDataToNode(tree);

	      var rows = TimelineTableHelper.flattenTimelineTree(tree, function(node) { return nodeFilter.nodeExcluded(node); }, TimelineTableHelper.addRowDataToNode);
	      rows.unshift(tree);

	      return rows;
	    },

	    setLastVisible: function(rows) {
	      var set = false;
	      var i = rows.length - 1;
	      while(i >= 0){
	        if(!set && rows[i].visible){
	          rows[i].setLastVisible();
	          set = true;
	        } else {
	          rows[i].resetLastVisible();
	        }
	        i--;
	      }
	    },

	    setRowLevelVisibility: function(rows, level) {
	      angular.forEach(rows, function(row) {
	        if(row.level <= level) {
	          row.setVisible();
	        } else {
	          row.resetVisible();
	        }
	      });
	      TimelineTableHelper.setLastVisible(rows);
	    },

	    applyToNodes: function(nodes, method, recurse){
	      var method = method;
	      angular.forEach(nodes, function(node){
	        method(node);
	        if(node.childNodes && recurse){
	          TimelineTableHelper.applyToNodes(node.childNodes, method, recurse);
	        }
	      });
	    }
	  };

	  return TimelineTableHelper;
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.timelines.models')
	  .factory('Color', __webpack_require__(96))
	  .factory('CustomField', __webpack_require__(97))
	  .factory('HistoricalPlanningElement', __webpack_require__(98))
	  .factory('Constants', __webpack_require__(99))
	  .factory('UI', ['$timeout', __webpack_require__(100)])
	  .factory('PlanningElementType', __webpack_require__(101))
	  .factory('PlanningElement', ['PathHelper', __webpack_require__(102)])
	  .factory('ProjectAssociation', __webpack_require__(103))
	  .factory('ProjectType', __webpack_require__(104))
	  .factory('Project', ['PathHelper', __webpack_require__(105)])
	  .factory('Reporting', __webpack_require__(106))
	  .factory('Status', __webpack_require__(107))
	  .factory('Timeline', ['Constants', 'TreeNode', 'UI', 'Color',
	    'HistoricalPlanningElement', 'PlanningElement', 'PlanningElementType',
	    'ProjectType', 'Project', 'ProjectAssociation', 'Reporting',
	    'CustomField', 'CustomFieldHelper',
	    __webpack_require__(108)
	  ])
	  .factory('TreeNode', __webpack_require__(109))
	  .factory('User', __webpack_require__(110));


/***/ },
/* 96 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {
	  Color = {
	    identifier: 'colors',
	    all: function(timeline) {
	      // collect all colors
	      var r = timeline.colors;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    }
	  };

	  return Color;
	};


/***/ },
/* 97 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	// stricter than default
	/*jshint undef:true,
	         eqeqeq:true,
	         forin:true,
	         immed:true,
	         latedef:true,
	         trailing: true
	*/

	// looser than default
	/*jshint eqnull:true */

	// environment and other global vars
	/*jshint browser:true, devel:true*/
	/*global angular:false, Timeline:true*/

	module.exports = function() {

	  var CustomField = {
	    identifier: 'custom_fields',
	    all: function(timeline) {
	      // collect all customfields
	      var r = timeline.custom_fields;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    }
	  };

	  return CustomField;
	};


/***/ },
/* 98 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {
	  HistoricalPlanningElement = {
	    identifier: 'historical_planning_elements'
	  };

	  return HistoricalPlanningElement;
	};


/***/ },
/* 99 */
/***/ function(module, exports) {

	// //-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// // ╭───────────────────────────────────────────────────────────────╮
	// // │  _____ _                _ _                                   │
	// // │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// // │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// // │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// // │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// // ├───────────────────────────────────────────────────────────────┤
	// // │ Javascript library that fetches and plots timelines for the   │
	// // │ OpenProject timelines module.                                 │
	// // ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {

	  var Constants = {
	    //constants and defaults
	    LOAD_ERROR_TIMEOUT: 60000,
	    DISPLAY_ERROR_DELAY: 2000,
	    PROJECT_ID_BLOCK_SIZE: 100,
	    USER_ATTRIBUTES: {
	      PROJECT: ["responsible_id"],
	      PLANNING_ELEMENT: ["responsible_id", "assigned_to_id"]
	    },

	    defaults: {
	      artificial_load_delay:          0,   // no delay
	      columns:                        [],
	      exclude_own_planning_elements:  false,
	      exclude_reporters:              false,
	      api_prefix:                     '/api/v2',
	      hide_other_group:               false,
	      hide_tree_root:                 false,
	      initial_outline_expansion:      0,   // aggregations only
	      project_prefix:                 '/projects',
	      planning_element_prefix:        '',
	      ui_root:                        jQuery('#timeline'),
	      url_prefix:                     ''   // empty prefix so it is not undefined.
	    },

	    ajax_defaults: {
	      cache: false,
	      context: this,
	      dataType: 'json'
	    },
	  };

	  return Constants;
	};


/***/ },
/* 100 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function($timeout) {

	  // ╭───────────────────────────────────────────────────────────────────╮
	  // │ UI and Plotting                                                   │
	  // ╰───────────────────────────────────────────────────────────────────╯

	  var UI = {

	    DEFAULT_COLOR: '#999999',
	    DEFAULT_FILL_COLOR_IN_COMPARISONS: 'none',
	    DEFAULT_LANE_COLOR: '#000000',
	    DEFAULT_LANE_WIDTH: 1,
	    DEFAULT_PARENT_COLOR: '#666666',
	    DEFAULT_STROKE_COLOR: '#000000',
	    DEFAULT_STROKE_COLOR_IN_COMPARISONS: '#000000',
	    DEFAULT_STROKE_DASHARRAY_IN_COMPARISONS: '', // other examples: '-', '- ', '-- '
	    DEFAULT_COMPARISON_OFFSET: 5,

	    DAY_WIDTH: 16,

	    MIN_CHART_WIDTH: 200,
	    RENDER_BUCKET_SIZE: 32,
	    ORIGINAL_BORDER_WIDTH_CORRECTION: 3,
	    BORDER_WIDTH_CORRECTION: 3,
	    HOVER_THRESHOLD: 3,

	    GROUP_BAR_INDENT: -10,

	    PE_DARK_TEXT_COLOR: '#000000',    // color on light planning element.
	    PE_DEFAULT_TEXT_COLOR: '#000000', // color on timelines background.
	    PE_HEIGHT: 20,
	    PE_LIGHT_TEXT_COLOR: '#ffffff',   // color on dark planning element.
	    PE_LUMINANCE_THRESHOLD: 0.5,      // threshold above which dark text is rendered.
	    PE_TEXT_ADDITIONAL_OUTSIDE_PADDING_WHEN_MILESTONE: 6,
	    PE_TEXT_ADDITIONAL_OUTSIDE_PADDING_WHEN_EXPANDED_WITH_CHILDREN: 6,
	    PE_TEXT_INSIDE_PADDING: 8,        // 4px padding on both sides of the planning element towards an inside labelelement towards an inside label.
	    PE_TEXT_OUTSIDE_PADDING: 6,       // space between planning element and text to its right.
	    PE_TEXT_AGGREGATED_LABEL_WIDTH_THRESHOLD: 5,

	    USE_MODALS: true,

	    scale: 1,
	    zoomIndex: 0,

	    // OUTLINE_LEVELS define possible OUTLINE_CONFIGURATIONS.
	    OUTLINE_LEVELS: ['aggregation', 'level1', 'level2', 'level3', 'level4', 'level5', 'all'],
	    OUTLINE_CONFIGURATIONS: {
	      aggregation: { name: 'timelines.outlines.aggregation', level: 0 },
	      level1:      { name: 'timelines.outlines.level1',      level: 1 },
	      level2:      { name: 'timelines.outlines.level2',      level: 2 },
	      level3:      { name: 'timelines.outlines.level3',      level: 3 },
	      level4:      { name: 'timelines.outlines.level4',      level: 4 },
	      level5:      { name: 'timelines.outlines.level5',      level: 5 },
	      all:         { name: 'timelines.outlines.all',         level: Infinity }
	    },

	    // ZOOM_SCALES define possible ZOOM_CONFIGURATIONS.
	    ZOOM_SCALES: ['yearly', 'quarterly', 'monthly', 'weekly', 'daily'],
	    ZOOM_CONFIGURATIONS: {
	      daily:     {name: 'timelines.zoom.days',     scale: 1.40, config: ['months', 'weeks', 'actualDays', 'weekDays']},
	      weekly:    {name: 'timelines.zoom.weeks',    scale: 0.89, config: ['months', 'weeks', 'weekDays']},
	      monthly:   {name: 'timelines.zoom.months',   scale: 0.53, config: ['years', 'months', 'weeks']},
	      quarterly: {name: 'timelines.zoom.quarters', scale: 0.21, config: ['year-quarters', 'months', 'weeks']},
	      yearly:    {name: 'timelines.zoom.years',    scale: 0.10, config: ['years', 'quarters', 'months']}
	    },
	    getScale: function() {
	      var day = this.DAY_WIDTH * this.scale;
	      var week = day * 7;
	      var height = Timeline.PE_HEIGHT;

	      return {
	        height: height,
	        week: week,
	        day: day
	      };
	    },
	    setScale: function(scale) {
	      // returns width for specified scale
	      if (!scale) {
	        scale = this.scale;
	      } else {
	        this.scale = scale;
	      }

	      return this.getDaysForCurrentScale();
	    },
	    getDaysForCurrentScale: function() {
	      var days = this.getDaysBetween(
	        this.getBeginning(),
	        this.getEnd()
	      );
	      return days * this.DAY_WIDTH * this.scale;
	    },
	    getWidth: function() {

	      // width is the wider of the currently visible chart dimensions
	      // (adjusted_width) and the minimum space the timeline needs.
	      return Math.max(this.adjusted_width, this.getDaysForCurrentScale() + 200);
	    },
	    resetWidth: function() {
	      delete this.adjusted_width;
	    },
	    adjustWidth: function(width) {
	      // adjusts for the currently visible chart dimensions.
	      var old_adjusted_width = this.adjusted_width;

	      this.adjusted_width = this.adjusted_width === undefined?
	        width: Math.max(old_adjusted_width, Math.max(width, this.adjusted_width));

	      if (old_adjusted_width < this.adjusted_width) {
	        this.rebuildAll();
	      }

	      return this.adjusted_width;
	    },
	    getHeight: function() {
	      return this.getMeasuredHeight() - this.getMeasuredScrollbarHeight();
	    },
	    scaleToFit: function(width) {
	      var scale = width / (this.DAY_WIDTH * this.getDaysBetween(
	        this.getBeginning(),
	        this.getEnd()
	      ));
	      this.setScale(scale);
	      return scale;
	    },
	    getColorParts: function(color) {
	      return jQuery.map(color.match(/[0-9a-fA-F]{2}/g), function(e, i) {
	        return parseInt(e, 16);
	      });
	    },
	    getLuminanceFor: function(color) {
	      var parts = this.getColorParts(color);
	      var result = (0.299 * parts[0] + 0.587 * parts[1] + 0.114 * parts[2]) / 256;
	      return result;
	    },
	    expandTo: function(index) {
	      var outlineLevel;
	      index = Math.max(index, 0);
	      this.expansionIndex = index;
	      this.expandToOutlineLevel(Timeline.OUTLINE_LEVELS[index]);
	    },
	    expandToOutlineLevel: function(outlineLevel) {
	      var currentOutlineConfig = Timeline.OUTLINE_CONFIGURATIONS[outlineLevel];
	      if(currentOutlineConfig) {
	        var level = currentOutlineConfig.level;
	        if (this.options.hide_tree_root) {
	          level++;
	        }
	        level = this.getLefthandTree().expandTo(level);
	        this.rebuildAll();
	      }
	    },
	    zoom: function(index) {
	      if (index === undefined) {
	        index = this.zoomIndex;
	      }
	      index = Math.max(Math.min(this.ZOOM_SCALES.length - 1, index), 0);
	      var zoomScale = this.ZOOM_SCALES[index];
	      var scale = this.ZOOM_CONFIGURATIONS[zoomScale].scale;

	      this.zoomIndex = index;
	      this.scale = scale;

	      this.resetWidth();
	      this.triggerResize();
	      this.rebuildAll();
	    },
	    zoomIn: function() {
	      this.zoom(this.zoomIndex + 1);
	    },
	    zoomOut: function() {
	      this.zoom(this.zoomIndex - 1);
	    },
	    getSwimlaneStyles: function() {
	      return [{
	          textColor: '#000000',
	          laneColor: '#e7e7e7'
	        }, {
	          textColor: '#000000',
	          laneColor: '#797979'
	        }, {
	          // laneWidth: 1.5,
	          textColor: '#000000',
	          laneColor: '#424242'
	        }, {
	          // laneWidth: 2,
	          textColor: '#000000',
	          laneColor: '#000000'
	        }];
	    },
	    getSwimlaneConfiguration: function() {
	      return {
	        'actualDays': {
	          // actual days
	          delimiter: this.getBeginning().moveToFirstDayOfMonth().moveToDayOfWeek(Date.CultureInfo.firstDayOfWeek, -1),
	          caption: function() { return this.delimiter.toString('d'); },
	          next: function() { return this.delimiter.addDays(1); },
	          overrides: ['weekDays']
	        },
	        'weekDays': {
	          // weekdays
	          delimiter: this.getBeginning().moveToFirstDayOfMonth().moveToDayOfWeek(Date.CultureInfo.firstDayOfWeek, -1),
	          caption: function() { return this.delimiter.toString('ddd')[0]; },
	          next: function() { return this.delimiter.addDays(1); },
	          overrides: ['actualDays']
	        },
	        'weeks': {
	          // weeks
	          delimiter: this.getBeginning().moveToFirstDayOfMonth().moveToDayOfWeek(Date.CultureInfo.firstDayOfWeek, -1),
	          caption: function() { return this.delimiter.getWeekOfYear(); },
	          next: function() { return this.delimiter.addWeeks(1); },
	          overrides: ['weekDays', 'actualDays']
	        },
	        'months': {
	          // months
	          delimiter: this.getBeginning().moveToFirstDayOfMonth(),
	          caption: function() { return Date.CultureInfo.abbreviatedMonthNames[this.delimiter.getMonth()]; },
	          next: function() { return this.delimiter.addMonths(1); },
	          overrides: ['actualDays', 'weekDays', 'quarters']
	        },
	        'year-quarters': {
	          // quarters
	          delimiter: this.getBeginning().moveToMonth(0, -1).moveToFirstDayOfMonth(),
	          caption: function() { return Date.CultureInfo.abbreviatedQuarterNames[this.delimiter.getQuarter()] + " " + this.delimiter.toString('yyyy'); },
	          next: function() { return this.delimiter.addQuarters(1); },
	          overrides: ['actualDays', 'weekDays', 'months', 'quarters']
	        },
	        'quarters': {
	          // quarters
	          delimiter: this.getBeginning().moveToMonth(0, -1).moveToFirstDayOfMonth(),
	          caption: function() { return Date.CultureInfo.abbreviatedQuarterNames[this.delimiter.getQuarter()]; },
	          next: function() { return this.delimiter.addQuarters(1); },
	          overrides: ['actualDays', 'weekDays', 'months']
	        },
	        'years': {
	          // years
	          delimiter: this.getBeginning().moveToMonth(0, -1).moveToFirstDayOfMonth(),
	          caption: function() { return this.delimiter.toString('yyyy'); },
	          next: function() { return this.delimiter.addYears(1); },
	          overrides: ['actualDays', 'weekDays', 'months', 'quarters']
	        }};
	    },
	    getUiRoot: function() {
	      return this.uiRoot;
	    },
	    getEventHandlerSuffix: function() {
	      if (this.event_handler_suffix === undefined) {
	        this.event_handler_suffix = this.getUiRoot().attr('id');
	      }
	      return this.event_handler_suffix;
	    },
	    getTooltip: function() {
	      var tooltip = this.getUiRoot().find('.tl-tooltip');

	      return tooltip;
	    },
	    getChart: function() {
	      return this.getUiRoot().find('.tl-chart');
	    },
	    getMeasuredHeight: function() {
	      return this.getUiRoot().find('.tl-left-main').height();
	    },
	    getMeasuredScrollbarHeight: function() {
	      var p, div, h, hh;

	      // this method is built on the assumption that the width of a
	      // vertical scrollbar is equal o the height of a horizontal one. if
	      // that symmetry is broken, this method will need to be repaired.

	      if (this.scrollbar_height !== undefined) {
	        return this.scrollbar_height;
	      }

	      p = jQuery('<p/>').css({
	        'width':  "100%",
	        'height': "200px"
	      });

	      div = jQuery('<div/>').css({
	        'position':   "absolute",
	        'top':        "0",
	        'left':       "0",
	        'visibility': "hidden",
	        'width':      "200px",
	        'height':     "150px",
	        'overflow':   "hidden"
	      });

	      div.append(p);
	      jQuery('body').append(div);
	      h = p[0].offsetWidth;
	      div.css({'overflow': 'scroll'});
	      hh = p[0].offsetWidth;
	      if (h === hh) {
	        hh = div[0].clientWidth;
	      }
	      div.remove();

	      this.scrollbar_height = (h - hh);
	      return this.scrollbar_height;
	    },
	    escape: function(string) {
	      return jQuery('<div/>').text(string).html();
	    },
	    psub: function(string, map) {
	      return string.replace(/#\{(.+?)\}/g, function(m, p, o, s) { return map[p]; });
	    },
	    pnum: function(string) {
	      return parseInt(string.replace(/[^\d\-]/g, ''), 10);
	    },
	    /**
	     * Filter helper for multi select filters based on IDs.
	     *
	     * Assumption is that array is an array of strings while object is a object
	     * with an id field which contains a number
	     */
	    filterOutBasedOnArray: function (array, object) {
	      return !Timeline.idInArray(array, object);
	    },
	    idInArray: function (array, object) {
	      // when object is not set, check if the (none) a.k.a. -1 option is selected
	      var id = object ? object.id + '' : '-1';

	      if (jQuery.isArray(array) && array.length > 0) {
	        return jQuery.inArray(id, array) !== -1;
	      }
	      else {
	        // if there is no array, we just accept.
	        return true;
	      }
	    },

	    rebuildAll: function() {
	      var timeline = this;
	      var root = timeline.getUiRoot();

	      delete this.table_offset;

	      $timeout.cancel(this.rebuildTimeout);
	      this.rebuildTimeout = $timeout(function() {
	        // The minimum width of the whole timeline should be the actual
	        // width of the table added to the minimum chart width. That way,
	        // the floats never break.

	        if (timeline.options.hide_chart === null) {
	          root.find('.timeline').css({
	            'min-width': root.find('.tl-left-main').width() +
	                           Timeline.MIN_CHART_WIDTH
	          });
	        }

	        if (timeline.options.hide_chart !== 'yes') {
	          timeline.rebuildGraph();
	        } else {
	          var chart = timeline.getUiRoot().find('.tl-chart');
	          chart.css({ display: 'none'});
	        }
	        timeline.adjustScrollingForChangedContent();
	      });
	    },

	    adjustScrollingForChangedContent: function() {
	      var current_height = Math.max(jQuery("body").height(), jQuery("#content").height());
	      if(current_height < jQuery(window).scrollTop()) {
	        jQuery(window).scrollTop(current_height - jQuery(window).height());
	      }
	    },
	    scrollbarBox: function() {
	      var scrollbar_height = this.getMeasuredScrollbarHeight();
	      return jQuery('<div class="tl-invisible"/>').css({
	        'height': scrollbar_height,
	        'width':  scrollbar_height
	      });
	    },
	    decoHeight: function() {
	      var config = Timeline.ZOOM_SCALES[this.zoomIndex];
	      var lanes = Timeline.ZOOM_CONFIGURATIONS[config].config.length;
	      return 12 * lanes; // -1 is for coordinates starting at 0.
	    },
	    getPaper: function() {
	      return this.paper;
	    },
	    rebuildGraph: function() {
	      var timeline = this;
	      var tree = timeline.getLefthandTree();
	      var chart = timeline.getUiRoot().find('.tl-chart');

	      chart.css({'display': 'none'});

	      var width = timeline.getWidth();
	      var height = timeline.getHeight();

	      // clear and resize
	      timeline.paper.clear();
	      timeline.paper.setSize(width, height);

	      $timeout(function() {
	        // rebuild content
	        timeline.bustVerticalOffsetCache(tree);
	        timeline.rebuildBackground(tree, width, height);
	        chart.css({'display': 'block'});
	        timeline.rebuildForeground(tree);
	      });
	    },
	    finishGraph: function() {
	      var root = this.getUiRoot();
	      var info = jQuery('<span class="tl-hidden-info tl-finished"></span>');

	      // this will be called asynchronously and finishes up the graph
	      // building process.
	      this.setupEventHandlers();

	      root.append(info);
	    },
	    rebuildBackground: function(tree, width, height) {
	      var beginning = this.getBeginning();
	      var scale = this.getScale();
	      var end = this.getEnd();
	      var deco = this.decoHeight();

	      deco--;

	      this.paper.rect(0, deco, width, height).attr({
	        'fill': '#fff',
	        'stroke': '#fff', //
	        'stroke-opacity': 0,
	        'stroke-width': 0
	      });

	      // horizontal bar.
	      this.paper.path(
	        this.psub('M0 #{y}H#{w}', {
	          y: deco + 0.5, // the vertical line otherwise overlaps.
	          w: width
	        })
	      );

	      // *** beginning decorations ***

	      var lastDivider, caption, captionElement, bbox, dividerPath;
	      var padding = 2;

	      lastDivider = 0;

	      var swimlanes = this.getSwimlaneConfiguration();
	      var styles = this.getSwimlaneStyles();
	      var config = Timeline.ZOOM_SCALES[this.zoomIndex];

	      var key, i, left, first, timeline = this;
	      var m, x, y;

	      var currentStyle = 0, lastOverrideGroup;

	      for (i = Timeline.ZOOM_CONFIGURATIONS[config].config.length - 1; i >= 0; i--) {
	        key = Timeline.ZOOM_CONFIGURATIONS[config].config[i];
	        if (swimlanes.hasOwnProperty(key)) {

	          // if the current swimlane has more overrides, we assume a
	          // change in quality of the seperation and switch styles to a
	          // more solid one. lastOverrideGroup is set to the length of the
	          // override-array of the current swimlane.

	          if (swimlanes[key].overrides.length > lastOverrideGroup) {
	            currentStyle++;
	          }
	          lastOverrideGroup = swimlanes[key].overrides.length;

	          lastDivider = 0;
	          dividerPath = '';
	          first = true;
	          while (lastDivider < width || swimlanes[key].delimiter.compareTo(end) <= 0) {

	            caption = swimlanes[key].caption() || '';
	            if (caption.length === undefined) {
	              caption = caption.toString(); // caption needs to be a string.
	            }
	            swimlanes[key].next();
	            left = timeline.getDaysBetween(beginning, swimlanes[key].delimiter) * scale.day;
	            bbox = {height: 8};

	            captionElement = timeline.paper.text(0, 0, caption);
	            captionElement.attr({
	              'font-size': 10
	            });

	            x = (lastDivider + (left - lastDivider) / 2) - (jQuery(captionElement.node).width() / 16);
	            y = (deco - padding);

	            captionElement
	              .translate(x, y)
	              .attr({
	                'fill': styles[currentStyle].textColor || timeline.DEFAULT_COLOR,
	                'stroke': 'none'
	              });

	            lastDivider = left;
	            dividerPath += timeline.psub('M#{x} #{y}v#{b} M#{x} #{d}v#{h}', {
	              x: left,
	              y: deco - bbox.height - 2 * padding,
	              h: height,
	              b: bbox.height + 2 * padding,
	              d: timeline.decoHeight() + 1
	            });
	          }

	          timeline.paper.path(dividerPath).attr({
	            'stroke': styles[currentStyle].laneColor || timeline.DEFAULT_LANE_COLOR,
	            'stroke-width': styles[currentStyle].laneWidth || timeline.DEFAULT_LANE_WIDTH,
	            'stroke-linecap': 'butt' // the vertical line otherwise overlaps.
	          });

	          // altered deco ceiling for next decorations.
	          deco -= bbox.height + 2 * padding;

	          // horizontal bar.
	          timeline.paper.path(
	            timeline.psub('M0 #{y}H#{w}', {
	              y: deco + 1 + bbox.height + 2 * padding,
	              w: width
	            })
	          ).attr({
	            'stroke': styles[currentStyle].textColor || timeline.DEFAULT_COLOR,
	          });
	        }
	      }

	      this.frameLine();
	      this.nowLine();
	    },
	    previousRelativeVerticalOffset: 0,
	    previousRelativeVerticalOffsetParameter: undefined,
	    getRelativeVerticalOffset: function(offset) {
	      if (offset === this.previousRelativeVerticalOffsetParameter) {
	        return this.previousRelativeVerticalOffset;
	      }
	      var result = parseInt(offset.attr("data-vertical-offset"), 10);
	      if (isNaN(result)) {
	        if (this.table_offset === undefined) {
	          result = this.table_offset = this.getUiRoot().find('.tl-left-main table').position().top;
	        }
	        result = offset.position().top - this.table_offset;
	        offset.attr("data-vertical-offset", result);
	      }

	      this.previousRelativeVerticalOffset = result;
	      this.previousRelativeVerticalOffsetParameter = offset;
	      return result;
	    },
	    previousRelativeVerticalBottomOffset: 0,
	    previousRelativeVerticalBottomOffsetParameter: undefined,
	    getRelativeVerticalBottomOffset: function(offset) {
	      if (offset === this.previousRelativeVerticalBottomOffsetParameter) {
	        return this.previousRelativeVerticalBottomOffset;
	      }
	      var result = parseInt(offset.attr("data-vertical-bottom-offset"), 10);
	      if (isNaN(result)) {
	        result = this.getRelativeVerticalOffset(offset);
	        if (offset.find("div").length === 1) {
	          result -= jQuery(offset.find("div")[0]).height();
	        }
	        result += offset.outerHeight();
	        offset.attr("data-vertical-bottom-offset", result);
	      }
	      this.previousRelativeVerticalBottomOffset = result;
	      this.previousRelativeVerticalBottomOffsetParameter = offset;
	      return result;
	    },
	    bustVerticalOffsetCache: function(tree) {
	      tree.iterateWithChildren(function(node) {
	        var currentElement = node.getDOMElement();
	        if (currentElement) {
	          currentElement.removeAttr("data-vertical-offset");
	          currentElement.removeAttr("data-vertical-bottom-offset");
	        }
	      });
	    },
	    rebuildForeground: function(tree) {
	      var timeline = this;
	      var previousGrouping = -1;
	      var grouping;
	      var width = timeline.getWidth();
	      var previousNode;
	      var render_buckets = [[], [], [], []];
	      var render_bucket_vertical = render_buckets[0];
	      var render_bucket_element = render_buckets[1];
	      var render_bucket_vertical_milestone = render_buckets[2];
	      var render_bucket_text = render_buckets[3];

	      // iterate over all planning elements and find vertical ones to draw.
	      jQuery.each(timeline.verticalPlanningElementIds(), function (i, e) {
	        var pl = timeline.getPlanningElement(e);

	        // the planning element should have been loaded already. however,
	        // it might not have been, or it might not even exist. in that
	        // case, we simply ignore it.
	        if (pl === undefined) {
	          return;
	        }

	        var pet = pl.getPlanningElementType();

	        var node = Object.create(TreeNode);
	        node.setData(pl);

	        if (pl.vertical) {
	          if (pet && pet.is_milestone) {
	            render_bucket_vertical_milestone.push(function () {
	              pl.renderVertical(node);
	            });
	          } else {
	            render_bucket_vertical.push(function () {
	              pl.renderVertical(node);
	            });
	          }
	        }
	      });

	      tree.iterateWithChildren(function(node, indent, index) {
	        var currentElement = node.getDOMElement();
	        if (!currentElement) {
	          return;
	        }
	        var currentOffset = timeline.getRelativeVerticalOffset(currentElement);
	        var previousElement, previousEnd, groupHeight;
	        var groupingChanged = false;
	        var pl = node.getData();

	        // if the grouping changed, put a grey box here.

	        if (timeline.isGrouping() && indent === 0 && pl.is(Project)) {
	          grouping = pl.getFirstLevelGrouping();
	          if (previousGrouping !== grouping) {

	            groupingChanged = true;

	            // previousEnd is the vertical position at which a previous
	            // element ended. It is calculated by adding the previous
	            // element's vertical offset to it's height.

	            if (previousNode !== undefined) {
	              previousElement = previousNode.getDOMElement();
	              previousEnd = timeline.getRelativeVerticalOffset(previousElement) +
	                  previousElement.outerHeight();
	            } else {

	              previousEnd = timeline.decoHeight();
	            }

	            // groupHeight is the height gap between the vertical position
	            // at which the current element begins (currentOffset) and the
	            // position the previous element ended (previousEnd).

	            groupHeight = currentOffset - previousEnd;

	            // draw grey box.

	            timeline.paper.rect(
	              Timeline.GROUP_BAR_INDENT,
	              previousEnd,
	              width - 2 * Timeline.GROUP_BAR_INDENT,
	              groupHeight
	            ).attr({
	              'fill': '#bbb',
	              'fill-opacity': 0.5,
	              'stroke-width': 1,
	              'stroke-opacity': 1,
	              'stroke': Timeline.DEFAULT_STROKE_COLOR
	            });

	            previousGrouping = grouping;
	          }

	        }

	        // if there is a new project, draw a black line.

	        if (pl.is(Project)) {

	          if (!groupingChanged) {

	            // draw lines between projects
	            timeline.paper.path(
	              timeline.psub('M0 #{y}h#{w}', {
	                y: currentOffset,
	                w: width
	              })
	            ).attr({
	              'stroke-width': 1,
	              'stroke': Timeline.DEFAULT_STROKE_COLOR
	            });

	          }

	        } else if (pl.is(PlanningElement)) {

	        }

	        previousNode = node;

	        if (pl.is(PlanningElement)) {
	          render_bucket_text.push(function () {
	            pl.renderForeground(node);
	          });
	        }

	        render_bucket_element.push(function() {
	          pl.render(node);
	        });
	      });

	      var buckets = Array.prototype.concat.apply([], render_buckets);

	      var render_next_bucket = function() {
	        if (buckets.length !== 0) {
	          jQuery.each(buckets.splice(0, Timeline.RENDER_BUCKET_SIZE), function(i, e) {
	            e.call();
	          });
	          $timeout(render_next_bucket);
	        } else {
	          timeline.finishGraph();
	        }
	      };

	      render_next_bucket();
	    },

	    frameLine: function () {
	      var timeline = this;
	      var scale = timeline.getScale();
	      var beginning = timeline.getBeginning();
	      var decoHeight = timeline.decoHeight();
	      var linePosition;

	      this.calculateTimeFilter();

	      if (this.frameStart) {
	        linePosition = (timeline.getDaysBetween(beginning, this.frameStart)) * scale.day;

	        timeline.paper.path(
	          timeline.psub("M#{position} #{top}L#{position} #{height}", {
	            'position': linePosition,
	            'top': decoHeight,
	            'height': this.getHeight()
	          })
	        ).attr({
	          'stroke': 'blue',
	          'stroke-dasharray': '- '
	        });
	      }

	      if (this.frameEnd) {
	        linePosition = ((timeline.getDaysBetween(beginning, this.frameEnd) + 1) * scale.day);

	        timeline.paper.path(
	          timeline.psub("M#{position} #{top}L#{position} #{height}", {
	            'position': linePosition,
	            'top': decoHeight,
	            'height': this.getHeight()
	          })
	        ).attr({
	          'stroke': 'blue',
	          'stroke-dasharray': '- '
	        });
	      }
	    },

	    nowLine: function () {
	      var timeline = this;
	      var scale = timeline.getScale();
	      var beginning = timeline.getBeginning();
	      var ms_in_a_day = 86400000; // 24 * 60 * 60 * 1000

	      var todayPosition = (timeline.getDaysBetween(beginning, Date.today())) * scale.day;
	      todayPosition += (Date.now() - Date.today()) / ms_in_a_day * scale.day;

	      var decoHeight = timeline.decoHeight();

	      var currentTimeElement = timeline.paper.path(
	        timeline.psub("M#{today} #{top}L#{today} #{height}", {
	          'today': todayPosition,
	          'top': decoHeight,
	          'height': this.getHeight()
	        })
	      ).attr({
	        'stroke': 'red',
	        'stroke-dasharray': '3,3'
	      });

	      var setDateTime = 5 * 60 * 1000;

	      var setDate = function () {
	        var newTodayPosition = (timeline.getDaysBetween(beginning, Date.today())) * scale.day;
	        newTodayPosition += (Date.now() - Date.today()) / ms_in_a_day * scale.day;

	        if (Math.abs(newTodayPosition - todayPosition) > 0.1) {
	          currentTimeElement.transform(
	            timeline.psub("t#{trans},0", {
	              'trans': newTodayPosition - todayPosition
	            })
	          );
	        }

	        if (scale.day === timeline.getScale().day) {
	          window.setTimeout(setDate, setDateTime);
	        }
	      };

	      window.setTimeout(setDate, setDateTime);
	    },

	    adjustTooltip: function(renderable, element) {
	      renderable = renderable || this.currentNode;
	      element = element || this.currentElement;
	      if (!renderable) {
	        return;
	      }

	      var chart = this.getChart();
	      var offset = chart.position();
	      var tooltip = this.getTooltip();
	      var bbox = element.getBBox();
	      var content = tooltip.find('.tl-tooltip-inner');
	      var arrow = tooltip.find('.tl-tooltip-arrow');
	      var arrowOffset = this.pnum(arrow.css('left'));
	      var padding = (tooltip.outerWidth() - tooltip.width()) / 2;
	      var duration = tooltip.css('display') !== 'none' ? 0 : 0;
	      var info = "";
	      var r = renderable.getResponsible();

	      // construct tooltip content information.

	      info += "<b>";
	      info += this.escape(renderable.subject);
	      info += "</b>";
	      if (renderable.is(PlanningElement)) {
	        info += " (#" + renderable.id + ")";
	      }
	      info += "<br/>";
	      info += this.escape(renderable.start_date);
	      if (renderable.due_date !== renderable.start_date) {
	        // only have a second date if it is different.
	        info += " – " + this.escape(renderable.due_date);
	      }
	      info += "<br/>";
	      if (r && r.name) { // if there is a responsible, show the name.
	        info += r.name;
	      }

	      content.html(info);

	      // calculate position of tooltip
	      var left = offset.left;
	      left -= chart.scrollLeft();
	      left += bbox.x;
	      if (renderable.start_date && renderable.due_date) {
	        left += bbox.width / 2;
	      } else if (renderable.due_date) {
	        left += bbox.width - Timeline.HOVER_THRESHOLD;
	      } else {
	        left += Timeline.HOVER_THRESHOLD;
	      }
	      left -= arrowOffset;

	      var min_left = this.getUiRoot().find('.tl-left').position().left;
	      min_left += this.getUiRoot().find('.tl-left').width();
	      min_left -= arrowOffset;

	      var max_left = this.getUiRoot().find('.tl-right').position().left;
	      max_left -= tooltip.outerWidth();
	      max_left -= padding;
	      max_left += arrowOffset;

	      left = Math.max(min_left, Math.min(max_left, left));

	      var margin = offset.left;
	      margin -= chart.scrollLeft();
	      margin += (bbox.x);
	      if (renderable.start_date && renderable.due_date) {
	        margin += bbox.width / 2;
	      } else if (renderable.due_date) {
	        margin += bbox.width - Timeline.HOVER_THRESHOLD;
	      } else {
	        margin += Timeline.HOVER_THRESHOLD;
	      }
	      margin -= left;
	      margin -= arrowOffset;

	      var max_margin = tooltip.width();
	      max_margin -= padding;
	      max_margin -= arrowOffset;

	      margin = Math.min(max_margin, Math.max(margin, 0));
	      margin -= padding;

	      var top = offset.top;
	      top += bbox.y;
	      top -= tooltip.outerHeight();
	      top--; // random offset.

	      if (top < jQuery(window).scrollTop() - 80) {
	        top = jQuery(window).scrollTop() - 80;
	      }

	      this.currentNode = renderable;
	      this.currentElement = element;
	      tooltip.clearQueue();
	      arrow.clearQueue();

	      tooltip.animate({left: left, top: top}, duration, 'swing');
	      arrow.animate({'margin-left': margin}, duration, 'swing');
	    },

	    setupEventHandlers: function() {
	      var tree = this.getLefthandTree();
	      this.setupResizeHandlers();
	      //this.setupHoverHandlers(tree);
	    },
	    setupResizeHandlers: function() {
	      var timeline = this, timeout;
	      var handler_name = 'resize.' + timeline.getEventHandlerSuffix();

	      jQuery(window).unbind(handler_name);
	      jQuery(window).bind(handler_name, function() {

	        window.clearTimeout(timeout);
	        timeout = window.setTimeout(function() {
	          timeline.triggerResize();
	        }, 1087); // http://dilbert.com/strips/comic/2008-05-08/
	      });
	    },
	    triggerResize: function() {
	      var root = this.getUiRoot();
	      if (!root) {
	        return false;
	      }
	      var width = root.width() - root.find('.tl-left-main').width() -
	                    Timeline.BORDER_WIDTH_CORRECTION;
	      this.adjustWidth(width);
	    },
	    addHoverHandler: function(node, e) {
	      var tooltip = this.getTooltip();
	      var timeline = this;

	      e.unhover();
	      e.click(function(e) {
	        if (Timeline.USE_MODALS) {
	          var payload = node.getData();
	          if (e.which == 1 && !e.ctrlKey && !e.metaKey) {
	            timeline.modalHelper.createModal(payload.getUrl());
	            e.stopPropagation();
	          } else {
	            window.open(payload.getUrl(), '_blank');
	          }
	        }
	      });
	      e.attr({'cursor': 'pointer'});
	      e.hover(
	        function() {
	          timeline.adjustTooltip(node.getData(), e);
	          tooltip.show();
	        },
	        function() {
	          delete tooltip.currentNode;
	          delete tooltip.currentElement;
	          tooltip.hide();
	        },
	        node, node
	      );
	    },

	    addPlanningElement: function() {
	      var projects = this.projects;
	      var project, projectID, possibleProjects = [];

	      for (project in projects) {
	        if (projects.hasOwnProperty(project)) {
	          possibleProjects.push(projects[project]);
	        }
	      }

	      projectID = possibleProjects[0].identifier;

	      if (typeof projectID !== "undefined") {
	        this.modalHelper.create(projectID);
	      }
	    }
	  };

	  return UI;
	};


/***/ },
/* 101 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {
	  PlanningElementType = {
	    identifier: 'planning_element_types',
	    all: function(timeline) {
	      // collect all reportings.
	      var r = timeline.planning_element_types;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    }
	  };

	  return PlanningElementType;
	};


/***/ },
/* 102 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function(PathHelper) {

	  PlanningElement = {
	    objectType: 'PlanningElement',
	    identifier: 'planning_elements',

	    is: function(t) {
	      if (t === undefined) return false;
	      return PlanningElement.identifier === t.identifier;
	    },
	    hide: function () {
	      return false;
	    },
	    filteredOut: function() {
	      var filtered = this.filteredOutForProjectFilter();
	      this.filteredOut = function() { return filtered; };
	      return filtered;
	    },
	    inTimeFrame: function () {
	      return this.timeline.inTimeFilter(this.start(), this.end());
	    },
	    filteredOutForProjectFilter: function() {
	      return this.project.filteredOut();
	    },
	    all: function(timeline) {
	      // collect all planning elements
	      var r = timeline.planning_elements;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    },
	    getProject: function() {
	      return (this.project !== undefined) ? this.project : null;
	    },
	    getPlanningElementType: function() {
	      return (this.planning_element_type !== undefined) ?
	        this.planning_element_type : null;
	    },
	    getResponsible: function() {
	      return (this.responsible !== undefined) ? this.responsible : null;
	    },
	    getResponsibleName: function()  {
	      if (this.responsible && this.responsible.name) {
	        return this.responsible.name;
	      }
	    },
	    getAssignedName: function () {
	      if (this.assigned_to && this.assigned_to.name) {
	        return this.assigned_to.name;
	      }
	    },
	    getParent: function() {
	      return (this.parent !== undefined) ? this.parent : null;
	    },
	    getChildren: function() {
	      if (!this.planning_elements) {
	        return [];
	      }
	      if (!this.sorted) {
	        this.sort('planning_elements');
	        this.sorted = true;
	      }
	      return this.planning_elements;
	    },
	    hasChildren: function() {
	      return this.getChildren().length > 0;
	    },
	    getTypeName: function () {
	      var pet = this.getPlanningElementType();
	      if (pet) {
	        return pet.name;
	      }
	    },
	    getStatusName: function () {
	      if (this.status) {
	        return this.status.name;
	      }
	    },
	    getProjectName: function () {
	      if (this.project) {
	        return this.project.name;
	      }
	    },
	    sort: function(field) {
	      this[field] = this[field].sort(function(a, b) {
	        // order by date, name
	        var dc = 0;
	        var as = a.start(), bs = b.start();
	        if (as) {
	          if (bs) {
	            dc = as.compareTo(bs);
	          } else {
	            dc = 1;
	          }
	        } else if (bs) {
	          dc = -1;
	        }
	        if (dc !== 0) {
	          return dc;
	        }
	        if (a.name < b.name) {
	          return -1;
	        }
	        if (a.name > b.name) {
	          return +1;
	        }
	        return 0;
	      });
	      return this;
	    },
	    start: function() {
	      var pet = this.getPlanningElementType();
	      //if we have got a milestone w/o a start date but with an end date, just set them the same.
	      if (this.start_date === undefined && this.due_date !== undefined && pet && pet.is_milestone) {
	        this.start_date = this.due_date;
	      }
	      if (this.start_date_object === undefined && this.start_date !== undefined) {
	        this.start_date_object = moment(this.start_date).toDate();
	      }
	      return this.start_date_object;
	    },
	    end: function() {
	      var pet = this.getPlanningElementType();
	      //if we have got a milestone w/o a start date but with an end date, just set them the same.
	      if (this.due_date === undefined && this.start_date !== undefined && pet && pet.is_milestone) {
	        this.due_date = this.start_date;
	      }
	      if (this.due_date_object=== undefined && this.due_date !== undefined) {
	        this.due_date_object = moment(this.due_date).toDate();
	      }
	      return this.due_date_object;
	    },
	    getAttribute: function (val) {
	      if (typeof this[val] === "function") {
	        return this[val]();
	      }

	      return this[val];
	    },
	    does_historical_differ: function (val) {
	      if (!this.has_historical()) {
	        return false;
	      }

	      return this.historical().getAttribute(val) !== this.getAttribute(val);
	    },
	    has_historical: function () {
	      return this.historical_element !== undefined;
	    },
	    historical: function () {
	      return this.historical_element || Object.create(PlanningElement);
	    },
	    alternate_start: function() {
	      return this.historical().start();
	    },
	    alternate_end: function() {
	      return this.historical().end();
	    },
	    getSubElements: function() {
	      return this.getChildren();
	    },
	    hasAlternateDates: function() {
	      return (this.does_historical_differ("start_date") ||
	              this.does_historical_differ("due_date") ||
	              this.is_deleted);
	    },
	    isDeleted: function() {
	      return true && this.is_deleted;
	    },
	    isNewlyAdded: function() {
	      return (this.timeline.isComparing() &&
	              !this.has_historical());
	    },
	    getAlternateHorizontalBounds: function(scale, absolute_beginning, milestone) {
	      return this.getHorizontalBoundsForDates(
	        scale,
	        absolute_beginning,
	        this.alternate_start(),
	        this.alternate_end(),
	        milestone
	      );
	    },
	    getHorizontalBounds: function(scale, absolute_beginning, milestone) {
	      return this.getHorizontalBoundsForDates(
	        scale,
	        absolute_beginning,
	        this.start(),
	        this.end(),
	        milestone
	      );
	    },
	    hasStartDate: function () {
	      if (this.start()) {
	        return true;
	      }

	      return false;
	    },
	    hasEndDate: function () {
	      if (this.end()) {
	        return true;
	      }

	      return false;
	    },
	    hasBothDates: function () {
	      if (this.start() && this.end()) {
	        return true;
	      }

	      return false;
	    },
	    hasOneDate: function () {
	      if (this.start() || this.end()) {
	        return true;
	      }

	      return false;
	    },
	    getHorizontalBoundsForDates: function(scale, absolute_beginning, start, end, milestone) {
	      var timeline = this.timeline;

	      if (!start && !end) {
	        return {
	          'x': 0,
	          'w': 0,
	          'end': function () {
	            return this.x + this.w;
	          }
	        };
	      } else if (!end) {
	        end = start.clone().addDays(2);
	      } else if (!start) {
	        start = end.clone().addDays(-2);
	      }

	      // calculate graphical representation. the +1 makes sense when
	      // considering equal start and end date.
	      var x = timeline.getDaysBetween(absolute_beginning, start) * scale.day;
	      var w = (timeline.getDaysBetween(start, end) + 1) * scale.day;

	      if (milestone === true) {
	        //we are in the middle of the diamond so we have to move half the size to the left
	        x -= ((scale.height - 1) / 2);
	        //and add the diamonds corners to the width.
	        w += scale.height - 1;
	      }

	      return {
	        'x': x,
	        'w': w,
	        'end': function () {
	          return this.x + this.w;
	        }
	      };
	    },
	    getUrl: function() {
	      return PathHelper.staticBase + "/work_packages/" + this.id;
	    },
	    getColor: function () {
	      // if there is a color for this planning element type, use it.
	      // use it also for planning elements w/ children. if there are
	      // children but no planning element type, use the default color
	      // for planning element parents. if there is no planning element
	      // type and there are no children, use a default color.
	      var pet = this.getPlanningElementType();
	      var paper = this.timeline.getPaper();
	      var color;

	      if (pet && pet.color) {
	        color = pet.color.hexcode;
	      } else if (this.hasChildren()) {
	        color = Timeline.DEFAULT_PARENT_COLOR;
	      } else {
	        color = Timeline.DEFAULT_COLOR;
	      }

	      if (!this.hasBothDates()) {
	        if (this.hasStartDate()) {
	          var noEndDateGradient = jQuery('#noEndDateGradient_' + pet.id);
	          if (noEndDateGradient.length == 0) {
	            noEndDateGradient = paper.gradient(
	                'noEndDateGradient_' + pet.id,
	                [
	                  {offset: '5%', 'stop-color': color, 'stop-opacity': '1'},
	                  {offset: '95%', 'stop-color': '#ffffff', 'stop-opacity': '0'}
	                ]
	            );
	          }

	          color = 'url(#noEndDateGradient_' + pet.id + ')';
	        } else {
	          var noStartDateGradient = jQuery('#noStartDateGradient_' + pet.id);
	          if (noStartDateGradient.length == 0) {
	            noStartDateGradient = paper.gradient(
	                'noStartDateGradient_' + pet.id,
	                [
	                  {offset: '5%', 'stop-color': '#ffffff', 'stop-opacity': '0'},
	                  {offset:'95%', 'stop-color': color, 'stop-opacity': '1'}
	                ]
	            );
	          }

	          color = 'url(#noStartDateGradient_' + pet.id + ')';
	        }
	      }

	      return color;
	    },
	    render: function(node, in_aggregation, label_space) {
	      var timeline = this.timeline;
	      var paper = timeline.getPaper();
	      var scale = timeline.getScale();
	      var beginning = timeline.getBeginning();
	      var elements = [];
	      var pet = this.getPlanningElementType();
	      var self = this;
	      var color, text, x, y, textColor;
	      var bounds = this.getHorizontalBounds(scale, beginning);
	      var left = bounds.x;
	      var width = bounds.w;
	      var alternate_bounds = this.getAlternateHorizontalBounds(scale, beginning);
	      var alternate_left = alternate_bounds.x;
	      var alternate_width = alternate_bounds.w;
	      var hover_left = left;
	      var hover_width = width;
	      var element = node.getDOMElement();
	      var captionElement;
	      var label;
	      var deleted = true && this.is_deleted;
	      var comparison_offset = deleted ? 0 : Timeline.DEFAULT_COMPARISON_OFFSET;
	      var strokeColor = Timeline.DEFAULT_STROKE_COLOR;
	      var historical = this.historical();

	      var has_both_dates = this.hasBothDates();
	      var has_one_date = this.hasOneDate();
	      var has_start_date = this.hasStartDate();

	      if (in_aggregation && label_space !== undefined) {
	        hover_left = label_space.x + Timeline.HOVER_THRESHOLD;
	        hover_width = label_space.w - 2 * Timeline.HOVER_THRESHOLD;
	      }

	      if (in_aggregation && !has_both_dates) {
	        return;
	      }

	      var has_alternative = this.hasAlternateDates();
	      var could_have_been_milestone = (this.alternate_start === this.alternate_end);

	      var height, top;

	      if (historical.hasOneDate()) {
	        // ╭─────────────────────────────────────────────────────────╮
	        // │ Rendering of historical data. Use default planning      │
	        // │ element appearance, only use milestones when the        │
	        // │ element is currently a milestone and the historical     │
	        // │ data has equal start and end dates.                     │
	        // ╰─────────────────────────────────────────────────────────╯
	        color = this.historical().getColor();

	        if (!historical.hasBothDates()) {
	          strokeColor = 'none';
	        }

	        //TODO: fix for work units w/o start/end date
	        if (!in_aggregation && has_alternative) {
	          if (pet && pet.is_milestone && could_have_been_milestone) {

	            height = scale.height - 1; //6px makes the element a little smaller.
	            top = (timeline.getRelativeVerticalOffset(element) + timeline.getRelativeVerticalBottomOffset(element)) / 2 - height / 2;

	            paper.path(
	              timeline.psub('M#{x} #{y}h#{w}l#{d} #{d}l-#{d} #{d}H#{x}l-#{d} -#{d}l#{d} -#{d}Z', {
	                x: alternate_left + scale.day / 2,
	                y: top - comparison_offset,
	                w: alternate_width - scale.day,
	                d: height / 2 // diamond corner width.
	              })
	            ).attr({
	              'fill': color, // Timeline.DEFAULT_FILL_COLOR_IN_COMPARISONS,
	              'opacity': 0.33,
	              'stroke': Timeline.DEFAULT_STROKE_COLOR_IN_COMPARISONS,
	              'stroke-dasharray': Timeline.DEFAULT_STROKE_DASHARRAY_IN_COMPARISONS
	            });

	          } else {

	            height = scale.height - 6; //6px makes the element a little smaller.
	            top = (timeline.getRelativeVerticalOffset(element) + timeline.getRelativeVerticalBottomOffset(element)) / 2 - height / 2;

	            paper.rect(
	              alternate_left,
	              top - comparison_offset, // 8px margin-top
	              alternate_width,
	              height,           // 8px  margin-bottom
	              4                           // round corners
	            ).attr({
	              'fill': color, // Timeline.DEFAULT_FILL_COLOR_IN_COMPARISONS,
	              'opacity': 0.33,
	              'stroke': Timeline.DEFAULT_STROKE_COLOR_IN_COMPARISONS,
	              'stroke-dasharray': Timeline.DEFAULT_STROKE_DASHARRAY_IN_COMPARISONS
	            });
	          }
	        }
	      }

	      // only render planning elements that have
	      // either a start or an end date.
	      if (has_one_date) {
	        color = this.getColor();

	        if (!has_both_dates) {
	          strokeColor = 'none';
	        }

	        // ╭─────────────────────────────────────────────────────────╮
	        // │ Rendering of actual elements, as milestones, with teeth │
	        // │ and the generic, dafault planning element w/ round      │
	        // │ edges.                                                  │
	        // ╰─────────────────────────────────────────────────────────╯

	        // in_aggregation defines whether the planning element should be
	        // renderd as a generic planning element regardless of children.

	        if (!deleted && pet && pet.is_milestone) {

	        } else if (!deleted && !in_aggregation && this.hasChildren() && node.isExpanded()) {

	          // with teeth (has children).

	          paper.path(
	            timeline.psub('M#{x} #{y}m#{d} #{d}l-#{d} #{d}l-#{d} -#{d}V#{y}H#{x}h#{w}h#{d}v#{d}l-#{d} #{d}l-#{d} -#{d}z' + /* outer path */
	                          'm0 0v-#{d}m#{w} 0m-#{d} 0m-#{d} 0v#{d}' /* inner vertical lines */, {
	              x: left,
	              y: timeline.getRelativeVerticalOffset(element) + 8,
	              d: scale.height + 2 - 16,
	              w: width
	            })
	          ).attr({
	            'fill': color,
	            'stroke': strokeColor
	          });
	        } else if (!deleted) {

	          // generic.

	          height = scale.height - 6; //6px makes the element a little smaller.
	          top = (timeline.getRelativeVerticalOffset(element) + timeline.getRelativeVerticalBottomOffset(element)) / 2 - height / 2;

	          paper.rect(
	            left,
	            top,
	            width,
	            height,
	            4                           // round corners
	          ).attr({
	            'fill': color,
	            'stroke': strokeColor
	          });
	        }
	      }
	    },
	    renderForeground: function (node, in_aggregation, label_space) {
	      var timeline = this.timeline;
	      var paper = timeline.getPaper();
	      var scale = timeline.getScale();
	      var beginning = timeline.getBeginning();
	      var elements = [];
	      var pet = this.getPlanningElementType();
	      var self = this;
	      var color, text, x, y, textColor;
	      var bounds = this.getHorizontalBounds(scale, beginning);
	      var left = bounds.x;
	      var width = bounds.w;
	      var alternate_bounds = this.getAlternateHorizontalBounds(scale, beginning);
	      var alternate_left = alternate_bounds.x;
	      var alternate_width = alternate_bounds.w;
	      var hover_left = left;
	      var hover_width = width;
	      var element = node.getDOMElement();
	      var captionElement;
	      var label, textWidth;
	      var deleted = true && this.is_deleted;
	      var comparison_offset = deleted ? 0 : Timeline.DEFAULT_COMPARISON_OFFSET;

	      var has_both_dates = this.hasBothDates();
	      var has_one_date = this.hasOneDate();
	      var has_start_date = this.hasStartDate();

	      if (in_aggregation && label_space !== undefined) {
	        hover_left = label_space.x + Timeline.HOVER_THRESHOLD;
	        hover_width = label_space.w - 2 * Timeline.HOVER_THRESHOLD;
	      }

	      var has_alternative = this.hasAlternateDates();
	      var could_have_been_milestone = (this.alternate_start === this.alternate_end);

	      var height, top;

	      // if there is a color for this planning element type, use it.
	      // use it also for planning elements w/ children. if there are
	      // children but no planning element type, use the default color
	      // for planning element parents. if there is no planning element
	      // type and there are no children, use a default color.

	      if (pet && pet.color) {
	        color = pet.color.hexcode;
	      } else if (this.hasChildren()) {
	        color = Timeline.DEFAULT_PARENT_COLOR;
	      } else {
	        color = Timeline.DEFAULT_COLOR;
	      }

	      if (!deleted && pet && pet.is_milestone) {

	        // milestones.
	        height = scale.height - 1; //6px makes the element a little smaller.
	        top = (timeline.getRelativeVerticalOffset(element) + timeline.getRelativeVerticalBottomOffset(element)) / 2 - height / 2;

	        paper.path(
	          timeline.psub('M#{x} #{y}h#{w}l#{d} #{d}l-#{d} #{d}H#{x}l-#{d} -#{d}l#{d} -#{d}Z', {
	            x: left + scale.day / 2,
	            y: top,
	            w: width - scale.day,
	            d: height / 2 // diamond corner width.
	          })
	        ).attr({
	          'fill': color,
	          'stroke': Timeline.DEFAULT_STROKE_COLOR
	        });

	      }

	      // ╭─────────────────────────────────────────────────────────╮
	      // │ Labels for rendered elements, either in aggregation     │
	      // │ or out of aggregation, inside of elements or outside.   │
	      // ╰─────────────────────────────────────────────────────────╯

	      height = scale.height - 6; //6px makes the element a little smaller.
	      top = (timeline.getRelativeVerticalOffset(element) + timeline.getRelativeVerticalBottomOffset(element)) / 2 - height / 2;

	      y = top + 11;

	      if (has_one_date) {
	        if (!in_aggregation) {

	          // text rendering in planning elements outside of aggregations
	          label = timeline.paper.text(0, -5, this.subject);
	          label.attr({
	            'font-size': 12
	          });

	          textWidth = label.getBBox().width;

	          // if this is an expanded planning element w/ children, or if
	          // the text would not fit:
	          if (this.hasChildren() && node.isExpanded() ||
	              textWidth > width - Timeline.PE_TEXT_INSIDE_PADDING) {

	            // text outside planning element
	            x = left + width + Timeline.PE_TEXT_OUTSIDE_PADDING;

	            if (this.hasChildren()) {
	              x += Timeline.PE_TEXT_ADDITIONAL_OUTSIDE_PADDING_WHEN_EXPANDED_WITH_CHILDREN;
	            }

	            if (pet && pet.is_milestone) {
	              x += Timeline.PE_TEXT_ADDITIONAL_OUTSIDE_PADDING_WHEN_MILESTONE;
	            }

	            textColor = Timeline.PE_DEFAULT_TEXT_COLOR;

	            // place a white rect below the label.
	            captionElement = timeline.paper.rect(
	              x-3,
	              y-12,
	              textWidth + 6,
	              15,
	              4.5
	            ).attr({
	              'fill': '#ffffff',
	              'opacity': 0.5,
	              'stroke': 'none'
	            });

	            captionElement.insertAfter(label);

	          } else if (!has_both_dates) {
	            // text inside planning element
	            if (has_start_date) {
	              x = left + 4;                                // left of the WU
	            } else {
	              x = left + width -                           // right of the WU
	                textWidth -   // text width
	                4;                                         // small border from the right
	            }

	            textColor = timeline.getLuminanceFor(color) > Timeline.PE_LUMINANCE_THRESHOLD ?
	              Timeline.PE_DARK_TEXT_COLOR : Timeline.PE_LIGHT_TEXT_COLOR;
	          } else {

	            // text inside planning element
	            x = left + width * 0.5 +                             // center of the planning element
	                textWidth * (-0.5); // half of text width

	            textColor = timeline.getLuminanceFor(color) > Timeline.PE_LUMINANCE_THRESHOLD ?
	              Timeline.PE_DARK_TEXT_COLOR : Timeline.PE_LIGHT_TEXT_COLOR;
	          }

	          label.attr({
	            'fill': textColor,
	            'text-anchor': "start",
	            'stroke': 'none'
	          });

	          // position label
	          label.translate(x,y);

	        } else if (label_space.w > Timeline.PE_TEXT_AGGREGATED_LABEL_WIDTH_THRESHOLD) {
	          // Elements in aggregation
	          textColor = timeline.getLuminanceFor(color) > Timeline.PE_LUMINANCE_THRESHOLD ?
	                      Timeline.PE_DARK_TEXT_COLOR : Timeline.PE_LIGHT_TEXT_COLOR;

	          text = this.subject;
	          label = timeline.paper.text(0, 0, text);
	          label.attr({
	            'font-size': 12,
	            'text-anchor': 'middle',
	            'fill': textColor,
	            'stroke': 'none'
	          });

	          x = label_space.x + label_space.w/2;

	          // fit text to label space
	          while (text.length > 0 && label.getBBox().width + Timeline.PE_TEXT_INSIDE_PADDING / 2 > label_space.w) {
	            text = text.slice(0, -1);
	            label.textContent = text;
	          }

	          label.translate(x, y);
	        }
	      }

	      // ╭─────────────────────────────────────────────────────────╮
	      // │ Defining hover areas that will produce tooltips when    │
	      // │ mouse is over them. This is last to include text drawn  │
	      // │ over planning elements.                                 │
	      // ╰─────────────────────────────────────────────────────────╯

	      height = scale.height - 6; //6px makes the element a little smaller.
	      top = (timeline.getRelativeVerticalOffset(element) + timeline.getRelativeVerticalBottomOffset(element)) / 2 - height / 2;

	      elements.push(paper.rect(
	        hover_left - Timeline.HOVER_THRESHOLD,
	        top - Timeline.HOVER_THRESHOLD, // 8px margin-top
	        hover_width + 2 * Timeline.HOVER_THRESHOLD,
	        height + 2 * Timeline.HOVER_THRESHOLD,           // 8px margin-bottom
	        4                           // round corners
	      ).attr({
	        'fill': '#ffffff',
	        'opacity': 0
	      }));

	      jQuery.each(elements, function(i, e) {
	        timeline.addHoverHandler(node, e);
	        //self.addElement(e);
	      });
	    },

	    renderVertical: function(node) {
	      var timeline = this.timeline;
	      var paper = timeline.getPaper();
	      var scale = timeline.getScale();
	      var beginning = timeline.getBeginning();

	      var pet = this.getPlanningElementType();
	      var self = this;
	      var color;
	      var bounds = this.getHorizontalBounds(scale, beginning);

	      var deleted = true && this.is_deleted;

	      var left = bounds.x;
	      var width = bounds.w;

	      var element = node.getDOMElement();

	      var has_both_dates = this.hasBothDates();
	      var has_one_date = this.hasOneDate();
	      var has_start_date = this.hasStartDate();

	      var hoverElement;

	      color = this.getColor();

	      if (has_one_date) {
	        if (!deleted && pet && pet.is_milestone) {
	          timeline.paper.path(
	            timeline.psub("M#{left} #{top}L#{left} #{height}", {
	              'left': left + scale.day / 2,
	              'top': timeline.decoHeight(),
	              'height': timeline.getMeasuredHeight()
	            })
	          ).attr({
	            'stroke': color,
	            'stroke-width': 2,
	            'stroke-dasharray': '- '
	          });

	          hoverElement = paper.rect(
	            left + scale.day / 2 - 2 * Timeline.HOVER_THRESHOLD,
	            timeline.decoHeight(), // 8px margin-top
	            4 * Timeline.HOVER_THRESHOLD,
	            timeline.getMeasuredHeight()           // 8px margin-bottom
	          ).attr({
	            'fill': '#ffffff',
	            'opacity': 0
	          });

	          timeline.addHoverHandler(node, hoverElement);
	        } else if (!deleted) {
	          paper.rect(
	            left,
	            timeline.decoHeight(),
	            width,
	            timeline.getMeasuredHeight()
	          ).attr({
	            'fill': color,
	            'stroke': Timeline.DEFAULT_STROKE_COLOR,
	            'opacity': 0.2
	          });

	          hoverElement = paper.rect(
	            left - Timeline.HOVER_THRESHOLD,
	            timeline.decoHeight(), // 8px margin-top
	            width + 2 * Timeline.HOVER_THRESHOLD,
	            timeline.getMeasuredHeight()           // 8px margin-bottom
	          ).attr({
	            'fill': '#ffffff',
	            'opacity': 0
	          });

	          timeline.addHoverHandler(node, hoverElement);
	          //self.addElement(hoverElement);
	        }
	      }
	    },
	    addElement: function(e) {
	      if (!this.elements) {
	        this.elements = [];
	      }
	      this.elements.push(e);
	      return this;
	    },
	    getElements: function() {
	      if (!this.elements) {
	        this.elements = [];
	      }
	      return this.elements;
	    }
	  };

	  return PlanningElement;
	};


/***/ },
/* 103 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {

	  ProjectAssociation = {
	    identifier: 'project_associations',
	    all: function(timeline) {
	      // collect all project associations.
	      var r = timeline.project_associations;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    },
	    getOrigin: function() {
	      return this.origin;
	    },
	    getTarget: function() {
	      return this.project;
	    },
	    getOther: function(project) {
	      var origin = this.getOrigin();
	      var target = this.getTarget();
	      if (project.id === origin.id) {
	        return target;
	      } else if (project.id === target.id) {
	        return origin;
	      }
	      return null;
	    },
	    getInvolvedProjects: function() {
	      return [this.getOrigin(), this.getTarget()];
	    },
	    involves: function(project) {
	      var inv = this.getInvolvedProjects();

	      return (
	        project !== undefined &&
	        inv[0] !== undefined &&
	        inv[1] !== undefined &&
	        (project.id === inv[0].id || project.id === inv[1].id)
	      );
	    }
	  };

	  return ProjectAssociation;
	};


/***/ },
/* 104 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {

	  ProjectType = {
	    identifier: 'project_types',
	    all: function(timeline) {
	      // collect all project types
	      var r = timeline.project_types;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    }
	  };

	  return ProjectType;
	};


/***/ },
/* 105 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function(PathHelper) {

	  Project = {
	    objectType: 'Project',
	    identifier: 'projects',

	    is: function(t) {
	      if (t === undefined) return false;
	      return Project.identifier === t.identifier;
	    },
	    hide: function () {
	      var hidden =  this.hiddenForEmpty() ||
	                    this.hiddenForTimeFrame();

	      this.hide = function () { return hidden; };

	      return hidden;
	    },
	    hiddenForEmpty: function () {
	      if (this.timeline.options.exclude_empty !== 'yes') {
	        return false;
	      }

	      var hidden = true;
	      // iterates over projects for second level grouping adjustments.
	      // TODO simply hiding parents might be sufficient.
	      jQuery.each(this.getPlanningElements(), function (i, child) {
	        if (!child.filteredOut()) {
	          hidden = false;
	        }
	      });

	      return hidden;
	    },
	    hiddenForTimeFrame: function () {
	      var types = this.timeline.options.planning_element_time_types;
	      if (!types || types.length === 0) {
	        return false;
	      }

	      var hidden = true;

	      // we need to look at every element
	      jQuery.each(this.getPlanningElements(), function (i, child) {
	        // if hidden is already false, do not calculate
	        // otherwise, we show this project current element is a planning element (redundant?)
	        // and it is inside our timeframe
	        // and it has got the planning element type we want
	        if (hidden &&
	              child.is(PlanningElement) &&
	              child.inTimeFrame() &&
	              Timeline.idInArray(types, child.getPlanningElementType())) {
	                hidden = false;
	        }
	      });

	      return hidden;
	    },
	    filteredOut: function() {
	      var filtered = this.filteredOutForExclusionOfOwnPlanningElements() ||
	                     this.filteredOutForExclusionOfReporters() ||
	                     this.filteredOutForTypes() ||
	                     this.filteredOutForStatus() ||
	                     this.filteredOutForSubproject() ||
	                     this.filteredOutForResponsibles();

	      this.filteredOut = function () { return filtered; };

	      return filtered;
	    },
	    filteredOutForExclusionOfOwnPlanningElements: function () {
	      return (this.timeline.options.exclude_own_planning_elements === 'yes' &&
	              (this.id === this.timeline.options.project_id ||
	               this.identifier === this.timeline.options.project_id));
	    },
	    filteredOutForExclusionOfReporters: function() {
	      return (this.timeline.options.exclude_reporters === 'yes' &&
	              !(this.id === this.timeline.options.project_id ||
	                this.identifier === this.timeline.options.project_id));
	    },
	    filteredOutForSubproject: function() {
	      var i, j, p;
	      var allowedParents = this.timeline.options.parents;

	      if ((allowedParents === undefined) ||
	          (allowedParents.length === 0)) {

	        // if there is no filter, do not filter out anything.
	        return false;

	      } else {

	        // for every id selected in the filter
	        for (i = 0; i < allowedParents.length; i++) {

	          j = Timeline.pnum(allowedParents[i]);

	          if (j === -1) {
	            // if the current selection is the (none) selection, we only need to
	            // check the project's immediate parent. If it has none, it should
	            // be shown, thus *not* filtered.
	            if (this.parent === undefined) {
	              return false;
	            }
	          }
	          else {
	            // if this project or one of it's ancestors has an id that is
	            // equal to the current selection, it should be shown, thus *not*
	            // filtered.
	            p = this;
	            while (p !== undefined) {
	              if (p.id === j) {
	                return false;
	              } else {
	                p = p.parent;
	              }
	            }
	          }

	        }

	        // everything that was not decided to be *not* filtered until now should
	        // be filtered.
	        return true;
	      }
	    },
	    filteredOutForResponsibles: function() {
	      return Timeline.filterOutBasedOnArray(
	        this.timeline.options.project_responsibles,
	        this.getResponsible()
	      );
	    },
	    filteredOutForStatus: function() {
	      return Timeline.filterOutBasedOnArray(
	        this.timeline.options.project_status,
	        this.getProjectStatus()
	      );
	    },
	    filteredOutForTypes: function() {
	      return Timeline.filterOutBasedOnArray(this.timeline.options.project_types,
	                                            this.getProjectType());
	    },
	    getPlanningElementType: function() {
	      return undefined;
	    },
	    getPlanningElements: function() {
	      if (!this.planning_elements) {
	        return [];
	      }
	      if (!this.sorted_pes) {
	        this.sort('planning_elements');
	        this.sorted_pes = true;
	      }
	      return this.planning_elements;
	    },
	    getFirstLevelGroupingData: function() {
	      return this.timeline.getGroupForProject(this);
	    },
	    getFirstLevelGrouping: function() {
	      return this.timeline.getGroupForProject(this).number;
	    },
	    getFirstLevelGroupingName: function() {
	      return this.timeline.getGroupForProject(this).name;
	    },
	    sort: function(field) {
	      var timeline = this.timeline;
	      this[field] = this[field].sort(function(a, b) {

	        // order by inverse grouping, date, name, id
	        var dc = 0, nc = 0;
	        var as = a.start(), bs = b.start();
	        var ag, bg;
	        if (a.is(Project) && b.is(Project)) {
	          var dataAGrouping = a.getFirstLevelGroupingData();
	          var dataBGrouping = b.getFirstLevelGroupingData();

	          // order first level grouping.
	          if (parseInt(dataAGrouping.id, 10) !== parseInt(dataBGrouping.id, 10)) {
	            /** other is always at bottom */
	            if (parseInt(dataAGrouping.id, 10) === 0) {
	              return 1;
	            } else if (parseInt(dataBGrouping.id, 10) === 0) {
	              return -1;
	            }

	            if (parseInt(timeline.options.grouping_one_sort, 10) === 1) {
	              ag = dataAGrouping.number;
	              bg = dataBGrouping.number;
	            } else {
	              ag = dataAGrouping.p.name;
	              bg = dataBGrouping.p.name;
	            }

	            if (ag > bg) {
	              return 1;
	            }

	            return -1;
	          }
	        }

	        var datesEqual = as && bs && as.equals(bs);

	        if ((!as || datesEqual) && typeof a.end === "function") {
	          as = a.end();
	        }
	        if ((!bs || datesEqual) && typeof b.end === "function") {
	          bs = b.end();
	        }

	        if (as) {
	          if (bs) {
	            dc = as.compareTo(bs);
	          } else {
	            dc = 1;
	          }
	        } else if (bs) {
	          dc = -1;
	        }

	        var identifier_methods = [a, b].map(function(e) { return e.hasOwnProperty("subject") ? "subject" : "name"; });

	        if (!a.identifierLower) {
	          a.identifierLower = a[identifier_methods[0]].toLowerCase();
	        }

	        if (!b.identifierLower) {
	          b.identifierLower = b[identifier_methods[1]].toLowerCase();
	        }

	        if (a.identifierLower < b.identifierLower) {
	          nc = -1;
	        }
	        if (a.identifierLower > b.identifierLower) {
	          nc = +1;
	        }

	        if (a.hasSecondLevelGroupingAdjustment && b.hasSecondLevelGroupingAdjustment) {
	          if (parseInt(timeline.options.grouping_two_sort, 10) === 1) {
	            if (dc !== 0) {
	              return dc;
	            }

	            if (nc !== 0) {
	              return nc;
	            }
	          } else if (parseInt(timeline.options.grouping_two_sort, 10) === 2) {
	            if (nc !== 0) {
	              return nc;
	            }

	            if (dc !== 0) {
	              return dc;
	            }
	          }
	        }

	        if (parseInt(timeline.options.project_sort, 10) === 1 && a.is(Project) && b.is(Project)) {
	          if (nc !== 0) {
	            return nc;
	          }

	          if (dc !== 0) {
	            return dc;
	          }
	        } else {
	          if (dc !== 0) {
	            return dc;
	          }

	          if (nc !== 0) {
	            return nc;
	          }
	        }

	        if (a.id > b.id) {
	          return +1;
	        } else if (a.id < b.id) {
	          return -1;
	        }
	        return 0;
	      });
	      return this;
	    },
	    start: function() {
	      var i, current, pes = this.getPlanningElements();
	      for (i = 0; i < pes.length; i += 1) {
	        current = pes[i];
	        if (current.start()) {
	          return current.start();
	        } else if (current.end()) {
	          return current.end();
	        }
	      }

	      return undefined;
	    },
	    getAttribute: function (val) {
	      if (typeof this[val] === "function") {
	        return this[val]();
	      }

	      return this[val];
	    },
	    does_historical_differ: function () {
	      return false;
	    },
	    getReporters: function() {
	      if (!this.reporters) {
	        return [];
	      }
	      if (!this.sorted_reps) {
	        this.sort('reporters');
	        this.sorted_reps = true;
	      }
	      return this.reporters;
	    },
	    addReporter: function(rep) {
	      var reps = this.getReporters();
	      if (jQuery.inArray(rep, reps) === -1) {
	        reps.push(rep);
	        this.reporters = reps;
	        this.sorted_reps = false;
	        return true;
	      }
	      return false;
	    },
	    removeReporter: function(rep) {
	      // this fails silently, when reporter to be removed is not in the list reporters.
	      var new_reporters = jQuery.grep(this.getReporters(), function(e, i) {
	          return e.id !== rep.id;
	        });
	      this.reporters = new_reporters;
	      // we are not resetting sorted_reps, since removal does not affect sortation.
	    },
	    getProjectStatus: function() {
	      return this.via_reporting !== undefined ? this.via_reporting.getStatus() : null;
	    },
	    getTypeName: function () {
	      var pt = this.getProjectType();
	      if (pt) {
	        return pt.name;
	      }
	    },
	    getStatusName: function () {
	      var status = this.getProjectStatus();
	      if (status) {
	        return status.name;
	      }
	    },
	    getProjectType: function() {
	      return (this.project_type !== undefined) ? this.project_type : null;
	    },
	    getResponsible: function() {
	      if (this.responsible !== undefined) {
	        return this.responsible;
	      } else if (this.responsible_id !== undefined && this.responsible_id !== null) {
	        return { "id": this.responsible_id };
	      } else {
	        return null;
	      }
	    },
	    getResponsibleName: function()  {
	      if (this.responsible && this.responsible.name) {
	        return this.responsible.name;
	      }
	    },
	    getAssignedName: function () {
	      return;
	    },
	    getSubElements: function() {
	      var result = [];

	      jQuery.each(this.getPlanningElements(), function(i, e) {
	        // filtering of planning elements now happens in iterateWithChildren
	        result.push(e);
	      });

	      jQuery.each(this.getReporters(), function(i, e) {
	        // filtering of projects still happens here.
	        if (!e.filteredOut()) {
	          result.push(e);
	        }
	      });

	      return result;
	    },
	    getParent: function() {
	      var parent;
	      if(!this.parent) return null;
	      parent = this.timeline.getProject(this.parent.id);

	      this.parent = parent;
	      this.getParent = function() { return this.parent; };

	      return this.getParent();
	    },
	    getUrl: function() {
	      var url = PathHelper.staticProjectPath(this.identifier);

	      url += "/timelines";

	      return url;
	    },



	    render: function(node) {
	      if (node.isExpanded()) {
	        return false;
	      }

	      var timeline = this.timeline;
	      var scale = timeline.getScale();
	      var beginning = timeline.getBeginning();
	      var milestones, others;

	      // draw all planning elements that should be seen in an
	      // aggregation. limited to one level.

	      var pes = jQuery.grep(this.getPlanningElements(), function(e) {
	        return e.start() !== undefined &&
	               e.end() !== undefined &&
	               e.planning_element_type.in_aggregation;
	      });

	      var dummy_node = {
	        getDOMElement: function() {
	          return node.getDOMElement();
	        },
	        isExpanded: function() {
	          return false;
	        }
	      };

	      var is_milestone = function(e, i) {
	        var pet = e.getPlanningElementType();
	        return pet && pet.is_milestone;
	      };

	      // The label_spaces object will contain available spaces per
	      // planning element. There may be many.
	      var label_spaces = {};

	      var render = function(i, e) {
	        var node = jQuery.extend({}, dummy_node, {
	          getData: function() { return e; }
	        });
	        e.render(node, true, label_spaces[i]);
	        e.renderForeground(node, true, label_spaces[i]);
	      };

	      var visible_in_aggregation = function(e, i) {
	        var pet = e.getPlanningElementType();
	        return !e.filteredOut() && pet && pet.in_aggregation;
	      };

	      // divide into milestones and others.
	      milestones = jQuery.grep(pes, is_milestone);
	      others = jQuery.grep(pes, is_milestone, true);

	      // join others with milestones, and remove all that should be filtered.
	      pes = jQuery.grep(others.concat(milestones), visible_in_aggregation);

	      // Outer loop to calculate best label space for each planning
	      // element. Here, we initialize possible spaces by registering the
	      // whole element as the single space for a label.
	      jQuery.each(pes, function(i, e) {

	        var b = e.getHorizontalBounds(scale, beginning);
	        label_spaces[i] = [b];

	        // find all pes above the one we're traversing.
	        var passed_self = false;
	        var pes_to_traverse = jQuery.grep(pes, function(f) {
	          return passed_self || (e === f) ? passed_self = true : false;
	        });

	        // Now, for every other element , shorten the available spaces or splice them.
	        jQuery.each(pes_to_traverse, function(j, f) {
	          var k, cb = f.getHorizontalBounds(scale, beginning, is_milestone(f));

	          // do not shorten if I am looking at myself.
	          if (e === f) {
	            return;
	          }

	          // do not shorten if current element is not a milestone and
	          // begins before me.
	          if (!is_milestone(f) && cb.x < b.x) {
	            return;
	          }

	          // do not shorten if both are milestones and current begins before me.
	          if (is_milestone(f) && is_milestone(e) && cb.x < b.x) {
	            return;
	          }

	          // do not shorten if I am a milestone and current element is not.
	          if (is_milestone(e) && !is_milestone(f)) {
	            return;
	          }

	          // iterate over actual spaces left for shortening or splicing.
	          var spaces = label_spaces[i];
	          for (k = 0; k < spaces.length; k++) {
	            var space = spaces[k];

	            // b  eeeeeeee
	            //cb       fffffffffff

	            // current element lies after me,
	            var rightSideOverlap = cb.x > space.x &&
	                    // but I do end after its start.
	                    cb.x < space.end();

	            // b           eeeeeeeeeee
	            //cb    ffffffffffff

	            // current element lies before me
	            var leftSideOverlap = cb.end() < space.end() &&
	                      // but I start before current elements end.
	                      cb.end() > space.x;

	            if ((cb.x <= space.x && cb.end() >= space.end()) &&
	                (label_spaces[i].length > 0)) {
	              if (label_spaces[i].length === 1) {
	                label_spaces[i][0].w = 0;
	              } else {
	                label_spaces[i].splice(k, 1);
	              }
	            }

	            //  fffffffeeeeeeeeeeeeffffffffff

	            if (rightSideOverlap && leftSideOverlap) {

	              // if current planning element is completely enclosed
	              // in the current space, split the space into two, and
	              // reiterate. splitting happens by splicing the array at
	              // position i.
	              label_spaces[i].splice(k, 1,
	                {'x': space.x,
	                 'w': cb.x - space.x, end: space.end},
	                {'x': cb.end(),
	                 'w': space.end() - cb.end(), end: space.end});

	            } else if (rightSideOverlap) {

	              // if current planning element (f) starts before the one
	              // current space ends, adjust the width of the space.
	              space.w = Math.min(space.end(), cb.x) - space.x;

	            } else if (leftSideOverlap) {

	              // if current planning element (f) ends after the current
	              // space starts, adjust the beginning of the space.
	              // we also need to modify the width because we want to
	              // keep the end at the same position.
	              var oldStart = space.x;
	              space.x = Math.max(space.x, cb.end());
	              space.w -= (space.x - oldStart);
	            }
	          }
	        });

	        // after all possible label spaces for the given element are
	        // evaluated, select the widest.
	        b = label_spaces[i].shift();
	        jQuery.each(label_spaces[i], function(i, e) {
	          if (e.w > b.w) {
	            b = e;
	          }
	        });
	        label_spaces[i] = b;
	      });

	      // jQuery.each(others, render);
	      // jQuery.each(milestones, render);
	      jQuery.each(pes, render);
	    },
	    getElements: function() {
	      return [];
	    },
	    all: function(timeline) {
	      // collect all planning elements
	      var r = timeline.projects;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    }
	  };

	  return Project;
	};


/***/ },
/* 106 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {

	  Reporting = {
	    identifier: 'reportings',

	    all: function(timeline) {
	      // collect all reportings.
	      var r = timeline.reportings;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    },
	    getProject: function() {
	      return (this.project !== undefined) ? this.project : null;
	    },
	    getProjectId: function () {
	      return this.project.id;
	    },
	    getReportingToProject : function () {
	      return (this.reporting_to_project !== undefined) ? this.reporting_to_project : null;
	    },
	    getReportingToProjectId : function () {
	      return this.reporting_to_project.id;
	    },
	    getStatus: function() {
	      return (this.reported_project_status !== undefined) ? this.reported_project_status : null;
	    }
	  };

	  return Reporting;
	};


/***/ },
/* 107 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {
	  Status = {
	    identifier: 'statuses',
	    all: function(timeline) {
	      // collect all reportings.
	      var r = timeline.statuses;
	      var result = [];
	      for (var key in r) {
	        if (r.hasOwnProperty(key)) {
	          result.push(r[key]);
	        }
	      }
	      return result;
	    }
	  };

	  return Status;
	};


/***/ },
/* 108 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++


	module.exports = function(Constants, TreeNode, UI, Color, HistoricalPlanningElement, PlanningElement, PlanningElementType, ProjectType, Project, ProjectAssociation, Reporting, CustomField, CustomFieldHelper) {

	  var getInitialValue = function(timelineOptions, property) {
	    var value = timelineOptions[property];

	    if (value && value >= 0) {
	      return value;
	    } else {
	      return 0;
	    }
	  };

	  var getInitialOutlineExpansion = function(timelineOptions) {
	    return getInitialValue(timelineOptions, 'initial_outline_expansion');
	  };

	  var getInitialZoomFactor = function(timelineOptions) {
	    return getInitialValue(timelineOptions, 'zoom_factor');
	  };

	  Timeline = {};

	  // model mix ins
	  angular.extend(Timeline, Constants);
	  angular.extend(Timeline, UI);

	  //startup
	  angular.extend(Timeline, {
	    instances: [],
	    create: function(id, options) {
	      if (!id) {
	        throw new Error('No timelines id given');
	      }
	      if (!options) {
	        throw new Error('No configuration options given');
	      }
	      this.extendOptions();

	      this.instances = [];

	      var timeline = Object.create(Timeline);

	      // some private fields.
	      timeline.id = id;
	      timeline.options = options;
	      timeline.listeners = [];
	      timeline.data = {};

	      timeline.expansionIndex = parseInt(getInitialOutlineExpansion(options), 10);
	      timeline.zoomIndex = parseInt(getInitialZoomFactor(options), 10);

	      Timeline.instances.push(timeline);
	      return timeline;
	    },
	    extendOptions: function() {
	      this.options = jQuery.extend({}, this.defaults, this.options);

	      if (this.options.username) {
	        this.ajax_defaults.username = this.options.username;
	      }
	      if (this.options.password) {
	        this.ajax_defaults.password = this.options.password;
	      }
	      if (this.options.api_key) {
	        this.ajax_defaults.headers = {
	          'X-ChiliProject-API-Key': this.options.api_key,
	          'X-OpenProject-API-Key':  this.options.api_key,
	          'X-Redmine-API-Key':      this.options.api_key
	        };
	      }
	      // we're hiding the root if there is a grouping.
	      this.options.hide_tree_root = this.isGrouping();
	    },
	    get: function(n) {
	      if (typeof n !== "number") {
	        n = 0;
	      }
	      return this.instances[n];
	    },
	    isInstance: function(n) {
	      return (n === undefined) ?
	        Timeline.instances.indexOf(this) :
	        this === Timeline.get(n);
	    },
	    isGrouping: function() {
	      if ((this.options.grouping_one_enabled === 'yes' &&
	           this.options.grouping_one_selection !== undefined) ||
	          (this.options.grouping_two_enabled === 'yes' &&
	           this.options.grouping_two_selection !== undefined)) {
	        return true;
	      } else {
	        return false;
	      }
	    },
	    isComparing: function() {
	      return ((this.options.comparison !== undefined) &&
	              (this.options.comparison !== 'none'));
	    },
	    comparisonCurrentTime: function() {
	      var value;
	      if (!this.isComparing()) {
	        return undefined;
	      }
	      if (this.options.comparison === 'historical') {
	        value = this.options.compare_to_historical_two;
	      }
	      else {
	        // default is no (undefined) current time, which corresponds to today.
	        return undefined;
	      }
	      return +Date.parse(value) / 1000;
	    },
	    calculateTimeFilter: function () {
	      if (!this.frameSet) {
	        if (this.options.planning_element_time === "absolute") {
	          this.frameStart = Date.parse(this.options.planning_element_time_absolute_one);
	          this.frameEnd = Date.parse(this.options.planning_element_time_absolute_two);
	        } else if (this.options.planning_element_time === "relative") {
	          var startR = parseInt(this.options.planning_element_time_relative_one, 10);
	          var endR = parseInt(this.options.planning_element_time_relative_two, 10);
	          if (!isNaN(startR)) {
	            this.frameStart = Date.now();

	            switch (this.options.planning_element_time_relative_one_unit[0]) {
	              case "0":
	                this.frameStart.add(-1 * startR).days();
	                break;
	              case "1":
	                this.frameStart.add(-1 * startR).weeks();
	                break;
	              case "2":
	                this.frameStart.add(-1 * startR).months();
	                break;
	            }
	          }

	          if (!isNaN(endR)) {
	            this.frameEnd = Date.now();

	            switch (this.options.planning_element_time_relative_two_unit[0]) {
	              case "0":
	                this.frameEnd.add(endR).days();
	                break;
	              case "1":
	                this.frameEnd.add(endR).weeks();
	                break;
	              case "2":
	                this.frameEnd.add(endR).months();
	                break;
	            }
	          }
	        }

	        this.frameSet = true;
	      }
	    },
	    inTimeFilter: function (start, end) {
	      this.calculateTimeFilter();

	      if (!start && !end) {
	        return false;
	      }

	      if (!start) {
	        start = end;
	      }

	      if (!end) {
	        end = start;
	      }

	      if (this.frameStart) {
	        if (start < this.frameStart && end < this.frameStart) {
	          return false;
	        }
	      }

	      if (this.frameEnd) {
	        if (start > this.frameEnd && end > this.frameEnd) {
	          return false;
	        }
	      }

	      return true;
	    },
	    verticalPlanningElementIds: function() {

	      return this.options.vertical_planning_elements ?
	        jQuery.map(
	          this.options.vertical_planning_elements.split(/\,/),
	          function(a) {
	            try {
	              return parseInt(a.match(/\s*\*?(\d*)\s*/)[1], 10);
	            } catch (e) {
	              return;
	            }
	          }
	        ) : [];
	    },
	    comparisonTarget: function() {
	      var result, value, unit;
	      if (!this.isComparing()) {
	        return undefined;
	      }
	      switch (this.options.comparison) {
	        case 'relative':
	          result = new Date();
	          value = Timeline.pnum(this.options.compare_to_relative);
	          unit = Timeline.pnum(this.options.compare_to_relative_unit[0]);
	          switch (unit) {
	            case 0:
	              return Math.floor(result.add(-value).days() / 1000);
	            case 1:
	              return Math.floor(result.add(-value).weeks() / 1000);
	            case 2:
	              return Math.floor(result.add(-value).months() / 1000);
	            default:
	              return this.die(I18n.t('js.timelines.errors.report_comparison'));
	          }
	          break; // to please jslint
	        case 'absolute':
	          value = this.options.compare_to_absolute;
	          break;
	        case 'historical':
	          value = this.options.compare_to_historical_one;
	          break;
	        default:
	          return this.die(I18n.t('js.timelines.errors.report_comparison'));
	      }
	      return +Date.parse(value)/1000;
	    },
	    registerTimelineContainer: function(uiRoot) {
	      this.uiRoot = uiRoot;
	    },
	    checkPrerequisites: function() {
	      if (jQuery === undefined) {
	        throw new Error('jQuery seems to be missing (jQuery is undefined)');
	      } else if ((1).month === undefined) {
	        throw new Error('date.js seems to be missing ((1).month is undefined)');
	      }
	      return true;
	    },
	    getTimelineLoaderOptions: function() {
	      return {
	        api_prefix                    : this.options.api_prefix,
	        url_prefix                    : this.options.url_prefix,
	        project_prefix                : this.options.project_prefix,
	        planning_element_prefix       : this.options.planning_element_prefix,
	        timeline_id                   : this.options.timeline_id,
	        project_id                    : this.options.project_id,
	        project_types                 : this.options.project_types,
	        project_statuses              : this.options.project_status,
	        project_responsibles          : this.options.project_responsibles,
	        project_parents               : this.options.parents,
	        planning_element_types        : this.options.planning_element_types,
	        planning_element_assignee     : this.options.planning_element_assignee,
	        planning_element_responsibles : this.options.planning_element_responsibles,
	        custom_fields                 : this.options.custom_fields,
	        planning_element_status       : this.options.planning_element_status,
	        grouping_one                  : (this.options.grouping_one_enabled ? this.options.grouping_one_selection : undefined),
	        grouping_two                  : (this.options.grouping_two_enabled ? this.options.grouping_two_selection : undefined),
	        ajax_defaults                 : this.ajax_defaults,
	        current_time                  : this.comparisonCurrentTime(),
	        target_time                   : this.comparisonTarget(),
	        include_planning_elements     : this.verticalPlanningElementIds()
	      };
	    },
	    die: function(error, classes) {
	      var message = (typeof error === 'string') ? error :
	        I18n.t('js.timelines.errors.report_epicfail'); // + '<br>' + error.message;
	      classes = classes || 'flash error';

	      this.warn(message, classes);

	      // assume this won't happen anymore.
	      this.onLoadComplete = function() {};

	      if (console && console.log) {
	        console.log(error.stack);
	      }

	      throw error;
	    },
	    warn: function(message, classes, viewCallback) {
	      var root = this.getUiRoot();

	      window.setTimeout(function() {

	        // generate and display the error message.
	        var warning = jQuery('<div class="' + classes + '">' + message + '</div>');
	        root.empty().append(warning);
	        if (viewCallback) {
	          viewCallback();
	        }

	      }, Timeline.DISPLAY_ERROR_DELAY);
	    },
	    onLoadComplete: function() {
	      // everything here should be wrapped in try/catch, to never
	      var tree;
	      try {
	        window.clearTimeout(this.safetyHook);

	        if (this.isGrouping() && this.options.grouping_two_enabled) {
	          this.secondLevelGroupingAdjustments();
	        }

	        tree = this.getLefthandTree();
	        if (tree.containsPlanningElements() || tree.containsProjects()) {
	          this.adjustForPlanningElements();
	          this.completeUI();
	        } else {
	          this.warn(I18n.t('js.label_no_data'), 'warning');
	        }
	      } catch (e) {
	        this.die(e);
	      }
	    },
	    /* This function calculates the second level grouping adjustments.
	     * For every base project it finds all associates with the given project type.
	     * It removes every such project from the trees root and adds it underneath the base project.
	     */
	    secondLevelGroupingAdjustments: function () {
	      var grouping = jQuery.map(this.options.grouping_two_selection || [], Timeline.pnum);
	      var root = this.getProject();
	      var associations = ProjectAssociation.all(this);
	      var listToRemove = [];

	      // for all projects on the first level
	      jQuery.each(root.getReporters(), function (i, reporter) {

	        // find all projects that are associated
	        jQuery.each(associations, function (j, association) {

	          // check if the reporter is involved and hasn't already been included by a second level grouping adjustment
	          if (!reporter.hasSecondLevelGroupingAdjustment && association.involves(reporter)) {
	            var other = association.getOther(reporter);
	            if (typeof other.getProjectType === "function") {
	              var projectType = other.getProjectType();
	              var projectTypeId = projectType !== null ? projectType.id : -1;

	              //check if the type is selected as 2nd level grouping
	              if (grouping.indexOf(projectTypeId) !== -1) {
	                // add the other project as a simulated reporter to the current one.
	                reporter.addReporter(other);
	                other.hasSecondLevelGroupingAdjustment = true;
	                // remove the project from the root level of the report.
	                listToRemove.push(other);

	              }
	            }
	          }
	        });
	      });

	      // remove all children of root that we couldn't remove while still iterating.
	      jQuery.each(listToRemove, function(i, reporter) {
	        root.removeReporter(reporter);
	      });
	    }
	  });

	  // ╭───────────────────────────────────────────────────────────────────╮
	  // │ Defaults and random accessors                                     │
	  // ╰───────────────────────────────────────────────────────────────────╯
	  jQuery.extend(Timeline, {
	    // defines how many levels are expanded when a tree is created, zero
	    // corresponds to the root being collapsed.
	    firstDateSeen: null,
	    lastDateSeen: null,

	    getBeginning: function() {
	      if (this.options.timeframe_start) {
	        return moment(this.options.timeframe_start).toDate();
	      }
	      var startDate = new Date();
	      if (this.firstDateSeen) {
	        startDate = this.firstDateSeen.clone();
	      }
	      return startDate.last().monday();
	    },
	    getEnd: function() {
	      if (this.options.timeframe_end) {
	        return moment(this.options.timeframe_end).toDate();
	      }
	      var endDate = new Date();
	      if (this.lastDateSeen) {
	        endDate = this.lastDateSeen.clone();
	      }
	      return endDate.addWeeks(1).next().sunday();

	    },
	    getDaysBetween: function(a, b) {
	      // some meat around date calculations that will be floored out again
	      // later. this hopefully takes care of floating point imprecisions
	      // and possible leap seconds, as we're only interested in days.
	      var da = a - 1000 * 60 * 60 * 4;
	      var db = b - 1000 * 60 * 60 * (-4);
	      return Math.floor((db - da) / (1000 * 60 * 60 * 24));
	    },
	    includeDate: function(date) {
	      if (date) {
	        if (this.firstDateSeen == null ||
	            date.compareTo(this.firstDateSeen) < 0) {
	          this.firstDateSeen = date;
	        } else if (this.lastDateSeen == null ||
	                   date.compareTo(this.lastDateSeen) > 0) {
	          this.lastDateSeen = date;
	        }
	      }
	    },
	    adjustForPlanningElements: function() {
	      var timeline = this;
	      var tree = this.getLefthandTree();

	      // nullify potential previous dates seen. this is relevant when
	      // adjusting after the addition of a planning element via modal.

	      timeline.firstDateSeen = null;
	      timeline.lastDateSeen = null;

	      tree.iterateWithChildren(function(node) {
	        var data = node.getData();
	        if (data.is(PlanningElement)) {
	          timeline.includeDate(data.start());
	          timeline.includeDate(data.end());
	        }
	      }, {
	        traverseCollapsed: true
	      });

	    },
	    getCustomFieldColumns: function() {
	      return this.options.columns.filter(function(column) {
	        return CustomFieldHelper.isCustomFieldKey(column);
	      });
	    },
	    getCustomFields: function() {
	      var customFields = [];

	      jQuery.each(this.custom_fields, function(key, customField) {
	        customFields.push(customField);
	      });

	      return customFields;
	    },
	    getValidCustomFieldIds: function() {
	      return this.getCustomFields().map(function(cf) {
	        return cf.id;
	      });
	    },
	    getInvalidCustomFieldColumns: function() {
	      var validCustomFieldIds = this.getValidCustomFieldIds();
	      var timeline = this;

	      return this.getCustomFieldColumns().filter(function(cfColumn) {
	        return validCustomFieldIds.indexOf(CustomFieldHelper.getCustomFieldId(cfColumn)) === -1;
	      });
	    },
	    removeColumnByName: function(columnName) {
	      this.options.columns.splice(this.options.columns.indexOf(columnName), 1);
	    },
	    clearUpCustomFieldColumns: function() {
	      var timeline = this;

	      jQuery.each(this.getInvalidCustomFieldColumns(), function(i, cfColumn) {
	        timeline.removeColumnByName(cfColumn);
	      });
	    },
	    getReportings: function() {
	      return Reporting.all(this);
	    },
	    getReporting: function(id) {
	      return this.reportings[id];
	    },
	    getProjects: function() {
	      return Project.all(this);
	    },
	    getProject: function(id) {
	      if (id === undefined) {
	        return this.project;
	      }
	      else return this.projects[id];
	    },
	    getGroupForProject: function(p) {
	      var i, j = 0, projects, key, group;
	      var groups = this.getFirstLevelGroups();
	      for (j = 0; j < groups.length; j += 1) {
	        projects = groups[j].projects;
	        group = this.getProject(groups[j].id);

	        for (i = 0; i < projects.length; i++) {
	          if (p.id === projects[i].id) {
	            return {
	              'id': group.id,
	              'p': group,
	              'number': j + 1,
	              'name': group.name
	            };
	          }
	        }
	      }

	      return {
	        'number': 0,
	        'id': 0,
	        'name': I18n.t('js.timelines.filter.grouping_other')
	      };
	    },

	    firstLevelGroups: undefined,
	    getFirstLevelGroups: function() {
	      if (this.firstLevelGroups !== undefined) {
	        return this.firstLevelGroups;
	      }
	      var i, selection = this.options.grouping_one_selection;
	      var p, groups = [], children;
	      if (this.isGrouping() && selection) {
	        for ( i = 0; i < selection.length; i++ ) {
	          p = this.getProject(selection[i]);
	          if (p === undefined) {
	            // projects may have subprojects that the current user knows
	            // about, but which cannot be/ were not fetched in advance due
	            // to lack of rights.
	            continue;
	          }
	          children = this.getSubprojectsOf([selection[i]]);
	          if (children.length !== 0) {
	            groups.push({
	              projects: children,
	              id: selection[i]
	            });
	          }
	        }
	      }

	      this.firstLevelGroups = groups;
	      return groups;
	    },
	    getNumberOfGroups: function() {
	      var result = this.options.hide_other_group? 0: 1;
	      var groups = this.getFirstLevelGroups();
	      return result + groups.length;
	    },
	    getSubprojectsOf: function(parents) {
	      var projects = this.getProjects();
	      var result = [];
	      var timeline = this;

	      // if parents is not an array, turn it into one with length 1, so
	      // the following each does not fail.
	      if (!(Array.isArray(parents))) {
	        parents = [parents];
	      }

	      var ancestorIsIn = function(project, ancestors) {

	        var parent = project.getParent();
	        var r = false;
	        if (parent !== null) {
	          jQuery.each(ancestors, function(i, p) {

	            // make sure this is a number. when coming from the options
	            // array, it might actually be an array of strings.
	            if (typeof p === 'string') {
	              p = timeline.pnum(p);
	            }

	            if (parent && p === parent.id) {
	              r = true;
	            }
	          });

	          // check rest of project tree. this might break when a project
	          // in between is not visible to the current user.
	          if (parent) {
	            r = r || ancestorIsIn(parent, ancestors);
	          }
	        }
	        return r;
	      };

	      jQuery.each(projects, function(i, e) {
	        if (ancestorIsIn(e, parents)) {
	          result.push(e);
	        }
	      });

	      return result;
	    },
	    getProjectTypes: function() {
	      return ProjectType.all(this);
	    },
	    getProjectType: function(id) {
	      return this.project_types[id];
	    },
	    getPlanningElementTypes: function() {
	      return PlanningElementType.all(this);
	    },
	    getPlanningElementType: function(id) {
	      return this.planning_element_types[id];
	    },
	    getPlanningElements: function() {
	      return PlanningElement.all(this);
	    },
	    getPlanningElement: function(id) {
	      return this.planning_elements[id];
	    },
	    getColors: function() {
	      return Color.all(this);
	    },
	    getProjectAssociations: function() {
	      return ProjectAssociation.all(this);
	    },
	    getLefthandTree: function() {

	      if (!this.lefthandTree) {

	        // as long as there are no stored filters or aggregates, we only use
	        // the projects as roots.
	        var project = this.getProject();
	        var tree = Object.create(TreeNode);
	        var parent_stack = [];

	        tree.setData(project, 0);

	        // there might not be any payload, due to insufficient rights and
	        // the fact that some user with more rights originally created the
	        // report.
	        if (!project) {
	          // FLAG raise some flag indicating that something is
	          // wrong/missing.
	          return tree;
	        }

	        var level = 1;
	        var count = 1;
	        // for the given node, appends the given planning_elements as children,
	        // recursively. every node will have the planning_element as data.
	        var treeConstructor = function(node, elements) {
	          count += 1;

	          var MAXIMUMPROJECTCOUNT = 12000;
	          if (count > MAXIMUMPROJECTCOUNT) {
	            throw I18n.t('js.timelines.tooManyProjects', {count: MAXIMUMPROJECTCOUNT});
	          }

	          jQuery.each(elements, function(i, e) {
	            parent_stack.push(node.payload);
	            for (var j = 0; j < parent_stack.length; j++) {
	              if (parent_stack[j] === e) {
	                parent_stack.pop();
	                return; // no more recursion!
	              }
	            }
	            var newNode = Object.create(TreeNode);

	            newNode.setData(e, level);
	            node.appendChild(newNode);

	            level++;
	            treeConstructor(newNode, newNode.getData().getSubElements());
	            level--;

	            parent_stack.pop();
	          });
	          return node;
	        };

	        this.lefthandTree = treeConstructor(tree, project.getSubElements());

	        this.lefthandTree.expandTo(this.options.initial_outline_expansion);
	      }

	      return this.lefthandTree;
	    }
	  });

	  // This polyfill covers the main use case which is creating a new object
	  // for which the prototype has been chosen but doesn't take the second
	  // argument into account:
	  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create
	  if (!Object.create) {
	    Object.create = function(o) {
	      if (arguments.length > 1) {
	        throw new Error(
	          'Object.create implementation only accepts the first parameter.'
	        );
	      }
	      function F() {}
	      F.prototype = o;
	      return new F();
	    };
	  }

	  return Timeline;
	};


/***/ },
/* 109 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++
	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {

	  TreeNode = {
	    payload: undefined,
	    parentNode: undefined,
	    childNodes: undefined,
	    expanded: false,
	    lastExpanded: false,
	    visible: false,

	    totalCount: 0,
	    projectCount: 0,

	    getData: function() {
	      return this.payload;
	    },
	    setData: function(data, level) {
	      this.text = data.subject || data.name;
	      if (data.is(Project)) this.group = data.getFirstLevelGrouping();
	      this.url = data.getUrl();

	      this.payload = data;
	      this.level = level;

	      return this;
	    },
	    appendChild: function(node) {
	      if (!this.childNodes) {
	        this.childNodes = [node];
	      } else {
	        this.childNodes.push(node);
	      }
	      node.parentNode = this;
	      return node.parentNode;
	    },
	    removeChild: function(node) {
	      var result;
	      jQuery.each(this.childNodes, function(i, e) {
	        if (node === e) {
	          result = node;
	        }
	      });
	      return result;
	    },
	    hasChildren: function() {
	      return this.childNodes && this.childNodes.length > 0;
	    },
	    children: function() {
	      return this.childNodes;
	    },
	    root: function() {
	      if (this.parentNode) {
	        return this.parentNode.root();
	      } else {
	        return this;
	      }
	    },
	    isExpanded: function() {
	      return this.expanded;
	    },
	    setExpand: function(state) {
	      this.expanded = state;
	      return this.expanded;
	    },
	    expand: function() {
	      return this.setExpand(true);
	    },
	    collapse: function() {
	      return this.setExpand(false);
	    },
	    toggle: function() {
	      return this.setExpand(!this.expanded);
	    },
	    setExpandedAll: function(state) {
	      if (!this.hasChildren()) {
	        return;
	      }
	      this.setExpand(state);
	      jQuery.each(this.children(), function(i, e) {
	        e.setExpandedAll(state);
	      });
	    },
	    expandAll: function() {
	      return this.setExpandedAll(true);
	    },
	    setVisible: function(){
	      this.visible = true;
	    },
	    resetVisible: function(){
	      this.visible = false;
	    },
	    setLastVisible: function(){
	      this.lastVisible = true;
	    },
	    resetLastVisible: function(){
	      this.lastVisible = false;
	    },
	    collapseAll: function() {
	      return this.setExpandedAll(false);
	    },
	    setDOMElement: function(element) {
	      this.dom_element = element;
	    },
	    getDOMElement: function() {
	      return this.dom_element;
	    },
	    iterateWithChildren: function(callback, options) {
	      var root = this.root();
	      var self = this;
	      var timeline;
	      var filtered_out, hidden;
	      var children = this.children();
	      var has_children = children !== undefined;

	      // there might not be any payload, due to insufficient rights and
	      // the fact that some user with more rights originally created the
	      // report.
	      if (root.payload === undefined) {
	        // FLAG raise some flag indicating that something is
	        // wrong/missing.
	        return this;
	      }

	      timeline = root.payload.timeline;
	      hidden = this.payload.hide();
	      filtered_out = this.payload.filteredOut();
	      options = options || {indent: 0, index: 0, projects: 0};

	      // ╭─────────────────────────────────────────────────────────╮
	      // │ The hide_other_group flag is an option that cuases      │
	      // │ iteration to stop when the "other" group, i.e.,         │
	      // │ everything that is not otherwise grouped, is reached.   │
	      // │ This effectively hides that group.                      │
	      // ╰─────────────────────────────────────────────────────────╯
	      // the "other" group is reached when we are dealing with a
	      // grouping timeline, the current payload is a project, not root,
	      // but on level 0, and the first level grouping is 0.

	      if (timeline.options.hide_other_group &&
	          timeline.isGrouping() &&
	          this.payload.is(Project) &&
	          this !== root &&
	          options.indent === 0 &&
	          this.payload.getFirstLevelGrouping() === 0) {

	        return;
	      }

	      if (this === root) {
	        options = jQuery.extend({}, {indent: 0, index: 0, projects: 0, traverseCollapsed: false}, options);
	      }

	      if (this === root && timeline.options.hide_tree_root === true) {

	        // ╭───────────────────────────────────────────────────────╮
	        // │ There used to be a requirement that disabled planning │
	        // │ elements in root when root should be hidden. That     │
	        // │ requirement was inverted and it is now desired to     │
	        // │ show all such planning elements on the root level of  │
	        // │ the tree.                                             │
	        // ╰───────────────────────────────────────────────────────╯

	        if (has_children) {
	          jQuery.each(children, function(i, e) {
	            e.iterateWithChildren(callback, options);
	          });
	        }

	      } else {

	        // ╭───────────────────────────────────────────────────────╮
	        // │ There is a requirement that states that filter status │
	        // │ should no longer be inherited. The callback therefore │
	        // │ is only invoked when payload is not filtered out. The │
	        // │ same is true for incrementing the projects and index  │
	        // │ count.                                                │
	        // ╰───────────────────────────────────────────────────────╯

	        if (!filtered_out && !hidden) {

	          if (callback) {
	            callback.call(this, this, options.indent, options.index);
	          }

	          if (this.payload.is(Project)) {
	            options.projects++;
	          }

	          options.index++;
	        }

	        // ╭───────────────────────────────────────────────────────╮
	        // │ There is a requirement that states that if the        │
	        // │ current node is closed, children that are projects    │
	        // │ should be displayed anyway, and only children that    │
	        // │ are planning elements should be removed from the      │
	        // │ view. Beware, this only works as long as there are no │
	        // │ projects that are children of planning elements.      │
	        // ╰───────────────────────────────────────────────────────╯

	        // if there are children, loop over them, independently of
	        // current node expansion state.
	        if (has_children) {
	          options.indent++;

	          jQuery.each(children, function(i, child) {

	            // ╭───────────────────────────────────────────────────╮
	            // │ Now, if the node, the children of which we        │
	            // │ are looping over, was expanded, iterate           │
	            // │ over its children, recursively. Do the same       │
	            // │ if the iteration was configured with the          │
	            // │ traverseCollapsed flag. Last but not least, if    │
	            // │ the current child is a project, iterate over it   │
	            // │ only if indentation is not too deep.              │
	            // ╰───────────────────────────────────────────────────╯

	            if (options.traverseCollapsed ||
	                self.isExpanded() ||
	                child.payload.is(Project)) {

	                //do we wan to inherit the hidden status from projects to planning elements?
	                if (!hidden || child.payload.is(Project)) {
	                  if (!(options.indent > 1 && child.payload.is(Project))) {
	                    child.iterateWithChildren(callback, options);
	                  }
	                }
	            }
	          });

	          options.indent--;
	        }
	      }

	      if (this === root) {
	        this.totalCount = options.index;
	        this.projectCount = options.projects;
	      }
	      return this;
	    },

	    // ╭───────────────────────────────────────────────────╮
	    // │ The following methods are supposed to be called   │
	    // │ from the root level of the tree, but do           │
	    // │ gracefully retrieve the root if called from       │
	    // │ anywhere else.                                    │
	    // ╰───────────────────────────────────────────────────╯
	    expandTo: function(level) {
	      var root = this.root();
	      var i = 0, expandables = [root];
	      var expand = function (i,e) { return e.expand(); };
	      var children;
	      var j, c;

	      if (level === undefined) {
	        // "To infinity ... and beyond!" - Buzz Lightyear.
	        level = Infinity;
	      }

	      // collapse all, and expand only as much as is enabled by default.
	      root.collapseAll();

	      while (i++ < level && expandables.length > 0) {

	        jQuery.each(expandables, expand);
	        children = [];
	        for (j = 0; j < expandables.length; j++) {
	          c = expandables[j].children();
	          if (c) {
	            children = children.concat(c);
	          }
	        }
	        expandables = children;
	      }

	      return level;
	    },
	    numberOfProjects: function() {
	      return this.getRootProperty('projectCount');
	    },
	    numberOfPlanningElements: function() {
	      return this.getRootProperty('totalCount') -
	        this.getRootProperty('projectCount');
	    },
	    height: function() {
	      return this.getRootProperty('totalCount');
	    },
	    getRootProperty: function(property) {
	      var root = this.root();
	      this.iterateWithChildren();
	      return root[property];
	    },
	    containsProjects: function() {
	      return this.numberOfProjects() !== 0;
	    },
	    containsPlanningElements: function() {
	      return this.numberOfPlanningElements() !== 0;
	    }
	  };

	  return TreeNode;
	};


/***/ },
/* 110 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function() {
	  identifier = 'users';

	  User = {
	    is: function(t) {
	      if (t === undefined) return false;
	      return t.identifier === identifier;
	    }
	  };

	  User.identifier = identifier;

	  return User;
	};


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.timelines.services')
	  .service('TimelineLoaderService', ['$q', 'FilterQueryStringBuilder', 'Color',
	    'HistoricalPlanningElement', 'PlanningElement', 'PlanningElementType',
	    'Project', 'ProjectAssociation', 'ProjectType', 'Reporting', 'Status',
	    'Timeline', 'User', 'CustomField', 'PathHelper',
	    __webpack_require__(112)
	  ]);


/***/ },
/* 112 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// ╭───────────────────────────────────────────────────────────────╮
	// │  _____ _                _ _                                   │
	// │ |_   _(_)_ __ ___   ___| (_)_ __   ___  ___                   │
	// │   | | | | '_ ` _ \ / _ \ | | '_ \ / _ \/ __|                  │
	// │   | | | | | | | | |  __/ | | | | |  __/\__ \                  │
	// │   |_| |_|_| |_| |_|\___|_|_|_| |_|\___||___/                  │
	// ├───────────────────────────────────────────────────────────────┤
	// │ Javascript library that fetches and plots timelines for the   │
	// │ OpenProject timelines module.                                 │
	// ╰───────────────────────────────────────────────────────────────╯

	module.exports = function($q, FilterQueryStringBuilder, Color, HistoricalPlanningElement, PlanningElement, PlanningElementType, Project, ProjectAssociation, ProjectType, Reporting, Status, Timeline, User, CustomField, PathHelper) {

	  /**
	   * QueueingLoader
	   *
	   * Simple wrapper around jQuery.ajax, which introduces two step loading
	   * of remote data.
	   *
	   * Step 1: register URL and meta information using `register`
	   * Step 2: load all registered elements using `load`
	   *
	   * To notify consumers about AJAX responses, the QueueingLoader uses
	   * the jQuery custom event system. Whenever a request is complete,
	   * success or error events will be triggered. When the queue is empty,
	   * an 'empty' event will be triggered. Use the callback functions like
	   * the following ones, to react on these events:
	   *
	   *     jQuery(myLoader).on("success", function (e, args) {
	   *       // console.log("'success' triggered for", this);
	   *       // console.log("identifier used in register:",  args.identifier);
	   *       // console.log("context provided in register:", args.context);
	   *       // console.log("data returned by the server:",  args.data);
	   *     });
	   *
	   *     jQuery(myLoader).on("error", function (e, args) {
	   *       // console.log("'error' triggered for ", this);
	   *       // console.log("identifier used in register:",  args.identifier);
	   *       // console.log("context provided in register:", args.context);
	   *       // console.log("textStatus provided by jqXHR:", args.textStatus);
	   *     });
	   *
	   *     jQuery(myLoader).on("empty", function (e) {
	   *       // console.log("'empty' triggered for ", this);
	   *     });
	   *
	   */
	  var QueueingLoader = function (ajaxDefaults) {
	    this.ajaxDefaults = ajaxDefaults;
	    this.registered   = {};
	    this.loading      = {};
	    this.TimelineLoaderService = {};
	  };

	  /**
	   * Enqueue new elements to load
	   *
	   * identifier should be a string and uniq. If identifier is used twice, then
	   *            bad things will happen.
	   *
	   * options should be the options passed to jQuery.ajax. Often it is enough,
	   *         to provide a URL.
	   *
	   * context additional information which will be passed to the callbacks. Use
	   *         this to store some state.
	   */
	  QueueingLoader.prototype.register = function (identifier, options, context) {
	    this.registered[identifier] = {
	      options : options,
	      context : context || {}
	    };
	  };




	  /**
	   * Trigger loading of all registered elements
	   */
	  QueueingLoader.prototype.load = function () {
	    // console.log('- QueueingLoader: load');

	    var identifier, element;

	    for (identifier in this.registered) {
	      if (this.registered.hasOwnProperty(identifier)) {
	        element = this.registered[identifier];

	        delete this.registered[identifier];

	        this.loadElement(identifier, element);
	      }
	    }
	  };

	  QueueingLoader.prototype.getRegisteredIdentifiers = function () {
	    return jQuery.map(this.registered, function (e, i) { return i; });
	  };

	  QueueingLoader.prototype.getLoadingIdentifiers = function () {
	    return jQuery.map(this.loading, function (e, i) { return i; });
	  };

	  // Methods below are not meant to be public
	  QueueingLoader.prototype.loadElement = function (identifier, element) {
	    // console.log('- QueueingLoader: loadElement');

	    // console.log({identifier: identifier});
	    // console.log({element: element});

	    element.options = jQuery.extend(
	        {},
	        this.ajaxDefaults,
	        element.options,
	        {
	          success  : function(data, textStatus, jqXHR) {
	            delete this.loading[identifier];
	            // console.log('- QueueingLoader: "success" triggered');

	            jQuery(this).trigger('success', {identifier : identifier,
	                                             context    : element.context,
	                                             data       : data});
	          },

	          error    : function (jqXHR, textStatus, errorThrown) {
	            delete this.loading[identifier];
	            // console.log('- QueueingLoader: "error" triggered');

	            jQuery(this).trigger('error', {identifier : identifier,
	                                           context    : element.context,
	                                           textStatus : textStatus});
	          },

	          complete : this.onComplete,

	          context  : this
	        }
	    );

	    // console.log({elementOptionsForAjax: element.options});


	    this.loading[identifier] = element;

	    if(identifier === 'project_types') {
	      // console.log('- Queueing Loader: Retrieving project types');
	      // // console.log({project_types: ProjectType.query()});
	    }

	    jQuery.ajax(element.options);
	  };

	  QueueingLoader.prototype.onComplete = function () {
	    // console.log('- QueueingLoader: Complete');

	    // count remainders
	    var remaining = 0;
	    for (var key in this.loading) {
	      if (this.loading.hasOwnProperty(key)) {
	        remaining++;
	      }
	    }

	    // if nothing remains, notify about empty queue
	    if (remaining === 0) {
	      jQuery(this).trigger('empty');
	    }
	  };



	  var DataEnhancer = function (timeline) {
	    this.timeline = timeline;

	    this.options = {
	      projectId : timeline.options.project_id
	    };

	    this.die = function () {
	      timeline.die.apply(timeline, arguments);
	    };
	  };

	  DataEnhancer.getBasicType = function (identifier) {
	    var i, basicTypes = this.BasicTypes();

	    for (i = 0; i < basicTypes.length; i++) {
	      if (basicTypes[i].identifier === identifier) {
	        return basicTypes[i];
	      }
	    }
	  };

	  DataEnhancer.BasicTypes = function () {
	    return [
	      Color,
	      Status,
	      PlanningElementType,
	      HistoricalPlanningElement,
	      PlanningElement,
	      ProjectType,
	      Project,
	      ProjectAssociation,
	      Reporting,
	      User,
	      CustomField
	    ];
	  };

	  DataEnhancer.prototype.createObjects = function (data, identifier) {
	    var type = DataEnhancer.getBasicType(identifier);

	    var i, e, id, map = {};

	    if (Array.isArray(data)) {
	      for (i = 0; i < data.length; i++) {
	        e = data[i];
	        e.timeline = this.timeline;
	        id = e.id;
	        map[id] = jQuery.extend(Object.create(type), e);
	      }
	    }
	    else {
	      console.warn("Expected instance of Array, but got something else.", data, identifier);
	    }

	    return map;
	  };

	  DataEnhancer.prototype.enhance = function (data) {
	    try {

	      this.data = data;

	      this.createEmptyElementMaps();
	      this.assignMainProject();

	      this.augmentReportingsWithProjectObjects();
	      this.augmentProjectsWithProjectTypesAndAssociations();

	      this.augmentPlanningElementsWithHistoricalData();
	      this.augmentPlanningElementsWithAllKindsOfStuff();
	      this.augmentPlanningElementsWithVerticalityData();

	      return this.data;

	    } catch(e) {
	      this.die(e);
	    }
	  };

	  DataEnhancer.prototype.createEmptyElementMaps = function () {
	    if (!this.data.hasOwnProperty(ProjectAssociation.identifier)) {
	      this.data[ProjectAssociation.identifier] = {};
	    }
	  };

	  DataEnhancer.prototype.getElementMap = function (type) {
	    return this.data[type.identifier];
	  };

	  DataEnhancer.prototype.setElementMap = function (type, map) {
	    if (map === undefined) {
	      delete this.data[type.identifier];
	    }
	    else {
	      this.data[type.identifier] = map;
	    }
	    return map;
	  };

	  DataEnhancer.prototype.getElements = function (type) {
	    var map    = this.getElementMap(type) || {},
	        result = [];

	    for (var key in map) {
	      if (map.hasOwnProperty(key)) {
	        result.push(map[key]);
	      }
	    }
	    return result;
	  };

	  DataEnhancer.prototype.getElement = function (type, id) {
	    return this.data[type.identifier][id];
	  };

	  DataEnhancer.prototype.setElement = function (type, id, element) {
	    this.data[type.identifier][id] = element;
	    return this.data[type.identifier][id];
	  };

	  DataEnhancer.prototype.getProject = function () {
	    return this.data.project;
	  };

	  DataEnhancer.prototype.setProject = function (project) {
	    this.data.project = project;
	    return project;
	  };


	  DataEnhancer.prototype.assignMainProject = function () {
	    if (this.getProject() !== undefined) {
	      return;
	    }

	    var dataEnhancer = this;

	    // looking for main project in timeline.projects array and storing it as
	    // primary project in timeline.project
	    jQuery.each(this.getElements(Project), function (i, e) {
	      if (e.identifier === dataEnhancer.options.projectId ||
	          e.id         === dataEnhancer.options.projectId) {

	        dataEnhancer.setProject(e);
	      }
	    });

	    if (dataEnhancer.getProject() === undefined) {
	      dataEnhancer.die(new Error("Could not find main project. " +
	        "The current user is probably not allowed to view timelines in here."));
	    }
	  };

	  DataEnhancer.prototype.augmentReportingsWithProjectObjects = function () {
	    var dataEnhancer = this;

	    jQuery.each(dataEnhancer.getElements(Reporting), function (i, reporting) {
	      // TODO this somehow didn't make the change to reporting_to_project_id and project_id.
	      var project  = dataEnhancer.getElement(Project, reporting.reporting_to_project.id);
	      var reporter = dataEnhancer.getElement(Project, reporting.project.id);

	      // there might not be a project, which due to insufficient rights
	      // and the fact that some user with more rights originally created
	      // the report, is not available here.
	      if (!project || !reporter) {
	        // TODO some flag indicating that something is wrong/missing.
	        return;
	      }

	      reporting.reporting_to_project = project;
	      reporting.project = reporter;

	      reporter.via_reporting = reporting;

	      // project ← reporting → project
	      if (project.reporters === undefined) {
	        project.reporters = [];
	      }
	      if (jQuery.inArray(reporter, project.reporters) === -1) {
	        project.reporters.push(reporter);
	      }
	    });
	  };

	  DataEnhancer.prototype.augmentElementAttributesWithUser = function (e, attributes) {
	    if (this.data[User.identifier]) {
	      var k, curAttr;
	      for (k = 0; k < attributes.length; k += 1) {
	        curAttr = attributes[k];
	        if (e[curAttr]) {
	          e[curAttr.replace(/_id$/, "")] = this.getElement(User,
	                                            e[curAttr]);
	        }

	        delete e[curAttr];
	      }
	    }
	  };

	  DataEnhancer.prototype.augmentProjectElementWithUser = function (p) {
	    this.augmentElementAttributesWithUser(p, Timeline.USER_ATTRIBUTES.PROJECT);
	  };

	  DataEnhancer.prototype.augmentProjectsWithProjectTypesAndAssociations = function () {
	    var dataEnhancer = this;

	    jQuery.each(dataEnhancer.getElements(Project), function (i, e) {

	      dataEnhancer.augmentProjectElementWithUser(e);

	      // project_type ← project
	      if (e.project_type_id !== undefined) {
	        var project_type = dataEnhancer.getElement(ProjectType, e.project_type_id);

	        if (project_type) {
	          e.project_type = project_type;
	        }
	      }

	      // project ← association → project

	      var associations = e[ProjectAssociation.identifier];
	      var j, a, other;

	      if (Array.isArray(associations)) {
	        for (j = 0; j < associations.length; j++) {
	          a = associations[j];
	          a.timeline = dataEnhancer.timeline;
	          a.origin = e;

	          other = dataEnhancer.getElement(Project, a.to_project_id);
	          if (other) {
	            a.project = other;
	            dataEnhancer.setElement(
	                ProjectAssociation,
	                a.id,
	                jQuery.extend(Object.create(ProjectAssociation), a));
	          }

	        }
	      }

	      // project → parent
	      if (e.parent_id) {
	        e.parent = dataEnhancer.getElement(Project, e.parent_id);
	      }
	      delete e.parent_id;
	    });
	  };

	  DataEnhancer.prototype.augmentPlanningElementsWithHistoricalData = function () {
	    var dataEnhancer = this;

	    jQuery.each(dataEnhancer.getElements(HistoricalPlanningElement), function (i, e) {
	      var pe = dataEnhancer.getElement(PlanningElement, e.id);

	      if (pe === undefined) {

	        // The planning element is in the historical data, but not in
	        // the current set of planning elements, i.e. it was deleted
	        // in the compared timeframe. We therefore import the deleted
	        // element into the planning elements array and set the
	        // is_deleted flag.
	        e = jQuery.extend(Object.create(PlanningElement), e);
	        e.is_deleted = true;
	        dataEnhancer.setElement(PlanningElement, e.id, e);
	        pe = e;
	      }

	      pe.historical_element = jQuery.extend(Object.create(PlanningElement), e);
	    });

	    dataEnhancer.setElementMap(HistoricalPlanningElement, undefined);
	  };

	  DataEnhancer.prototype.augmentPlanningElementWithStatus = function (pe) {
	    // planning_element → planning_element_type
	    if (pe.status_id) {
	      pe.status = this.getElement(Status,
	                                  pe.status_id);
	    }
	    delete pe.status_id;
	  };

	  DataEnhancer.prototype.augmentPlanningElementWithUser = function (pe) {
	    this.augmentElementAttributesWithUser(pe, Timeline.USER_ATTRIBUTES.PLANNING_ELEMENT);
	  };

	  DataEnhancer.prototype.augmentPlanningElementWithType = function (pe) {
	    // planning_element → planning_element_type
	    if (pe.type_id) {
	      pe.planning_element_type = this.getElement(PlanningElementType,
	                                                 pe.type_id);
	    }
	    delete pe.type_id;
	  };

	  DataEnhancer.prototype.augmentPlanningElementWithProject = function (pe) {
	    var project = this.getElement(Project, pe.project_id);

	    // there might not be such a project, due to insufficient rights
	    // and the fact that some user with more rights originally created
	    // the report.
	    if (!project) {
	      // TODO some flag indicating that something is wrong/missing.
	      return;
	    }

	    // planning_element → project
	    pe.project = project;
	  };

	  DataEnhancer.prototype.augmentPlanningElementWithParent = function (pe) {
	    if (pe.parent_id) {
	      var parent = this.getElement(PlanningElement, pe.parent_id);

	      if (parent !== undefined) {

	        // planning_element ↔ planning_element
	        if (parent.planning_elements === undefined) {
	          parent.planning_elements = [];
	        }
	        parent.planning_elements.push(pe);
	        pe.parent = parent;
	      }

	    } else {
	      var project = pe.project;
	      if (project) {
	        // planning_element ← project
	        if (project.planning_elements === undefined) {
	          project.planning_elements = [];
	        }
	        project.planning_elements.push(pe);
	      }
	    }
	  };

	  DataEnhancer.prototype.augmentPlanningElementsWithAllKindsOfStuff = function () {
	    var dataEnhancer = this;

	    jQuery.each(dataEnhancer.getElements(PlanningElement), function (i, e) {
	      dataEnhancer.augmentPlanningElementWithStatus(e);
	      dataEnhancer.augmentPlanningElementWithType(e);
	      dataEnhancer.augmentPlanningElementWithProject(e);
	      dataEnhancer.augmentPlanningElementWithParent(e);
	      dataEnhancer.augmentPlanningElementWithUser(e);
	      if (e.historical_element) {
	        dataEnhancer.augmentPlanningElementWithStatus(e.historical_element);
	        dataEnhancer.augmentPlanningElementWithType(e.historical_element);
	      }
	    });
	  };

	  DataEnhancer.prototype.augmentPlanningElementsWithVerticalityData = function () {
	    var dataEnhancer = this;

	    jQuery.each(dataEnhancer.getElements(PlanningElement), function (i, e) {
	      var pe = dataEnhancer.getElement(PlanningElement, e.id);
	      var pet = pe.getPlanningElementType();

	      pe.vertical = this.timeline.verticalPlanningElementIds().indexOf(pe.id) !== -1;
	    });
	  };

	  DataEnhancer.prototype.clearUpCustomFieldColumns = function() {
	    this.timeline.clearUpCustomFieldColumns();
	  };

	  /**
	   *  TimelineLoader
	   *
	   *  Loads all data, that is relevant for the current timeline instance.
	   *
	   *  timeline: Timeline instance
	   *  options:  Configuration Hash
	   *
	   *  The timeline parameter is used to augment the loaded data with pointers
	   *  to their coressponding timeline. No assumptions about methods or
	   *  attributes are made.
	   *
	   *  The following list describes the required options
	   *
	   *    project_prefix : timeline.options.project_prefix,
	   *    project_id     : timeline.options.project_id,
	   *
	   *    ajax_defaults  : timeline.ajax_defaults
	   *
	   *    current_time   : this.comparisonCurrentTime(),
	   *    target_time    : this.comparisonTarget()
	   *
	   *  Use `load` to trigger loading of data.
	   *  Use events to get notified about completion
	   *
	   *      jQuery(timelineLoader).on("complete", function (e, data) {
	   *        // console.log("'complete' triggered for", this);
	   *        // console.log("Loaded data is:", data);
	   *      }
	   */
	  var TimelineLoader = function (timeline, options) {
	    this.timelineId   = timeline.id;
	    this.options      = options;
	    this.data         = {};
	    this.loader       = new QueueingLoader(options.ajax_defaults);
	    this.dataEnhancer = new DataEnhancer(timeline);

	    this.globalPrefix = PathHelper.staticBase + PathHelper.apiV2;

	    this.die = function () {
	      this.dataEnhancer.die.apply(this.dataEnhancer, arguments);
	    };

	    jQuery(this.loader).on('success', jQuery.proxy(this, 'onLoadSuccess'))
	                       .on('error',   jQuery.proxy(this, 'onLoadError'))
	                       .on('empty',   jQuery.proxy(this, 'onLoadComplete'));
	  };

	  TimelineLoader.QueueingLoader = QueueingLoader;

	  TimelineLoader.prototype.registerTimelineElements = function() {
	    // console.log('- TimelineLoader: registerTimelineElements');

	    this.registerProjectReportings();
	    this.registerGlobalElements();
	  };

	  TimelineLoader.prototype.load = function () {
	    this.loader.load();
	  };

	  TimelineLoader.prototype.onLoadSuccess = function (e, args) {
	    // console.log('- TimelineLoader: onLoadSuccess');
	    // console.log({args: args});

	    var storeIn  = args.context.storeIn  || args.identifier,
	        readFrom = args.context.readFrom || storeIn;

	    this.storeData(args.data[readFrom], storeIn);
	    this.checkDependencies(args.identifier);
	  };

	  TimelineLoader.prototype.onLoadError = function (e, args) {
	    // console.log({onLoadError: args});

	    var storeIn  = args.context.storeIn  || args.identifier;

	    console.warn("Error during loading", arguments);

	    this.storeData([], storeIn);

	    this.checkDependencies(args.identifier);
	  };

	  TimelineLoader.prototype.onLoadComplete = function (e) {
	    // console.log('- TimelineLoader: onLoadComplete');
	    // console.log({e: e});

	    jQuery(this).trigger('complete', this.dataEnhancer.enhance(this.data));
	  };

	  TimelineLoader.prototype.registerProjectReportings = function () {
	    var projectPrefix = this.globalPrefix +
	                        PathHelper.projectsPath() +
	                        "/" +
	                        this.options.project_id;

	    var url = projectPrefix + '/reportings.json?only=via_target';

	    if (this.options.project_types) {
	      url += '&project_types=' + this.options.project_types.join();
	    }

	    if (this.options.project_statuses) {
	      url += '&project_statuses=' + this.options.project_statuses.join();
	    }

	    if (this.options.project_responsibles) {
	      url += '&project_responsibles=' + this.options.project_responsibles.join();
	    }

	    if (this.options.project_parents) {
	      url += '&project_parents=' + this.options.project_parents.join();
	    }

	    if (this.options.grouping_one) {
	      url += '&grouping_one=' + this.options.grouping_one.join();
	    }

	    if (this.options.grouping_two) {
	      url += '&grouping_two=' + this.options.grouping_two.join();
	    }

	    this.loader.register(Reporting.identifier,
	                         { url : url });
	  };

	  TimelineLoader.prototype.registerGlobalElements = function () {
	    var projectPrefix = this.globalPrefix +
	                        PathHelper.projectsPath() +
	                        "/" +
	                        this.options.project_id;

	    this.loader.register(
	      Status.identifier,
	      { url : this.globalPrefix + '/statuses.json' });
	    this.loader.register(
	      PlanningElementType.identifier,
	      { url : this.globalPrefix + '/planning_element_types.json' });
	    this.loader.register(
	      Color.identifier,
	      { url : this.globalPrefix + '/colors.json' });
	    this.loader.register(
	      CustomField.identifier,
	      { url : projectPrefix + '/planning_element_custom_fields.json' });
	    this.loader.register(
	      ProjectType.identifier,
	      { url : this.globalPrefix + '/project_types.json' });
	  };

	  TimelineLoader.prototype.registerProjects = function (ids) {
	    // console.log('- TimelineLoader: registerProjects');
	    // console.log({ids: ids});

	    this.inChunks(ids, function (project_ids_of_packet, i) {

	      this.loader.register(
	          Project.identifier + '_' + i,
	          { url : this.globalPrefix +
	                  '/projects.json?ids=' +
	                  project_ids_of_packet.join(',')},
	          { storeIn : Project.identifier }
	        );
	    });
	  };

	  TimelineLoader.prototype.registerUsers = function (ids) {
	    // console.log('- TimelineLoader: registerUsers');
	    // console.log({ids: ids});

	    this.inChunks(ids, function (user_ids_of_packet, i) {

	      this.loader.register(
	          User.identifier + '_' + i,
	          { url : this.globalPrefix +
	                  '/users.json?ids=' +
	                  user_ids_of_packet.join(',')},
	          { storeIn : User.identifier }
	        );
	    });
	  };

	  TimelineLoader.prototype.provideServerSideFilterHashTypes = function (hash) {
	    // console.log('- TimelineLoader: provideServerSideFilterHashTypes');
	    // console.log({hash: hash});

	    if (this.options.planning_element_types !== undefined) {
	      hash.type_id = this.options.planning_element_types;
	    }
	  };

	  TimelineLoader.prototype.provideServerSideFilterHashStatus = function (hash) {
	    // console.log('- TimelineLoader: provideServerSideFilterHashStatus');
	    // console.log({hash: hash});

	    if (this.options.planning_element_status !== undefined) {
	      hash.status_id = this.options.planning_element_status;
	    }
	  };

	  TimelineLoader.prototype.provideServerSideFilterHashResponsibles = function (hash) {
	    // console.log('- TimelineLoader: provideServerSideFilterHashResponsibles');
	    // console.log({hash: hash});

	    if (this.options.planning_element_responsibles !== undefined) {
	      hash.responsible_id = this.options.planning_element_responsibles;
	    }
	  };

	  TimelineLoader.prototype.provideServerSideFilterHashAssignee = function (hash) {
	    if (this.options.planning_element_assignee !== undefined) {
	      hash.assigned_to_id = this.options.planning_element_assignee;
	    }
	  };

	  TimelineLoader.prototype.provideServerSideFilterHashCustomFields = function (hash) {
	    var custom_fields = this.options.custom_fields, field_id;

	    if (custom_fields !== undefined) {
	      for (field_id in custom_fields) {
	        if (custom_fields.hasOwnProperty(field_id)) {

	          var value = custom_fields[field_id];

	          // -1 and the empty string both need to be added in the
	          // (none)-case, since (none) has to both match work packages
	          // w/ custom values that are empty and work packages w/o
	          // custom values.

	          if (Array.isArray(value) && value.indexOf("-1") !== -1) {
	            value.push("");
	          }

	          if (value && value !== "" && value.length > 0) {
	            hash["cf_" + field_id] = value;
	          }
	        }
	      }
	    }
	  };

	  TimelineLoader.prototype.provideServerSideFilterHash = function() {
	    // console.log('- TimelineLoader: provideServerSideFilterHash');

	    var result = {};
	    this.provideServerSideFilterHashTypes(result);
	    this.provideServerSideFilterHashResponsibles(result);
	    this.provideServerSideFilterHashStatus(result);
	    this.provideServerSideFilterHashAssignee(result);
	    this.provideServerSideFilterHashCustomFields(result);
	    return result;
	  };

	  TimelineLoader.prototype.registerPlanningElements = function (ids) {
	    this.inChunks(ids, function (projectIdsOfPacket, i) {
	      var projectPrefix = this.globalPrefix +
	                          PathHelper.projectsPath() +
	                          "/" +
	                          projectIdsOfPacket.join(',');

	      var qsb = new FilterQueryStringBuilder(
	        this.provideServerSideFilterHash());

	      // load current planning elements.
	      this.loader.register(
	        PlanningElement.identifier + '_' + i,
	        { url : qsb.append({timeline: this.timelineId}).build(projectPrefix + '/planning_elements.json') },
	        { storeIn: PlanningElement.identifier }
	      );

	      // load historical planning elements.
	      if (this.options.target_time) {
	        this.loader.register(
	          HistoricalPlanningElement.identifier + '_' + i,
	          { url : qsb.append({ at_time: this.options.target_time })
	                     .build(projectPrefix + '/planning_elements.json') },
	          { storeIn: HistoricalPlanningElement.identifier,
	            readFrom: PlanningElement.identifier }
	        );
	      }
	    });
	  };


	  TimelineLoader.prototype.registerPlanningElementsByID = function (ids) {

	    this.inChunks(ids, function (planningElementIdsOfPacket, i) {
	      var projectPrefix = this.globalPrefix +
	                          PathHelper.projectsPath() +
	                          "/" +
	                          this.options.project_id;

	      // load current planning elements.
	      this.loader.register(
	        PlanningElement.identifier + '_IDS_' + i,
	        { url : projectPrefix +
	                '/planning_elements.json?ids=' +
	                planningElementIdsOfPacket.join(',')},
	        { storeIn: PlanningElement.identifier }
	      );
	      // load historical planning elements.
	      // TODO: load historical PEs here!
	      if (this.options.target_time) {
	        this.loader.register(
	          HistoricalPlanningElement.identifier + '_IDS_' + i,
	          { url : projectPrefix +
	                  '/planning_elements.json?ids=' +
	                  planningElementIdsOfPacket.join(',') },
	          { storeIn: HistoricalPlanningElement.identifier,
	            readFrom: PlanningElement.identifier }
	        );
	      }
	    });
	  };

	  TimelineLoader.prototype.inChunks = function (elements, iter) {
	    var i, current_elements;

	    i = 0;
	    elements = elements.slice();

	    while (elements.length > 0) {
	      i++;

	      current_elements = elements.splice(0, Timeline.PROJECT_ID_BLOCK_SIZE);

	      iter.call(this, current_elements, i);
	    }
	  };

	  TimelineLoader.prototype.storeData = function (data, identifier) {
	    // console.log('- TimelineLoader: storeData');
	    // console.log({data: data, identifier: identifier});

	    // console.log({dataToBeExtended: data[identifier]});
	    // console.log({dataExtended: this.dataEnhancer.createObjects(data, identifier)});

	    if (!jQuery.isArray(data)) {
	      this.die("Expected an instance of Array. Got something else. This " +
	               "should never happen.", data, identifier);
	    }

	    this.data[identifier] = this.data[identifier] || {};
	    jQuery.extend(
	        this.data[identifier],
	        this.dataEnhancer.createObjects(data, identifier));
	  };

	  TimelineLoader.prototype.getCurrentlyLoadingTypes = function (unique) {
	    var currentlyLoadingTypes = [], m = {};

	    jQuery.each(this.loader.getLoadingIdentifiers(), function (i, e) {
	      currentlyLoadingTypes.push(e.replace(/_\d+$/, ''));
	    });

	    if (unique) {
	      jQuery.each(currentlyLoadingTypes, function (i, e) { m[e] = e; });
	      currentlyLoadingTypes = [];
	      jQuery.each(m, function (i, e) { currentlyLoadingTypes.push(e); });
	    }

	    return currentlyLoadingTypes;
	  };

	  TimelineLoader.prototype.doneLoading = function (param) {
	    if (typeof param !== 'string') {
	      param = param.identifier;
	    }
	    if (param === Project.identifier ||
	        param === PlanningElement.identifier) {

	      return jQuery.inArray(param, this.getCurrentlyLoadingTypes()) === -1;
	    }
	    else {
	      return this.data[param] !== undefined;
	    }
	  };

	  TimelineLoader.prototype.getRemainingPlanningElements = function () {
	    var i,
	      necessaryIDs = [],
	      vp = this.options.include_planning_elements;

	    for (i = 0; i < vp.length; i += 1) {
	      if (typeof this.data.planning_elements[vp[i]] === "undefined") {
	        necessaryIDs.push(vp[i]);
	      }
	    }

	    return necessaryIDs;
	  };

	  function addUserIDsFromElementAttributes(results, attributes, element) {
	    var k, userid;
	    for (k = 0;  k < attributes.length; k += 1) {
	      userid = element[attributes[k]];
	      if (userid && results.indexOf(userid) === -1) {
	        results.push(userid);
	      }
	    }
	  }

	  function addUserIDsForElementsByAttribute(results, attributes, elements) {
	    var i, keys = Object.keys(elements), current;
	    for (i = 0; i < keys.length; i += 1) {
	      current = elements[keys[i]];

	      addUserIDsFromElementAttributes(results, attributes, current);
	    }
	  }

	  TimelineLoader.prototype.getUsersToLoad = function () {
	    var results = [];

	    var i, userFields = [], cf = this.data.custom_fields;
	    for (var attr in cf) {
	      if (cf.hasOwnProperty(attr) && cf[attr].field_format === "user") {
	          userFields.push("cf_" + cf[attr].id);
	      }
	    }

	    addUserIDsForElementsByAttribute(results, Timeline.USER_ATTRIBUTES.PLANNING_ELEMENT.concat(userFields), this.data.planning_elements);
	    addUserIDsForElementsByAttribute(results, Timeline.USER_ATTRIBUTES.PROJECT, this.data.projects);

	    return results;
	  };


	  TimelineLoader.prototype.getRelevantProjectIdsBasedOnReportings = function () {
	    var i,
	        relevantProjectIds = [this.options.project_id];

	    if (this.doneLoading(Reporting)) {
	      for (i in this.data.reportings) {
	        if (this.data.reportings.hasOwnProperty(i)) {
	          relevantProjectIds.push(this.data.reportings[i].getProjectId());
	        }
	      }

	      this.getRelevantProjectIdsBasedOnReportings = function () {
	        return relevantProjectIds;
	      };
	    }
	    else {
	      console.warn("Getting relevant project ids before reportings are " +
	                   "loaded. This might be a bug.");
	    }

	    return relevantProjectIds;
	  };

	  TimelineLoader.prototype.getProject = function (idOrIdentifier) {
	    var i, ps = this.data.projects;

	    if (typeof idOrIdentifier === 'string') {
	      for (i in ps) {
	        if (ps.hasOwnProperty(i) && ps[i].identifier === idOrIdentifier) {
	          return ps[i];
	        }
	      }
	    }
	    else {
	      return this.data.projects[idOrIdentifier];
	    }
	  };

	  TimelineLoader.prototype.getRelevantProjectIdsBasedOnProjects = function () {
	    var relevantProjectIds = this.getRelevantProjectIdsBasedOnReportings(),
	        timelineLoader     = this;

	    if (this.doneLoading(Project)) {
	      relevantProjectIds = jQuery.grep(relevantProjectIds, function (e, i) {
	        return timelineLoader.getProject(e) && timelineLoader.getProject(e).filteredOut();
	      }, true);

	      this.getRelevantProjectIdsBasedOnProjects = function () {
	        return relevantProjectIds;
	      };
	    }
	    else {
	      console.warn("Getting relevant project ids before projects are " +
	                   "loaded. This might be a bug.");
	    }

	    return relevantProjectIds;
	  };

	  TimelineLoader.prototype.shouldLoadReportings = function (lastLoaded) {
	    return lastLoaded === Reporting.identifier;
	  };

	  TimelineLoader.prototype.shouldLoadPlanningElements = function (lastLoaded) {

	    if (this.doneLoading(Project) &&
	        this.doneLoading(Reporting) &&
	        this.doneLoading(ProjectType)) {

	      this.shouldLoadPlanningElements = function () { return false; };

	      return true;
	    }
	    return false;
	  };

	  TimelineLoader.prototype.shouldLoadUsers = function (lastLoaded) {
	    if (this.doneLoading(Project) &&
	        this.doneLoading(Reporting) &&
	        this.doneLoading(ProjectType) &&
	        this.doneLoading(PlanningElement)) {

	      // this will not work for pes from another project (like vertical pes)!
	      // but as we do not display users for this data currently,
	      // we will not add them yet
	      this.shouldLoadUsers = function () { return false; };

	      return true;
	    }
	    return false;
	  };

	  TimelineLoader.prototype.shouldLoadRemainingPlanningElements = function (lastLoaded) {

	    if (this.doneLoading(Project) &&
	        this.doneLoading(Reporting) &&
	        this.doneLoading(ProjectType) &&
	        this.doneLoading(PlanningElement)) {

	      this.shouldLoadRemainingPlanningElements = function () { return false; };

	      return true;
	    }
	    return false;
	  };

	  TimelineLoader.prototype.checkDependencies = function (identifier) {
	    if (this.shouldLoadReportings(identifier)) {
	      this.registerProjects(this.getRelevantProjectIdsBasedOnReportings());
	    } else if (this.shouldLoadPlanningElements(identifier)) {
	      this.data = this.dataEnhancer.enhance(this.data);

	      this.registerPlanningElements(this.getRelevantProjectIdsBasedOnProjects());
	    } else {
	      if (this.shouldLoadRemainingPlanningElements(identifier)) {
	        this.registerPlanningElementsByID(this.getRemainingPlanningElements());
	      }

	      if (this.shouldLoadUsers(identifier)) {
	       this.registerUsers(this.getUsersToLoad());
	      }
	    }

	    this.loader.load();
	  };

	  TimelineLoader.prototype.complete = function (data) {
	    // This function is just a placeholder to let you know, that you should
	    // probably register an event handler on 'complete'. The handler should
	    // have the following signature:
	    //
	    //   function (e, data) {}
	    this.dataEnhancer.clearUpCustomFieldColumns();

	    return data;
	  };


	  var TimelineLoaderService = {
	    createTimelineLoader: function(timeline) {
	      return new TimelineLoader(timeline, timeline.getTimelineLoaderOptions());
	    },
	    loadTimelineData: function(timeline) {
	      // console.log('- TimelineLoaderService: loadTimelineData');

	      var deferred = $q.defer();
	      var timelineLoader = null;

	      try {
	        // prerequisites (3rd party libs)
	        timeline.checkPrerequisites();

	        timelineLoader = TimelineLoaderService.createTimelineLoader(timeline);
	        timelineLoader.registerTimelineElements();

	        jQuery(timelineLoader).on('complete', function(e, data) {
	          angular.extend(timeline, data);
	          deferred.resolve(timeline);
	        });

	        timeline.safetyHook = window.setTimeout(function() {
	          deferred.reject(I18n.t('js.timelines.errors.report_timeout'));
	        }, Timeline.LOAD_ERROR_TIMEOUT);

	        timelineLoader.load();

	      } catch (e) {
	        deferred.reject(e);
	      }
	      return deferred.promise;
	    }
	  };

	  return TimelineLoaderService;
	};


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.uiComponents')
	  .directive('accessibleByKeyboard', [__webpack_require__(
	    115)])
	  .directive('accessibleCheckbox', [__webpack_require__(116)])
	  .directive('accessibleElement', [__webpack_require__(117)])
	  .directive('activityComment', [
	    '$timeout',
	    'I18n',
	    'ActivityService',
	    'ConfigurationService',
	    'AutoCompleteHelper',
	    __webpack_require__(118)
	  ])
	  .directive('authoring', ['I18n', 'PathHelper', 'TimezoneService', __webpack_require__(
	    119)])
	  .directive('backUrl', [__webpack_require__(120)])
	  .directive('copyToClipboard', [
	    'I18n',
	    '$timeout',
	    'NotificationsService',
	    'ConfigurationService',
	    __webpack_require__(121)
	  ])
	  .directive('opDate', ['TimezoneService', __webpack_require__(122)])
	  .directive('opTime', ['TimezoneService', __webpack_require__(123)])
	  .directive('opDateTime', ['$compile', 'TimezoneService', __webpack_require__(124)])
	  .directive('emptyElement', [__webpack_require__(125)])
	  .constant('ENTER_KEY', 13)
	  .directive('executeOnEnter', ['ENTER_KEY', __webpack_require__(
	    126)])
	  .directive('expandableSearch', ['ENTER_KEY', __webpack_require__(127)])
	  .directive('focus', ['FocusHelper', __webpack_require__(128)])
	  .constant('FOCUSABLE_SELECTOR', 'a, button, :input, [tabindex], select')
	  .service('FocusHelper', ['$timeout', 'FOCUSABLE_SELECTOR', __webpack_require__(
	    129)])
	  .directive('hasDropdownMenu', [
	    '$rootScope',
	    '$injector',
	    '$window',
	    '$parse',
	    'FocusHelper',
	    __webpack_require__(130)
	  ])
	  .directive('hasPreview', [
	    __webpack_require__(131)
	  ])
	  .service('I18n', [__webpack_require__(132)])
	  .directive('iconWrapper', [__webpack_require__(133)])
	  .directive('inaccessibleByTab', [__webpack_require__(134)])
	  .directive('modal', [__webpack_require__(135)])
	  .directive('modalLoading', ['I18n', __webpack_require__(114)])
	  .directive('progressBar', ['I18n', __webpack_require__(136)])
	  .constant('LABEL_MAX_CHARS', 40)
	  .constant('KEY_CODES', {
	    enter: 13,
	    up: 38,
	    down: 40
	  })
	  .directive('selectableTitle', [__webpack_require__(137)])
	  .directive('interactiveTable', ['$timeout', '$window', __webpack_require__(138)])
	  .constant('DOUBLE_CLICK_DELAY', 300)
	  // Thanks to http://stackoverflow.com/a/20445344
	  .directive('singleClick', [
	    'DOUBLE_CLICK_DELAY',
	    '$parse',
	    '$timeout',
	    __webpack_require__(139)
	  ])
	  .directive('slideToggle', [__webpack_require__(140)])
	  .directive('sortLink', ['I18n', 'SortService', __webpack_require__(
	    141)])
	  .directive('tablePagination', ['I18n', 'PaginationService', __webpack_require__(
	    142)])
	  .directive('toggledMultiselect', ['I18n', __webpack_require__(
	    143)])
	  .directive('toolbar', __webpack_require__(144))
	  .constant('ESC_KEY', 27)
	  .directive('userField', ['PathHelper', __webpack_require__(145)])
	  .directive('wikiToolbar', [__webpack_require__(146)])
	  .directive('zoomSlider', ['I18n', __webpack_require__(147)])
	  .directive('notifications', [__webpack_require__(148)])
	  .directive('notificationBox', ['I18n', __webpack_require__(149)])
	  .directive('uploadProgress', [__webpack_require__(150)])
	  .directive('attachmentIcon', [__webpack_require__(151)])
	  .filter('ancestorsExpanded', __webpack_require__(152))
	  .filter('latestItems', __webpack_require__(153))
	  .directive('highlightCol', [__webpack_require__(154)])
	  .directive('confirmPopup', ['$window', __webpack_require__(155)]);


/***/ },
/* 114 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n) {
	  return {
	    restrict: 'E',
	    templateUrl: '/templates/components/modal_loading.html',
	    scope: true,
	    link: function(scope, element, attributes) {
	      scope.I18n = I18n;
	    }
	  };
	};


/***/ },
/* 115 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    transclude: true,
	    scope: {
	      execute: '&',
	      linkClass: '@',
	      spanClass: '@'
	    },
	    template: "<a execute-on-enter='execute()' default-event-handling='defaultEventHandling'" +
	      " ng-click='execute()' href='' class='{{ linkClass }}'>" +
	      "<span ng-transclude class='{{ spanClass }}'></span>" +
	      "</a>",
	    link: function(scope, element, attrs) {
	      scope.defaultEventHandling = !attrs.execute;
	    }
	  };
	};


/***/ },
/* 116 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function() {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: {
	      name: '@',
	      checkboxId: '@',
	      checkboxTitle: '@',
	      checkboxValue: '=',
	      model: '='
	    },
	    templateUrl: '/templates/components/accessible_checkbox.html'
	  };
	};


/***/ },
/* 117 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    scope: {
	      visibleText: '=',
	      readableText: '=',
	    },
	    templateUrl: "/templates/components/accessible_element.html"
	  };
	};


/***/ },
/* 118 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function($timeout,
	    I18n,
	    ActivityService,
	    ConfigurationService,
	    AutoCompleteHelper) {
	  return {
	    restrict: 'E',
	    replace: true,
	    require: '^?exclusiveEdit',
	    scope: {
	      workPackage: '=',
	      activities: '='
	    },
	    templateUrl: '/templates/components/activity_comment.html',
	    link: function(scope, element, attrs, exclusiveEditController) {
	      exclusiveEditController.setCreator(scope);

	      scope.title = I18n.t('js.label_add_comment_title');
	      scope.buttonTitle = I18n.t('js.label_add_comment');
	      scope.buttonCancel = I18n.t('js.button_cancel');
	      scope.canAddComment = !!scope.workPackage.links.addComment;
	      scope.activity = { comment: '' };

	      scope.createComment = function() {
	        var descending = ConfigurationService.commentsSortedInDescendingOrder();
	        scope.processingComment = true;
	        ActivityService.createComment(scope.workPackage, scope.activities, descending, scope.activity.comment)
	          .then(function(response) {
	            scope.activity.comment = '';
	            scope.$emit('workPackageRefreshRequired', '');
	            scope.processingComment = false;
	            return response;
	          });
	      };

	      $timeout(function() {
	        AutoCompleteHelper.enableTextareaAutoCompletion(
	          angular.element.find('textarea.add-comment-text')
	        );
	      });
	    }
	  };
	};


/***/ },
/* 119 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(I18n, PathHelper, TimezoneService) {
	  return {
	    restrict: 'E',
	    replace: true,
	    scope: { createdOn: '=', author: '=', project: '=', activity: '=' },
	    templateUrl: '/templates/components/authoring.html',
	    link: function(scope, element, attrs) {
	      moment.locale(I18n.locale);

	      var createdOn = TimezoneService.parseDatetime(scope.createdOn);
	      var timeago = createdOn.fromNow();
	      var time = createdOn.format('LLL');

	      scope.I18n = I18n;
	      scope.authorLink = '<a href="'+ PathHelper.userPath(scope.author.id) + '">' + scope.author.name + '</a>';

	      if (scope.activity) {
	        scope.timestamp = '<a title="' + time + '" href="' + PathHelper.activityFromPath(scope.project, createdOn.format('YYYY-MM-DD')) + '">' + timeago + '</a>';
	      } else {
	        scope.timestamp = '<span class="timestamp" title="' + time + '">' + timeago + '</span>';
	      }
	    }
	  };
	};


/***/ },
/* 120 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    templateUrl: '/templates/components/back_url.html',
	  };
	};


/***/ },
/* 121 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(I18n, $timeout, NotificationsService, ConfigurationService) {
	  return {
	    restrict: 'A',
	    replace: false,
	    scope: { clipboardTarget: '@' },
	    link: function(scope, elem) {
	      var target = scope.clipboardTarget ? angular.element(scope.clipboardTarget) : elem;
	      elem.addClass('copy-to-clipboard');

	      elem.click(function(evt) {
	        var supported = (document.queryCommandSupported && document.queryCommandSupported('copy')),
	          addNotification = function(type, message) {
	            var notification;

	          $timeout(function() {
	            notification = NotificationsService[type](message);
	          }, 0);

	          // Remove the notification some time later
	          // but only when we're not in accessible mode
	          if (!ConfigurationService.accessibilityModeEnabled()) {
	            $timeout(function() {
	              NotificationsService.remove(notification);
	            }, 5000);
	          }
	        };

	        evt.preventDefault();

	        // At least select the input for the user
	        // even when clipboard API not supported
	        target.select().focus();

	        if (supported) {

	          try {
	            // Copy it to the clipboard
	            if (document.execCommand('copy')) {
	              addNotification('addSuccess', I18n.t('js.clipboard.copied_successful'));
	              return;
	            }
	          } catch (e) {
	            console.log(
	              'Your browser seems to support the clipboard API, but copying failed: ' + e
	            );
	          }
	        }

	        addNotification('addError', I18n.t('js.clipboard.browser_error'));
	      });
	    }
	  };
	};


/***/ },
/* 122 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(TimezoneService) {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: { dateValue: '=', hideTitle: '@', noDateText: '=' },
	    template: '<span title="{{ dateTitle }}">{{date}}</span>',
	    link: function(scope, element, attrs) {
	      function setDate(date) {
	        if(date){
	          scope.date = TimezoneService.formattedDate(date);
	        } else {
	          scope.date = scope.noDateText;
	        }

	        if (!scope.hideTitle) {
	          scope.dateTitle = scope.date;
	        }
	      }
	      
	      setDate(scope.dateValue);
	      scope.$watch('dateValue', function(newVal) {
	        setDate(newVal);
	      });
	    }
	  };
	};


/***/ },
/* 123 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(TimezoneService) {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: { timeValue: '=', hideTitle: '@' },
	    template: '<span title="{{ timeTitle }}">{{time}}</span>',
	    link: function(scope, element, attrs) {
	      scope.time = TimezoneService.formattedTime(scope.timeValue);
	      if (!scope.hideTitle) {
	        scope.timeTitle = scope.time;
	      }
	    }
	  };
	};


/***/ },
/* 124 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($compile, TimezoneService) {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: { dateTimeValue: '=' },
	    template: '<span title="{{ date }} {{ time }}"><op-date date-value="dateTimeValue" hide-title="true"></op-date> <op-time time-value="dateTimeValue" hide-title="true"></op-time></span>',
	    link: function(scope, element, attrs) {
	      scope.date = TimezoneService.formattedDate(scope.dateTimeValue);
	      scope.time = TimezoneService.formattedTime(scope.dateTimeValue);

	      $compile(element.contents())(scope);
	    }
	  };
	};


/***/ },
/* 125 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    templateUrl: "/templates/components/empty_element.html"
	  };
	};


/***/ },
/* 126 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(ENTER_KEY) {
	  return {
	    restrict: 'A',
	    scope: { executeOnEnter: '&', defaultEventHandling: '=' },
	    link: function(scope, element) {
	      element.on('keydown', function(event) {
	        if(event.which === ENTER_KEY) {
	          if (!scope.defaultEventHandling) {
	            event.preventDefault();
	          }
	          scope.$apply(function() {
	            scope.$eval(scope.executeOnEnter, { 'event': event });
	          });
	        }
	      });
	    }
	  };
	};


/***/ },
/* 127 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(ENTER_KEY) {
	  return {
	    restrict: 'E',
	    replace: true,
	    link: function(scope, elem) {
	      var btn = elem.find('a'),
	        input = elem.find('input'),
	        setCollapsed;

	      // Search is collapsed initially
	      scope.collapsed = true;
	      setCollapsed = function(collapsedState) {
	          scope.collapsed = collapsedState;
	          scope.$apply();
	        };

	      btn.on('click mousedown focus keypress', function(evt) {
	        if (scope.collapsed === true) {
	          setCollapsed(false);
	          // Force focus to the search input
	          // The somewhat arbitrary delay of 20ms is required
	          // since Firefox blocks focus changing events
	          // immdetiately after an element is focused.
	          // Smaller delays will cause Firefox to ignore that focus
	          // Relevant: http://stackoverflow.com/questions/7046798
	          setTimeout(function() { input.focus(); }, 20);

	          // Hide on lost focus
	          elem.on('focusout', function() {
	            // Allow DOM to propagate new focus
	            setTimeout(function() {
	              // Hide unless icon clicked
	              if (elem.find(':active,:focus').length === 0) {
	                setCollapsed(true);
	                $(elem).off('focusout');
	              }
	            }, 10);
	          });
	          evt.preventDefault();
	        } else {
	          // Submit only when clicked or enter on btn
	          if (evt.type === 'mousedown' ||
	             (evt.type === 'keypress' && evt.which === ENTER_KEY)) {
	            elem.closest('form').submit();
	          }
	        }
	      });
	    }
	  };
	};


/***/ },
/* 128 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(FocusHelper) {

	  function isSelect2Element(attrs) {
	    var select2attributes = Object.keys(attrs).filter(function(attribute) {
	      return attribute.search(/select2/i) >= 0;
	    });

	    return select2attributes.length > 0;
	  }

	  function updateFocus(scope, element, attrs) {
	    if (element.hasClass('ui-select-multiple')) {
	      return element.find('input.ui-select-search').focus();
	    }

	    var condition = (attrs.focus) ? scope.$eval(attrs.focus) : true;

	    if (condition) {
	      if (isSelect2Element(attrs)) {
	        FocusHelper.focusSelect2Element(element);
	      } else {
	        FocusHelper.focusElement(element);
	      }
	    }
	  }

	  return {
	    link: function(scope, element, attrs) {
	      updateFocus(scope, element, attrs);

	      scope.$on('updateFocus', function() {
	        updateFocus(scope, element, attrs);
	      });
	    }
	  };
	};


/***/ },
/* 129 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function($timeout, FOCUSABLE_SELECTOR) {
	  var FocusHelper = {
	    getFocusableElement: function(element) {
	      var focusser = element.find('input.ui-select-focusser');

	      if (focusser.length > 0) {
	        return focusser[0];
	      }

	      var focusable = element;

	      if (!element.is(FOCUSABLE_SELECTOR)) {
	        focusable = element.find(FOCUSABLE_SELECTOR);
	      }

	      return focusable[0];
	    },

	    focus: function(element) {
	      var focusable = angular.element(FocusHelper.getFocusableElement(element)),
	          $focusable = angular.element(focusable),
	          isDisabled = $focusable.is('[disabled]');

	      if(isDisabled) {
	        $focusable.removeProp('disabled');
	      }

	      focusable.focus();

	      if(isDisabled) {
	        $focusable.prop('disabled');
	      }
	    },

	    focusElement: function(element) {
	      $timeout(function() {
	        FocusHelper.focus(element);
	      });
	    },

	    focusUiSelect: function(element) {
	      $timeout(function() {
	        element.find('.ui-select-match').trigger('click');
	      });
	    },

	    // TODO: remove when select2 is not used
	    focusSelect2Element: function(element) {
	      var focusSelect2ElementRecursiv = function(retries) {
	        $timeout(function() {
	          element.select2('focus');

	          var isSelect2Focused = angular.element(document.activeElement).hasClass('select2-input');

	          if (!isSelect2Focused && retries > 0) {
	            focusSelect2ElementRecursiv(--retries);
	          }
	        });
	      };

	      focusSelect2ElementRecursiv(3);
	    }
	  };

	  return FocusHelper;
	};


/***/ },
/* 130 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($rootScope, $injector, $window, $parse, FocusHelper) {

	  function getCssPositionProperties(dropdown, trigger) {
	    var hOffset = 0,
	      vOffset = 0;
	    if (dropdown.hasClass('dropdown-anchor-top')) {
	      vOffset = - dropdown.outerHeight() - trigger.outerHeight() + parseInt(trigger.css('margin-top'), 10);
	    }

	    // Styling logic taken from jQuery-dropdown plugin: https://github.com/plapier/jquery-dropdown
	    // (dual MIT/GPL-Licensed)

	    // Position the dropdown relative-to-parent or relative-to-document
	    if (dropdown.hasClass('dropdown-relative')) {
	      return {
	        left: dropdown.hasClass('dropdown-anchor-right') ?
	          trigger.position().left -
	          (dropdown.outerWidth(true) - trigger.outerWidth(true)) -
	          parseInt(trigger.css('margin-right'), 10) + hOffset :
	          trigger.position().left + parseInt(trigger.css('margin-left'), 10) + hOffset,
	        top: trigger.position().top +
	          trigger.outerHeight(true) -
	          parseInt(trigger.css('margin-top'), 10) + vOffset
	      };
	    } else {
	      return {
	        left: dropdown.hasClass('dropdown-anchor-right') ?
	          trigger.offset().left - (dropdown.outerWidth() - trigger.outerWidth()) + hOffset : trigger.offset().left + hOffset,
	        top: trigger.offset().top + trigger.outerHeight() + vOffset
	      };
	    }
	  }

	  function getPositionPropertiesOfEvent(event) {
	    var position = { };

	    if (event.pageX && event.pageY) {
	      position.top = Math.max(event.pageY, 0);
	      position.left = Math.max(event.pageX, 0);
	    } else {
	      var bounding = angular.element(event.target)[0].getBoundingClientRect();

	      position.top = Math.max(bounding.bottom, 0);
	      position.left = Math.max(bounding.left, 0);
	    }

	    return position;
	  }

	  function getCssPositionPropertiesOfEvent(event) {
	    var position = getPositionPropertiesOfEvent(event);

	    position.top += 'px';
	    position.left += 'px';

	    return position;
	  }

	  return {
	    restrict: 'A',
	    controller: [function() {
	      var dropDownMenuOpened = false;

	      this.open = function() {
	        dropDownMenuOpened = true;
	      };
	      this.close = function() {
	        dropDownMenuOpened = false;
	      };
	      this.opened = function() {
	        return dropDownMenuOpened;
	      };
	    }],
	    link: function(scope, element, attrs, ctrl) {
	      var contextMenu = $injector.get(attrs.target),
	        locals = {},
	        pointerPosition,
	        pointerCssPosition,
	        win = angular.element($window),
	        menuElement,
	        afterFocusOn = attrs.afterFocusOn,
	        positionRelativeTo = attrs.positionRelativeTo,
	        triggerOnEvent = (attrs.triggerOnEvent || 'click') + '.dropdown.openproject';

	      /* contextMenu      is a mandatory attribute and used to bind a specific context
	                          menu to the trigger event
	         triggerOnEvent   allows for binding the event for opening the menu to "click" */


	      function toggle(event) {
	        active() ? close() : open(event);
	      }

	      function active() {
	        return contextMenu.active() && ctrl.opened();
	      }

	      function open(event) {
	        var ignoreFocusOpener = true;
	        pointerPosition = getPositionPropertiesOfEvent(event);
	        pointerCssPosition = getCssPositionPropertiesOfEvent(event);
	        $rootScope.$broadcast('openproject.dropdown.closeDropdowns', ignoreFocusOpener);
	        // prepare locals, these define properties to be passed on to the context menu scope
	        var localKeys = (attrs.locals || '').split(',').map(function(local) {
	          return local.trim();
	        });
	        angular.forEach(localKeys, function(key) {
	          locals[key] = scope[key];
	        });

	        ctrl.open();

	        contextMenu.open(element, locals)
	          .then(function(element) {
	            menuElement = element;
	            menuElement.trap();
	            positionDropdown();
	            menuElement.on('click', function(e) {
	              // allow inputs to be clickable
	              // without closing the dropdown
	              if (angular.element(e.target).is(':input')) {
	                e.stopPropagation();
	              }
	            });
	          });
	      }

	      function close(ignoreFocusOpener) {
	        ctrl.close();
	        var disableFocus = ignoreFocusOpener;
	        contextMenu.close(disableFocus).then(function() {
	          if (!ignoreFocusOpener) {
	            FocusHelper.focusElement(afterFocusOn ? element.find(afterFocusOn) : element);
	          }
	        });
	      }

	      function positionDropdown() {
	        var positionRelativeToElement = positionRelativeTo ?
	          element.find(positionRelativeTo) : element;
	        if (attrs.triggerOnEvent == 'contextmenu') {
	          menuElement.css(pointerCssPosition);
	          adjustPosition(menuElement, pointerPosition);
	        } else {
	          menuElement.css(getCssPositionProperties(menuElement, positionRelativeToElement));
	        }
	      }

	      function adjustPosition($element, pointerPosition) {
	        var viewport = {
	          top : win.scrollTop(),
	          left : win.scrollLeft()
	        };

	        viewport.right = viewport.left + win.width();
	        viewport.bottom = viewport.top + win.height();
	        var bounds = $element.offset();
	        bounds.right = bounds.left + $element.outerWidth();
	        bounds.bottom = bounds.top + $element.outerHeight();
	        if (viewport.right < bounds.right) {
	          $element.css('left', pointerPosition.left - $element.outerWidth());
	        }
	        if (viewport.bottom < bounds.bottom) {
	          $element.css('top', pointerPosition.top - $element.outerHeight());
	        }
	      }

	      element.bind(triggerOnEvent, function(event) {
	        event.preventDefault();
	        event.stopPropagation();
	        scope.$apply(function() {
	          toggle(event);
	        });

	        // set css position parameters after the digest has been completed
	        if (contextMenu.active()) positionDropdown();
	      });

	      scope.$on('openproject.dropdown.closeDropdowns', function(event, ignoreFocusOpener) {
	        if (!ctrl.opened()) {
	          return;
	        }
	        close(ignoreFocusOpener);
	      });

	      scope.$on('openproject.dropdown.reposition', function() {
	        if (contextMenu.active() && menuElement && ctrl.opened()) {
	          positionDropdown();
	        }
	      });

	      var elementKeyUpString = 'keyup.contextmenu.dropdown.openproject';
	      element
	        .off(elementKeyUpString)
	        .on(elementKeyUpString, function(event) {
	        // Alt + Shift + F10
	        if (event.keyCode === 121 && event.shiftKey && event.altKey) {
	          if (!contextMenu.active()) {
	            open(event);
	          }
	        }
	      });


	      // We need the off/on stuff in order to not have a new listener
	      // for every linking. It's not only not efficient, if causes bugs
	      // because of closures
	      // we also add an event namespace to avoid off'ing unrelated listeners
	      // We can leave it like this
	      // or move to the compile function of the directive
	      // or move to a service and make sure it's called only once

	      var repositioningEventString = 'resize.dropdown.openproject, mousewheel.dropdown.openproject';
	      win
	        .off(repositioningEventString)
	        .on(repositioningEventString, function() {
	          $rootScope.$broadcast('openproject.dropdown.reposition');
	        });

	      var keyUpEventString = 'keyup.dropdown.openproject';
	      win
	        .off(keyUpEventString).on(keyUpEventString, function(event) {
	        if (event.keyCode === 27) {
	          $rootScope.$broadcast('openproject.dropdown.closeDropdowns');
	        }
	      });

	      function handleWindowClickEvent() {
	        $rootScope.$broadcast('openproject.dropdown.closeDropdowns');
	      }

	      // Firefox treats a right-click as a click and a contextmenu event while other browsers
	      // just treat it as a contextmenu event
	      var clickEventString = 'click.dropdown.openproject';
	      win
	        .off(clickEventString)
	        .on(clickEventString, handleWindowClickEvent);
	      win
	        .off(triggerOnEvent)
	        .on(triggerOnEvent, handleWindowClickEvent);
	    }
	  };
	};


/***/ },
/* 131 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    scope: {},
	    link: function(scope, element, attrs) {
	      var href = attrs.href;
	      var id = attrs.id;
	      var target = attrs.previewArea ||  '#preview';
	      element.on('click', function() {
	        jQuery.ajax({
	          url: href,
	          type: 'POST',
	          data: angular.element('#' + id.replace(/(-preview)/g, '')).serialize()
	            .replace(
	              '_method=patch&', ''),
	          success: function(data) {
	            angular.element(target).html(data);
	            angular.element('html, body').animate({
	                scrollTop: angular.element('#preview').offset()
	                  .top
	              },
	              'slow');
	          }
	        });

	        return false;
	      });
	    }
	  };
	};


/***/ },
/* 132 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function() {
	  return I18n;
	};


/***/ },
/* 133 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(){
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: { iconName: '@', title: '@iconTitle', cssClass: '@' },
	    templateUrl: '/templates/components/icon_wrapper.html'
	  };
	};


/***/ },
/* 134 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    scope: {
	      isInaccessible: "=inaccessibleByTab"
	    },
	    link: function(scope, element, attrs) {
	      scope.oldTabIndex = element.attr("tabindex");
	      scope.$watch('isInaccessible',
	        function(isInaccessible) {
	          if (isInaccessible) {
	            var currentTabIndex = element.attr("tabindex");
	            if (currentTabIndex != "-1") {
	              scope.oldTabIndex = currentTabIndex;
	            }
	            element.attr("tabindex", -1);
	            element.attr('aria-disabled', true);
	          } else {
	            element.attr('aria-disabled', false);
	            if (scope.oldTabIndex) {
	              element.attr("tabindex", scope.oldTabIndex);
	            } else {
	              element.removeAttr("tabindex");
	            }
	          }
	        }
	      );
	    }
	  };
	};


/***/ },
/* 135 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    scope: {
	      target: '='
	    },
	    link: function(scope, element, attributes) {
	      element.on('click', function(e) {
	        e.preventDefault();

	        if (e.which == 1 && !e.ctrlKey && !e.metaKey) {
	          modalHelperInstance.createModal(scope.target || attributes['href'], function (modalDiv) {});
	        } else {
	          window.open(scope.target || attributes['href'], '_blank');
	        }
	      });
	    }
	  };
	};


/***/ },
/* 136 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(I18n) {
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: {
	      progress: '=',
	      width: '@',
	      legend: '@'
	    },
	    templateUrl: '/templates/components/progress_bar.html',
	    link: function(scope) {
	      scope.I18n = I18n;

	      // apply defaults
	      scope.width = scope.width || '100px';
	      scope.legend = scope.legend || '';

	      scope.scaleLength = 100;

	      scope.$watch('progress', function(progress) {
	        scope.progressInPercent = Math.round(Number(progress));
	      });
	    }
	  };
	};


/***/ },
/* 137 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function() {
	  return {
	    restrict: 'E',
	    replace: true,
	    scope: {
	      selectedTitle: '=',
	      groups: '=',
	      transitionMethod: '='
	    },
	    templateUrl: '/templates/components/selectable_title.html'
	  };
	};


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($timeout, $window){
	  return {
	    restrict: 'A',

	    link: function(scope, element) {
	      if (getTable().filter('table').length === 0) {
	        throw 'interactive-table needs to be defined on a \'table\' tag';
	      }

	      function getTable() {
	        return element;
	      }

	      function getInnerContainer() {
	        return element.parent('.generic-table--results-container');
	      }

	      function getOuterContainer() {
	        return element.closest('.generic-table--container');
	      }

	      function isWorkPackagesTable () {
	        return element.closest('.work-package-table--container').length !== 0;
	      }

	      function getBackgrounds() {
	        return getInnerContainer().find('.generic-table--header-background,' +
	                                        '.generic-table--footer-background');
	      }

	      function getHeadersFooters() {
	        return element.find(
	          '.generic-table--sort-header-outer,' +
	          '.generic-table--header-outer,' +
	          '.generic-table--footer-outer'
	        );
	      }

	      function setTableContainerWidths() {
	        // adjust overall containers
	        var tableWidth = getTable().width(),
	          scrollBarWidth = 16;

	        // account for a possible scrollbar
	        if (tableWidth > document.documentElement.clientWidth - scrollBarWidth) {
	          tableWidth += scrollBarWidth;
	        }
	        if (tableWidth > getOuterContainer().width()) {
	          // force containers to the width of the table
	          getInnerContainer().width(tableWidth);
	          getBackgrounds().width(tableWidth);
	        } else {
	          // ensure table stretches to container sizes
	          getInnerContainer().css('width', '100%');
	          if(isWorkPackagesTable()) {
	            // HACK: This prevents a horizontal scroll bar in
	            //       the work package table when there is nothing to scroll
	            getBackgrounds().css('width', 'calc(100% - 10px)');
	          }
	          else {
	            getBackgrounds().css('width', '100%');
	          }
	        }
	      }

	      function setHeaderFooterWidths() {
	        getHeadersFooters().each(function() {
	          var spacer = angular.element(this).parent();

	          var width = spacer.width();

	          if (width !== 0) {
	            angular.element(this).css('width', width + 'px');
	          }
	        });
	      }

	      function invalidateWidths() {
	        getInnerContainer().css('width', 'auto');
	        getBackgrounds().css('width', 'auto');
	        getHeadersFooters().each(function() {
	          angular.element(this).css('width', 'auto');
	        });
	      }

	      var setTableWidths = function() {
	        if(!getTable().is(':visible')) {
	          return;
	        }
	        $timeout(function() {
	          invalidateWidths();
	          setTableContainerWidths();
	          setHeaderFooterWidths();
	        });
	      };

	      var cloneSpacer = function() {
	        getHeadersFooters().each(function() {
	          var html = angular.element(this).text();
	          var hiddenForSighted = angular.element(this).find('.hidden-for-sighted').text();

	          html = html.replace(hiddenForSighted, '');

	          var spacerHtml = '<div class="generic-table--header-spacer">' + html + '</div>';

	          var newElement = angular.element(spacerHtml);

	          newElement.appendTo(angular.element(this).parent());
	        });
	      };

	      var initialize = function() {
	        cloneSpacer();
	        setTableWidths();
	      };

	      var mouseoverHandler = function () {
	        angular.element(this).off('mouseover', mouseoverHandler);
	        setHeaderFooterWidths();
	      };

	      angular.element(element)
	        .closest('.generic-table--container')
	        .on('mouseover', mouseoverHandler);

	      $timeout(initialize);
	      angular.element($window).on('resize', _.debounce(setTableWidths, 50));
	      scope.$on('$stateChangeSuccess', function() {
	        $timeout(setTableWidths, 200);
	      });
	      scope.$on('openproject.layout.navigationToggled', function() {
	        $timeout(setTableWidths, 200);
	      });
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 139 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components

	// Thanks to http://stackoverflow.com/a/20445344
	module.exports = function(DOUBLE_CLICK_DELAY, $parse, $timeout) {

	  return {
	    restrict: 'A',
	    link: function(scope, element, attrs) {
	      var fn = $parse(attrs.singleClick);
	      var clicks = 0, timer = null;

	      if (fn) {
	        element.on('click', function (event) {
	          clicks++;  //count clicks
	          if(clicks === 1) {
	            timer = $timeout(function() {
	              fn(scope, { $event: event });
	              clicks = 0;             //after action performed, reset counter
	            }, DOUBLE_CLICK_DELAY);
	          } else {
	            $timeout.cancel(timer);   //prevent single-click action
	            clicks = 0;               //after action performed, reset counter
	          }
	        });
	      }
	    }
	  };
	};


/***/ },
/* 140 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    scope: {
	      speed: '@',
	      collapsed: '='
	    },
	    link: function(scope, element) {
	      if (scope.collapsed) element.hide();

	      var defaultSpeed = 'fast';

	      scope.$watch('collapsed', function(state, formerState) {
	        if (state !== formerState) element.slideToggle(scope.speed || defaultSpeed, null);
	      });
	    }
	  };
	};


/***/ },
/* 141 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, SortService) {
	  return {
	    restrict: 'E',
	    transclude: true,
	    scope: { sortAttr: '@', sortFunc: '&' },
	    templateUrl: '/templates/components/sort_link.html',
	    link: function(scope, element, attrs) {
	      var getSortTitle = function() {
	        var title = "";
	        var attribute = angular.element(element[0]).find('span.ng-scope').text();

	        if (SortService.getColumn().indexOf(scope.sortAttr) >= 0) {
	          if (SortService.isDescending()) {
	            title = I18n.t('js.label_descending');
	          } else {
	            title = I18n.t('js.label_ascending');
	          }

	          title += ' ' + I18n.t('js.label_sorted_by') + ' ' + attribute;
	        } else {
	          title = I18n.t('js.label_sort_by') + ' ' + attribute;
	        }

	        return title;
	      };

	      var getSortCss = function() {
	        var sortDirection = 'asc';

	        if (SortService.isDescending()) {
	          sortDirection = 'desc';
	        }

	        return sortDirection;
	      };

	      scope.sortDirection = getSortCss();
	      scope.sortTitle = getSortTitle();

	      scope.$watch(SortService.getColumn, function() {
	        if (SortService.getColumn().indexOf(scope.sortAttr) < 0) {
	          scope.sortDirection = "";
	          scope.sortTitle = getSortTitle();
	        }
	      });

	      scope.sort = function() {
	        var sortPrefix = SortService.isDescending() ? '' : 'desc';

	        SortService.setColumn(scope.sortAttr);
	        SortService.setDirection(sortPrefix);

	        scope.sortDirection = getSortCss();
	        scope.sortTitle = getSortTitle();

	        scope.sortFunc();
	      };
	    }
	  };
	};


/***/ },
/* 142 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, PaginationService) {
	  return {
	    restrict: 'EA',
	    templateUrl: '/templates/components/table_pagination.html',
	    scope: {
	      totalEntries: '=',
	      updateResults: '&'
	    },
	    link: function(scope, element, attributes) {
	      scope.I18n = I18n;
	      scope.paginationOptions = PaginationService.getPaginationOptions();

	      scope.selectPerPage = function(perPage){
	        PaginationService.setPerPage(perPage);

	        updatePageNumbers();
	        scope.showPage(1);
	        scope.$emit('queryStateChange');
	        scope.updateResults();
	      };

	      scope.showPage = function(pageNumber){
	        PaginationService.setPage(pageNumber);

	        updateCurrentRangeLabel();
	        updatePageNumbers();

	        scope.$emit('workPackagesRefreshRequired');
	        scope.$emit('queryStateChange');
	        scope.updateResults();
	      };

	      /**
	       * @name updateCurrentRange
	       *
	       * @description Defines a string containing page bound information inside the directive scope
	       */
	      function updateCurrentRangeLabel() {
	        if (scope.totalEntries){
	          scope.currentRange = "(" + PaginationService.getLowerPageBound() + " - " + PaginationService.getUpperPageBound(scope.totalEntries) + "/" + scope.totalEntries + ")";
	        } else {
	          scope.currentRange = "(0 - 0/0)";
	        }
	      }

	      /**
	       * @name updatePageNumbers
	       *
	       * @description Defines a list of all pages in numerical order inside the scope
	       */
	      function updatePageNumbers() {
	        var maxVisible = PaginationService.getMaxVisiblePageOptions();
	        var truncSize = PaginationService.getOptionsTruncationSize();

	        var pageNumbers = [];
	        for (var i = 1; i <= Math.ceil(scope.totalEntries / scope.paginationOptions.perPage); i++) {
	          pageNumbers.push(i);
	        }

	        scope.prePageNumbers = truncatePageNums(pageNumbers, PaginationService.getPage() >= maxVisible, 0, Math.min(PaginationService.getPage() - Math.ceil(maxVisible / 2), pageNumbers.length - maxVisible), truncSize);
	        scope.postPageNumbers = truncatePageNums(pageNumbers, pageNumbers.length >= maxVisible + (truncSize * 2), maxVisible, pageNumbers.length, 0);
	        scope.pageNumbers = pageNumbers;
	      }

	      function truncatePageNums(pageNumbers, perform, disectFrom, disectLength, truncateFrom){
	        if (perform){
	          var tuncationSize = PaginationService.getOptionsTruncationSize();
	          var truncatedNums = pageNumbers.splice(disectFrom, disectLength);
	          if (truncatedNums.length >= tuncationSize * 2) truncatedNums.splice(truncateFrom, truncatedNums.length - tuncationSize);
	          return truncatedNums;
	        } else {
	          return [];
	        }
	      }

	      scope.$watch('totalEntries', function() {
	        updateCurrentRangeLabel();
	        updatePageNumbers();
	      });

	    }
	  };
	};


/***/ },
/* 143 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(I18n){
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: {
	      name: '=',
	      values: '=',
	      availableOptions: '=',
	      disabled: '=isDisabled'
	    },
	    templateUrl: '/templates/components/toggled_multiselect.html',
	    link: function(scope, element, attributes){
	      scope.I18n = I18n;

	      scope.toggleMultiselect = function(){
	        scope.isMultiselect ? switchToSingleSelect() : switchToMultiSelect();
	      };

	      function switchToMultiSelect() {
	        scope.isMultiselect = true;

	        if (scope.values && !Array.isArray(scope.values)) {
	          scope.values = [scope.values];
	        }
	      }

	      function switchToSingleSelect() {
	        scope.isMultiselect = false;

	        if (Array.isArray(scope.values)) {
	          scope.values = scope.values[0];
	        }
	      }

	      scope.isSelected = function(value) {
	        if (!scope.values) {
	          return false;
	        } else if (scope.isMultiselect) {
	          return scope.values.indexOf(value) !== -1 || scope.values.indexOf(value.toString()) !== -1;
	        } else {
	          return scope.values.toString() === value.toString();
	        }
	      };

	      scope.isMultiselect = (Array.isArray(scope.values) && scope.values.length > 1);
	    }
	  };
	};


/***/ },
/* 144 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function() {
	    return {
	      restrict: 'EA',
	      link: function(scope, element, attributes) {
	      }
	    };
	};


/***/ },
/* 145 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(PathHelper) {
	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/components/user_field.html',
	    scope: { user: '=' },
	    link: function(scope) {
	      scope.$watch('user', function() {
	        if (scope.user && scope.user.props && scope.user.props.name) {
	          scope.userName = scope.user.props.name;
	        }
	      });

	      scope.userPath = PathHelper.staticUserPath;
	    }
	  };
	};


/***/ },
/* 146 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var HELP_LINK_ONCLICK = 'window.open(&quot;/help/wiki_syntax&quot;, &quot;&quot;, ' +
	                          '&quot;resizable=yes, location=no, width=600, height=640, ' +
	                          'menubar=no, status=no, scrollbars=yes&quot;); return false;',
	      HELP_LINK_HTML = jQuery('<button title="' + I18n.t('js.inplace.link_formatting_help') + '"' +
	                              ' class="jstb_help icon icon-help" ' +
	                              ' type="button" ' +
	                              'onclick="' + HELP_LINK_ONCLICK + '">' +
	                              '<span class="hidden-for-sighted">' +
	                              I18n.t('js.inplace.link_formatting_help') +
	                              '</span></button>')[0],
	      PREVIEW_ENABLE_TEXT = I18n.t('js.inplace.btn_preview_enable'),
	      PREVIEW_DISABLE_TEXT = I18n.t('js.inplace.btn_preview_disable'),
	      PREVIEW_BUTTON_CLASS = 'jstb_preview',
	      PREVIEW_BUTTON_ATTRIBUTES = {
	        'class': PREVIEW_BUTTON_CLASS + ' icon-issue-watched',
	        type: 'button',
	        title: PREVIEW_ENABLE_TEXT,
	        text: ''
	      };

	  function link(scope, element) {
	    scope.isPreview = false;
	    var wikiToolbar = new jsToolBar(element.get(0));
	    wikiToolbar.setHelpLink(HELP_LINK_HTML);
	    wikiToolbar.draw();

	    var previewButtonAttributes = PREVIEW_BUTTON_ATTRIBUTES;
	    previewButtonAttributes.click = function() {
	      scope.$apply(function() {
	        scope.isPreview = !scope.isPreview;
	        scope.previewToggle();

	        var title = scope.isPreview ? PREVIEW_DISABLE_TEXT : PREVIEW_ENABLE_TEXT;
	        var toggledClasses = 'icon-issue-watched icon-ticket-edit -active';

	        element.closest('.inplace-edit--write-value')
	               .find('.' + PREVIEW_BUTTON_CLASS).attr('title', title)
	                                                .toggleClass(toggledClasses);
	      });
	    };

	    element
	      .closest('.inplace-edit--write-value')
	      .find('.jstb_help')
	      .after(jQuery('<button>', previewButtonAttributes));
	    // changes are made by jQuery, we trigger input event so that
	    // ng-model knows that the value changed
	    element.closest('.jstEditor').prevAll('.jstElements').find('button').on('click', function() {
	      element.trigger('input');
	    });
	  }

	  return {
	    restrict: 'A',
	    transclude: false,
	    link: link,
	    scope: {
	      previewToggle: '&'
	    }
	  };
	};


/***/ },
/* 147 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n) {

	  var latestId = 0;

	  return {
	    restrict: 'E',
	    scope: {
	      scales: '=',
	      selectedScale: '='
	    },
	    controller: function() {
	      var vm = this;

	      vm.minValue = 1;
	      vm.maxValue = vm.scales.length;
	      vm.sliderId = 'zoom-slider-' + latestId++;

	      vm.setSelectedScaleIndex = function(index) {
	        vm.selectedScaleIndex = index;
	        vm.selectedScale = vm.scales[vm.selectedScaleIndex];
	      };
	    },
	    controllerAs: 'ctrl',
	    bindToController: true,
	    templateUrl: '/templates/components/zoom_slider.html',
	    link: function(scope, element, attributes, ctrl) {
	      scope.labelText = I18n.t('js.timelines.zoom.slider');

	      var slider = element.find('input');
	      slider.on('change', function() {
	        ctrl.setSelectedScaleIndex(slider.val() - 1);
	        scope.$apply();
	      });

	      scope.$watch('ctrl.selectedScale', function(newScale) {
	        var newIndex = ctrl.scales.indexOf(newScale);

	        if (ctrl.selectedScaleIndex !== newIndex) {
	          ctrl.selectedScaleIndex = newIndex;
	        }
	      });

	    }
	  };
	};


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {

	  var notificationsController = function(scope) {
	    scope.stack = [];

	    scope.$on('notification.add', function(_e, notification) {
	      scope.stack.push(notification);
	    });

	    scope.$on('notification.remove', function(_e, notification) {
	      _.remove(scope.stack, function(element) {
	        return element === notification;
	      });
	    });
	  };

	  return {
	    scope: true,
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/components/notifications.html',
	    link: notificationsController
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 149 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n) {

	  var notificationBoxController = function(scope) {
	    scope.uploadCount = 0;
	    scope.show = false;
	    scope.I18n = I18n;

	    scope.canBeHidden = function() {
	      return scope.content.uploads.length > 5;
	    };

	    scope.removable = function() {
	      return scope.content.type !== 'upload';
	    };

	    scope.typeable = function() {
	      return !!scope.content.type;
	    };

	    scope.remove = function() {
	      if (scope.removable()) {
	        scope.$emit('notification.remove', scope.content);
	      }
	    };

	    scope.$on('upload.error', function() {
	      if (scope.content.type === 'upload') {
	        scope.content.type = 'error';
	      }
	    });

	    scope.$on('upload.finished', function() {
	      scope.uploadCount += 1;
	    });
	  };

	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/components/notification-box.html',
	    scope: {
	      content: '='
	    },
	    link: notificationBoxController
	  };
	};


/***/ },
/* 150 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  'use strict';
	  var uploadProgressController = function(scope) {

	    scope.upload.progress(function(details) {
	      scope.file = details.config.file.name;
	      if (details.lengthComputable) {
	        scope.value = Math.round(details.loaded / details.total * 100);
	      } else {
	        // dummy value if not computable
	        scope.value = 10;
	      }
	    }).success(function() {
	      scope.value = 100;
	      scope.completed = true;
	      scope.$emit('upload.finished');
	    }).error(function() {
	      scope.error = true;
	      scope.$emit('upload.error');
	    });
	  };

	  return {
	    scope: {
	      upload: '='
	    },
	    link: uploadProgressController,
	    replace: true,
	    templateUrl: '/templates/components/upload-progress.html'
	  };
	};


/***/ },
/* 151 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var imageRegExp = new RegExp(/^image\/.*$/),
	      excelRegExp = new RegExp(/.*excel$/);
	  return {
	    restrict: 'E',
	    replace: true,
	    scope: {
	      type: '&'
	    },
	    template: '<i class="icon-{{icon}}"></i>',
	    link: function(scope) {
	      var icon = 'ticket',
	          type = scope.type();

	      if (imageRegExp.test(type)) {
	        icon = 'image1';
	      }
	      if (excelRegExp.test(type)) {
	        icon = 'page-xls';
	      }
	      if (type === 'application/pdf') {
	        icon = 'page-pdf';
	      }

	      scope.icon = icon;
	    }
	  };
	};


/***/ },
/* 152 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	    return function(ancestors) {
	      if(!ancestors) return true;

	      var directAncestors;

	      if(ancestors.length > 1 && ancestors[0].payload.objectType === 'Project' && ancestors[1].payload.objectType === 'Project') {
	        // discard expansion state of root if there's another project ancestor
	        directAncestors = ancestors.slice(1);
	      } else {
	        directAncestors = ancestors;
	      }

	      return directAncestors.map(function(ancestor){
	        return ancestor.expanded;
	      }).reduce(function(a,b){
	        return a && b;
	      });
	    };
	};


/***/ },
/* 153 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return function(items, isDescending, visible) {

	    // We want to enforce descending order here, and when the setting
	    // is already descending, we no longer have to do that ourselves.
	    return isDescending ? items.slice(0,visible) : items.slice(-visible).reverse();
	  };
	};


/***/ },
/* 154 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    link: function(scope, element) {
	      var thead = element.parent('colgroup').siblings('thead');

	      thead.on('hover', 'th', function() {
	        if (element.index() === jQuery(this).index()) {
	          element.toggleClass('hover');
	        }
	      });
	    }
	  };
	};


/***/ },
/* 155 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($window) {
	  return {
	    priority: -1,
	    restrict: 'A',
	    link: function(scope, element, attrs){
	      element.bind('click', function(e){
	        var message = attrs.confirmPopup;
	        if(message && !$window.confirm(message)){
	          e.stopImmediatePropagation();
	          e.preventDefault();
	        }
	      });
	    }
	  };
	};


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	__webpack_require__(165);
	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(189);
	__webpack_require__(222);
	__webpack_require__(157);
	__webpack_require__(223);
	__webpack_require__(226);
	__webpack_require__(233);
	__webpack_require__(246);


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.helpers')
	  .factory('ApiHelper', ['NotificationsService', __webpack_require__(158)])
	  .factory('FiltersHelper', ['I18n', __webpack_require__(159)])
	  .constant('ACTIVE_USER_STATUSES', ['active', 'registered'])
	  .factory('UsersHelper', ['ACTIVE_USER_STATUSES', __webpack_require__(160)])
	  .constant('PERMITTED_BULK_ACTIONS', ['edit', 'watch', 'move', 'copy',
	    'delete'
	  ])
	  .service('WorkPackageContextMenuHelper', ['PERMITTED_BULK_ACTIONS',
	    'WorkPackagesTableService', 'UrlParamsHelper', __webpack_require__(
	      161)
	  ])
	  .factory('WorkPackagesHelper', ['TimezoneService', 'currencyFilter',
	    'CustomFieldHelper', __webpack_require__(162)
	  ])
	  .factory('WorkPackagesTableHelper', [
	    'WorkPackagesHelper',
	    __webpack_require__(163)
	  ])
	  .factory('WorkPackagesDisplayHelper', [
	    'WorkPackageFieldService',
	    '$window',
	    '$timeout',
	    __webpack_require__(
	    164)
	  ]);


/***/ },
/* 158 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  var ApiHelper = {
	    getErrorMessages: function(error) {
	      if(error.status === 500) {
	        return [error.statusText];
	      } else {
	        var response = JSON.parse(error.responseText);
	        var messages = [];

	        if (ApiHelper.isMultiErrorMessage(response)) {
	          angular.forEach(response._embedded.errors, function(error) {
	            this.push(error.message);
	          }, messages);
	        } else {
	          messages.push(response.message);
	        }

	        return messages;
	      }
	    },

	    isMultiErrorMessage: function(error) {
	      return error.errorIdentifier === 'urn:openproject-org:api:v3:errors:MultipleErrors';
	    }
	  };

	  return ApiHelper;
	};


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n) {
	  var FiltersHelper = {

	    assignAncestorLevels: function(projects){
	      var ancestors = [];
	      angular.forEach(projects, function(project, i){
	        while(ancestors.length > 0 && project.parent_id !== _.last(ancestors).id) {
	          // this helper method only reflects hierarchies if nested projects follow one another
	          ancestors.pop();
	        }

	        project['level'] = ancestors.length;
	        project['name'] = FiltersHelper.indentedName(project['name'], project['level']);

	        if (!project['leaf?']) {
	          ancestors.push(project);
	        }
	      });
	      return projects;
	    },

	    indentedName: function(name, level){
	      var indentation = '';
	      for(var i = 0; i < level; i++){
	        indentation = indentation + '--';
	      }
	      return indentation + " " + name;
	    },

	    localisedFilterName: function(filter){
	      if(filter){
	        if(filter.name){
	          return filter.name;
	        }
	        if(filter.locale_name){
	          return I18n.t('js.filter_labels.' + filter["locale_name"]);
	        }
	      }
	      return "";
	    },
	  };

	  return FiltersHelper;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 160 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(ACTIVE_USER_STATUSES) {
	  var UsersHelper = {

	    isActive: function(user){
	      return ACTIVE_USER_STATUSES.indexOf(user.props.status) >= 0;
	    },

	  };

	  return UsersHelper;
	};


/***/ },
/* 161 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(PERMITTED_BULK_ACTIONS, WorkPackagesTableService, UrlParamsHelper) {
	  function getPermittedActionLinks(workPackage, permittedActionConstansts) {
	    var linksToPermittedActions = {};
	    var permittedActions = getIntersection([workPackage._actions, permittedActionConstansts]);

	    angular.forEach(permittedActions, function(permittedAction) {
	      linksToPermittedActions[permittedAction] = workPackage._links[permittedAction];
	    });

	    return linksToPermittedActions;
	  }

	  function getIntersectOfPermittedActions(workPackages) {
	    var linksToPermittedActions = {};
	    var permittedActions = getIntersection(
	      workPackages
	        .map(function(workPackage) {
	          return workPackage._actions;
	        })
	        .concat(new Array(PERMITTED_BULK_ACTIONS))
	    );

	    angular.forEach(permittedActions, function(permittedAction) {
	      linksToPermittedActions[permittedAction] = getBulkActionLink(permittedAction, workPackages);
	    });

	    return linksToPermittedActions;
	  }

	  function getBulkActionLink(action, workPackages) {
	    var bulkLinks = WorkPackagesTableService.getBulkLinks();

	    var workPackageIdParams = {
	      'ids[]': workPackages.map(function(wp){
	        return wp.id;
	      })
	    };
	    var serializedIdParams = UrlParamsHelper.buildQueryString(workPackageIdParams);

	    var linkAndQueryString = bulkLinks[action].split('?');
	    var link = linkAndQueryString.shift();
	    var queryParts = linkAndQueryString.concat(new Array(serializedIdParams));

	    return link + '?' + queryParts.join('&');
	  }

	  // TODO move to a global tools helper
	  function getIntersection(arrays) {
	    var candidates = arrays.shift();

	    return candidates.filter(function(element) {
	      return arrays.every(function(array) {
	        return array.indexOf(element) !== -1;
	      });
	    });
	  }

	  var WorkPackageContextMenuHelper = {
	    getPermittedActions: function(workPackages, permittedActionConstansts) {
	      if (workPackages.length === 1) {
	        return getPermittedActionLinks(workPackages[0], permittedActionConstansts);
	      } else if (workPackages.length > 1) {
	        return getIntersectOfPermittedActions(workPackages);
	      }
	    }
	  };

	  return WorkPackageContextMenuHelper;
	};


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	/* jshint camelcase: false */

	module.exports = function(TimezoneService, currencyFilter, CustomFieldHelper) {

	  var WorkPackagesHelper = {
	    getRowObjectContent: function(object, option) {
	      var content;

	      if(CustomFieldHelper.isCustomFieldKey(option)){
	        var custom_field_id = CustomFieldHelper.getCustomFieldId(option);
	        content = WorkPackagesHelper.getRawCustomValue(object, custom_field_id);
	      } else {
	        content = object[option];
	      }

	      switch(typeof(content)) {
	        case 'object':
	          if (content === null) { return ''; }
	          return content.name || content.subject || '';
	        case 'number':
	          return content;
	        default:
	          return content || '';
	      }
	    },

	    augmentWorkPackageWithData: function(workPackage, attributeName, isCustomValue, data) {
	      if (isCustomValue && data) {
	        if (workPackage.custom_values) {
	          workPackage.custom_values.push(data);
	        } else {
	          workPackage.custom_values = [data];
	        }
	      } else {
	        workPackage[attributeName] = data;
	      }
	    },

	    getRawCustomValue: function(object, customFieldId) {
	      if (!object.custom_values) { return null; }

	      var values = object.custom_values.filter(function(customValue){
	        return customValue && customValue.custom_field_id === customFieldId;
	      });

	      if (values && values.length) {
	        return values[0].value;
	      } else {
	        return '';
	      }
	    },

	    getFormattedCustomValue: function(object, customField) {
	      if (!object.custom_values) { return null; }

	      var values = object.custom_values.filter(function(customValue){
	        return customValue && customValue.custom_field_id === customField.id;
	      });

	      if(values && values.length) {
	        return CustomFieldHelper.formatCustomFieldValue(values[0].value, customField.field_format);
	      }
	    },

	    getColumnDataId: function(object, column) {
	      var custom_field_id = column.name.match(/^cf_(\d+)$/);

	      if (custom_field_id) {
	        custom_field_id = parseInt(custom_field_id[1], 10);

	        return WorkPackagesHelper.getCFColumnDataId(object, custom_field_id);
	      }
	      else {
	        return WorkPackagesHelper.getStaticColumnDataId(object, column);
	      }
	    },

	    getCFColumnDataId: function(object, custom_field_id) {

	      var custom_value = _.find(object.custom_values, function(elem) {
	        return elem && (elem.custom_field_id === custom_field_id);
	      });

	      if(custom_value && custom_value.value) {
	        return custom_value.value.id;
	      }
	      else {
	        return null;
	      }
	    },

	    getStaticColumnDataId: function(object, column) {
	      switch (column.name) {
	        case 'parent':
	          return object.parent_id;
	        case 'project':
	          return object.project.identifier;
	        case 'id':
	        case 'subject':
	          return object.id;
	        default:
	          return (object[column.name]) ? object[column.name].id : null;
	      }
	    },

	    getFormattedColumnData: function(object, column) {
	      var value = WorkPackagesHelper.getRowObjectContent(object, column.name);

	      return WorkPackagesHelper.formatValue(value, column.meta_data.data_type);
	    },

	    formatValue: function(value, dataType) {
	      switch(dataType) {
	        case 'datetime':
	          var dateTime;
	          if (value) {
	            dateTime = TimezoneService.formattedDatetime(value);
	          }
	          return dateTime || '';
	        case 'date':
	          return value ? TimezoneService.formattedDate(value) : '';
	        case 'currency':
	          return currencyFilter(value, 'EUR ');
	        default:
	          return value;
	      }
	    },

	    parseDateTime: function(value) {
	      return new Date(Date.parse(value.replace(/(A|P)M$/, '')));
	    },

	    getParent: function(workPackage) {
	      var wpParent = workPackage.links.parent;

	      return (wpParent) ? [wpParent.fetch()] : [];
	    },

	    getChildren: function(workPackage) {
	      var children = workPackage.links.children;
	      var result = [];

	      if (children) {
	        for (var x = 0; x < children.length; x++) {
	          var child = children[x];

	          result.push(child);
	        }
	      }

	      return result;
	    },

	    getRelationsOfType: function(workPackage, type) {
	      var relations = workPackage.embedded.relations;
	      var result = [];

	      if (relations) {
	        for (var x = 0; x < relations.length; x++) {
	          var relation = relations[x];

	          if (relation.props._type == type) {
	            result.push(relation);
	          }
	        }
	      }

	      return result;
	    },

	    //Note: The following methods are display helpers and so don't really
	    //belong here but are shared between directives so it's probably the best
	    //place for them just now.
	    getState: function(workPackage) {
	      return (workPackage.embedded.status.props.isClosed) ? 'closed' : '';
	    },

	    getFullIdentifier: function(workPackage) {
	      var id = '#' + workPackage.props.id;
	      if (workPackage.props.type) {
	        id += ' ' + workPackage.props.type + ':';
	      }
	      id += ' ' + workPackage.props.subject;

	      return id;
	    },

	    collapseStateIcon: function(collapsed) {
	      var iconClass = 'icon-arrow-right5-';
	      if (collapsed) {
	        iconClass += '3';
	      } else {
	        iconClass += '2';
	      }

	      return iconClass;
	    }
	  };

	  return WorkPackagesHelper;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WorkPackagesHelper) {
	  var WorkPackagesTableHelper = {
	    /* builds rows from work packages, see IssuesHelper */
	    buildRows: function(workPackages, groupBy) {
	      var rows = [], ancestors = [];
	      var currentGroup, allGroups = [], groupIndex = -1;

	      angular.forEach(workPackages, function(workPackage, i) {
	        while(ancestors.length > 0 && workPackage.parent_id !== _.last(ancestors).object.id) {
	          // this helper method only reflects hierarchies if nested work packages follow one another
	          ancestors.pop();
	        }


	        // compose row

	        var row = {
	          level: ancestors.length,
	          parent: _.last(ancestors),
	          ancestors: ancestors.slice(0),
	          object: workPackage
	        };

	        // manage groups

	        // this helper method assumes that the work packages are passed in in blocks each of which consisting of work packages which belong to one group

	        if (groupBy) {
	          currentGroup = WorkPackagesHelper.getRowObjectContent(workPackage, groupBy);

	          if(allGroups.indexOf(currentGroup) === -1) {
	            allGroups.push(currentGroup);
	            groupIndex++;
	          }

	          angular.extend(row, {
	            groupIndex: groupIndex,
	            groupName: currentGroup
	          });
	        }

	        rows.push(row);

	        if (!workPackage['leaf?']) ancestors.push(row);
	      });

	      return rows;
	    },

	    allRowsChecked: function(rows) {
	      if( rows.length === 0 ) return false;
	      return rows
	        .map(function(row) {
	          return !!row.checked;
	        })
	        .reduce(function(a, b){
	          return a && b;
	        });
	    },

	    getColumnDifference: function (allColumns, columns) {
	      var identifiers = columns.map(function(column){
	        return column.name;
	      });

	      return this.getColumnDifferenceByName(allColumns, identifiers);
	    },

	    getColumnDifferenceByName: function (allColumns, identifiers) {
	      return allColumns.filter(function(column) {
	        return identifiers.indexOf(column.name) === -1;
	      });
	    },

	    getColumnUnionByName: function (allColumns, columnNames) {
	      return allColumns.filter(function(column) {
	        return columnNames.indexOf(column.name) !== -1;
	      });
	    },

	    getColumnIndexByName: function(columns, columnName) {
	      return columns
	        .map(function(column){
	          return column.name;
	        })
	        .indexOf(columnName);
	    },

	    detectColumnByName: function(columns, columnName) {
	      return columns[WorkPackagesTableHelper.getColumnIndexByName(columns, columnName)];
	    },

	    selectColumnsByName: function(columns, columnNames) {
	      return columns.filter(function(column) {
	        return columnNames.indexOf(column.name) !== -1;
	      });
	    },

	    mapIdentifiersToColumns: function(columns, columnNames) {
	      return columnNames.map(function(columnName) {
	        return WorkPackagesTableHelper.detectColumnByName(columns, columnName);
	      });
	    },

	    moveElementBy: function(array, index, positions) {
	      // TODO maybe extend the Array prototype
	      var newPosition = index + positions;

	      if (newPosition > -1 && newPosition < array.length) {
	        var elementToMove = array.splice(index, 1)[0];
	        array.splice(newPosition, 0, elementToMove);
	      }
	    },

	    moveColumnBy: function(columns, columnName, by) {
	      var index = WorkPackagesTableHelper.getColumnIndexByName(columns, columnName);

	      WorkPackagesTableHelper.moveElementBy(columns, index, by);
	    },

	    moveColumns: function (columnNames, fromColumns, toColumns) {
	      angular.forEach(columnNames, function(columnName){
	        WorkPackagesTableHelper.removeColumn(columnName, fromColumns, function(removedColumn){
	          toColumns.push(removedColumn);
	        });
	      });
	    },

	    removeColumn: function(columnName, columns, callback) {
	      var removed = columns.splice(this.getColumnIndexByName(columns, columnName), 1)[0];

	      return typeof(callback) !== 'undefined' ? callback.call(this, removed) : null;
	    },

	    getSelectedRows: function(rows) {
	      return rows
	        .filter(function(row) {
	          return row.checked;
	        });
	    },

	    getWorkPackagesFromRows: function(rows) {
	      return rows
	        .map(function(row) {
	          return row.object;
	        });
	    }
	  };

	  return WorkPackagesTableHelper;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WorkPackageFieldService, $window, $timeout) {

	  // specifies unhideable (during creation)
	  var unhideableFields = [
	    'subject',
	    'type',
	    'status',
	    'description',
	    'priority',
	    'assignee',
	    'percentageDone'
	  ];
	  var firstTimeFocused = false;
	  var isGroupHideable = function (groupedFields, groupName, workPackage, cb) {
	        if (!workPackage) {
	          return true;
	        }
	        var group = _.find(groupedFields, {groupName: groupName});
	        var isHideable = typeof cb === 'undefined' ? isFieldHideable : cb;
	        return _.every(group.attributes, function(field) {
	          return isHideable(workPackage, field);
	        });
	      },
	      isFieldHideable = function (workPackage, field) {
	        if (!workPackage) {
	          return true;
	        }
	        return WorkPackageFieldService.isHideable(workPackage, field);
	      },
	      isFieldHideableOnCreate = function(workPackage, field) {
	        if (!workPackage) {
	          return true;
	        }
	        if (!isSpecified(workPackage, field)) {
	          return true;
	        }

	        if (!isEditable(workPackage, field)) {
	          return true;
	        }

	        if (_.contains(unhideableFields, field)) {
	          return !WorkPackageFieldService.isEditable(workPackage, field);
	        }

	        if (WorkPackageFieldService.isRequired(workPackage, field)) {
	          return false;
	        }

	        return WorkPackageFieldService.isHideable(workPackage, field);
	      },
	      isSpecified = function (workPackage, field) {
	        if (!workPackage) {
	          return false;
	        }
	        return WorkPackageFieldService.isSpecified(workPackage, field);
	      },
	      isEditable = function(workPackage, field) {
	        return WorkPackageFieldService.isEditable(workPackage, field);
	      },
	      hasNiceStar = function (workPackage, field) {
	        if (!workPackage) {
	          return false;
	        }
	        return WorkPackageFieldService.isRequired(workPackage, field) &&
	          WorkPackageFieldService.isEditable(workPackage, field);
	      },
	      getLabel = function (workPackage, field) {
	        if (!(workPackage && typeof field === 'string')) {
	          return '';
	        }
	        return WorkPackageFieldService.getLabel(workPackage, field);
	      },
	      setFocus = function() {
	        if (!firstTimeFocused) {
	          firstTimeFocused = true;
	          $timeout(function() {
	            // TODO: figure out a better way to fix the wp table columns bug
	            // where arrows are misplaced when not resizing the window
	            angular.element($window).trigger('resize');
	            angular.element('.work-packages--details--subject .focus-input').focus();
	          });
	        }
	      },
	      showToggleButton = function () {
	        return true;
	      };

	  return {
	    isGroupHideable: isGroupHideable,
	    isFieldHideable: isFieldHideable,
	    isFieldHideableOnCreate: isFieldHideableOnCreate,
	    isSpecified: isSpecified,
	    isEditable: isEditable,
	    hasNiceStar: hasNiceStar,
	    getLabel: getLabel,
	    setFocus: setFocus,
	    showToggleButton: showToggleButton
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.activities')
	  .directive('activityEntry', [
	    __webpack_require__(166)
	  ])
	  .directive('userActivity', [
	    '$uiViewScroll',
	    '$timeout',
	    '$location',
	    '$sce',
	    'I18n',
	    'PathHelper',
	    'ActivityService',
	    'UsersHelper',
	    'ConfigurationService',
	    'AutoCompleteHelper',
	    __webpack_require__(167)
	  ])
	  .directive('revisionActivity', [
	    '$compile',
	    '$sce',
	    'I18n',
	    'PathHelper',
	    'ActivityService',
	    'UsersHelper',
	    __webpack_require__(168)
	  ])
	  ;


/***/ },
/* 166 */
/***/ function(module, exports) {

	//-- copyright
	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/work_packages/activities/_entry.html',
	    scope: {
	      workPackage: '=',
	      activity: '=',
	      activityNo: '=',
	      isInitial: '=',
	      inputElementId: '=',
	      autocompletePath: '='
	    },
	    link: function(scope) {
	      scope.activityType = scope.activity.props._type;
	    }
	  };
	};


/***/ },
/* 167 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($uiViewScroll,
	    $timeout,
	    $location,
	    $sce,
	    I18n,
	    PathHelper,
	    ActivityService,
	    UsersHelper,
	    ConfigurationService,
	    AutoCompleteHelper) {
	  return {
	    restrict: 'E',
	    replace: true,
	    require: '^?exclusiveEdit',
	    templateUrl: '/templates/work_packages/activities/_user.html',
	    scope: {
	      workPackage: '=',
	      activity: '=',
	      activityNo: '=',
	      isInitial: '=',
	      inputElementId: '='
	    },
	    link: function(scope, element, attrs, exclusiveEditController) {
	      exclusiveEditController.addEditable(scope);
	      scope.$watch('inEdit', function(newVal, oldVal) {
	        if(newVal) {
	          $timeout(function() {
	            var textarea = angular.element('#edit-comment-text');

	            AutoCompleteHelper.enableTextareaAutoCompletion(textarea);

	            textarea.focus();
	          });
	        }
	      });

	      scope.I18n = I18n;
	      scope.userPath = PathHelper.staticUserPath;
	      scope.inEdit = false;
	      scope.inFocus = false;
	      scope.userCanEdit = !!scope.activity.links.update;
	      scope.userCanQuote = !!scope.workPackage.links.addComment;
	      scope.accessibilityModeEnabled = ConfigurationService.accessibilityModeEnabled();

	      scope.activity.links.user.fetch().then(function(user) {
	        scope.userId = user.props.id;
	        scope.userName = user.props.name;
	        scope.userAvatar = user.props.avatar;
	        scope.userActive = UsersHelper.isActive(user);
	      });

	      scope.comment = $sce.trustAsHtml(scope.activity.props.comment.html);
	      scope.details = [];

	      angular.forEach(scope.activity.props.details, function(detail) {
	        this.push($sce.trustAsHtml(detail.html));
	      }, scope.details);

	      $timeout(function() {
	        if($location.hash() == scope.activityNo.toString()) {
	          $uiViewScroll(element);
	        }
	      });

	      scope.editComment = function() {
	        exclusiveEditController.gotEditable(scope);
	      };

	      scope.cancelEdit = function() {
	        scope.inEdit = false;
	      };

	      scope.quoteComment = function() {
	        exclusiveEditController.setQuoted(quotedText(scope.activity.props.comment.raw));
	        var elem = angular.element('#' + scope.inputElementId);
	        $uiViewScroll(elem);
	        elem.focus();
	      };

	      scope.updateComment = function(comment) {
	        var comment = angular.element('#edit-comment-text').val();
	        ActivityService.updateComment(scope.activity, comment).then(function(activity){
	          scope.$emit('workPackageRefreshRequired', '');
	          scope.inEdit = false;
	        });
	      };

	      scope.showActions = function() {
	        scope.inFocus = true;
	      };

	      scope.hideActions = function() {
	        scope.inFocus = false;
	      };

	      function quotedText(rawComment) {
	        var quoted = rawComment.split("\n")
	          .map(function(line){ return "\n> " + line; })
	          .join('');
	        return scope.userName + " wrote:" + quoted;
	      }
	    }
	  };
	};


/***/ },
/* 168 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($compile,
	    $sce,
	    I18n,
	    PathHelper,
	    ActivityService,
	    UsersHelper) {
	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/work_packages/activities/_revision.html',
	    scope: {
	      workPackage: '=',
	      activity: '=',
	      activityNo: '=',
	    },
	    link: function(scope, element) {
	      scope.I18n = I18n;
	      if (scope.activity.links.author === undefined) {
	        scope.userName = scope.activity.props.authorName;
	      } else {
	        scope.userPath = PathHelper.staticUserPath;
	        scope.activity.links.author.fetch().then(function(user) {
	          scope.userId = user.props.id;
	          scope.userName = user.props.name;
	          scope.userAvatar = user.props.avatar;
	          scope.userActive = UsersHelper.isActive(user);
	        });
	      }

	      scope.project = scope.workPackage.embedded.project;
	      scope.revision = scope.activity.props.identifier;
	      scope.formattedRevision = scope.activity.props.formattedIdentifier;
	      scope.revisionPath = scope.activity.links.showRevision.href;
	      scope.message = $sce.trustAsHtml(scope.activity.props.message.html);

	      var date = '<op-date-time date-time-value="activity.props.createdAt"/></op-date-time>';
	      var link = [
	        '<a ng-href="{{ revisionPath }}" title="{{ revision }}">',
	        '{{ I18n.t("js.label_committed_link", { revision_identifier: formattedRevision }) }}',
	        '</a>'
	      ].join('');

	      scope.combinedRevisionLink = I18n.t("js.label_committed_at",
	        {
	          committed_revision_link: link,
	          date: date
	        });

	      scope.$watch('combinedRevisionLink', function(html) {
	        var span = angular.element(html),
	          link = element.find('.revision-activity--revision-link');

	        link.append(span);
	        $compile(link.contents())(scope);
	      });

	    }
	  };
	};


/***/ },
/* 169 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	/* jshint camelcase: false */

	angular.module('openproject.workPackages.config')

	.constant('INITIALLY_SELECTED_COLUMNS', [{ name: 'id' }, { name: 'project' }, { name: 'type' }, { name: 'status' }, { name: 'priority' }, { name: 'subject' }, { name: 'assigned_to_id' }, { name: 'updated_at' }])

	.constant('OPERATORS_AND_LABELS_BY_FILTER_TYPE', {
	  list: [['=', 'label_equals'], ['!', 'label_not_equals']],
	  list_model: [['=', 'label_equals'], ['!', 'label_not_equals']],
	  list_status: [['o', 'label_open_work_packages'], ['=', 'label_equals'], ['!', 'label_not_equals'], ['c', 'label_closed_work_packages'], ['*', 'label_all']],
	  list_optional: [['=', 'label_equals'], ['!', 'label_not_equals'], ['!*', 'label_none'], ['*', 'label_all']],
	  list_subprojects: [['*', 'label_all'], ['!*', 'label_none'], ['=', 'label_equals']],
	  date: [['<t+', 'label_in_less_than'], ['>t+', 'label_in_more_than'], ['t+', 'label_in'], ['t', 'label_today'], ['w', 'label_this_week'], ['>t-', 'label_less_than_ago'], ['<t-', 'label_more_than_ago'], ['t-', 'label_ago']],
	  date_past: [['>t-', 'label_less_than_ago'], ['<t-', 'label_more_than_ago'], ['t-', 'label_ago'], ['t', 'label_today'], ['w', 'label_this_week']],
	  string: [['=', 'label_equals'], ['~', 'label_contains'], ['!', 'label_not_equals'], ['!~', 'label_not_contains']],
	  text: [['~', 'label_contains'], ['!~', 'label_not_contains']],
	  integer: [['=', 'label_equals'], ['>=', 'label_greater_or_equal'], ['<=', 'label_less_or_equal'], ['!*', 'label_none'], ['*', 'label_all']]
	})

	.constant('AVAILABLE_WORK_PACKAGE_FILTERS', {
	  status_id: { type: 'list_status', modelName: 'status' , order: 1, locale_name: 'status' },
	  type_id: { type: 'list_model', modelName: 'type', order: 2, locale_name: 'type' },
	  priority_id: { type: 'list_model', modelName: 'priority', order: 3, locale_name: 'priority'},
	  assigned_to_id: { type: 'list_optional', modelName: 'user' , order: 4, locale_name: 'assigned_to' },
	  author_id: { type: 'list_model', modelName: 'user' , order: 5, locale_name: 'author' },
	  watcher_id: {type: 'list_model', modelName: 'user', order: 6, locale_name: 'watcher'},
	  responsible_id: {type: 'list_optional', modelName: 'user', order: 6, locale_name: 'responsible'},
	  fixed_version_id: {type: 'list_optional', modelName: 'version', order: 7, locale_name: 'fixed_version'},
	  category_id: { type: 'list_optional', modelName: 'category', order: 7, locale_name: 'category' },
	  member_of_group: {type: 'list_optional', modelName: 'group', order: 8, locale_name: 'member_of_group'},
	  assigned_to_role: {type: 'list_optional', modelName: 'role', order: 9, locale_name: 'assigned_to_role'},
	  subject: { type: 'text', order: 10, locale_name: 'subject' },
	  created_at: { type: 'date_past', order: 11, locale_name: 'created_at' },
	  updated_at: { type: 'date_past', order: 12, locale_name: 'updated_at' },
	  start_date: { type: 'date', order: 13, locale_name: 'start_date' },
	  due_date: { type: 'date', order: 14, locale_name: 'due_date' },
	  estimated_hours: { type: 'integer', order: 15, locale_name: 'estimated_hours' },
	  done_ratio: { type: 'integer', order: 16, locale_name: 'done_ratio' },
	  project_id: { type: 'list_model', modelName: 'project', order: 17, locale_name: 'project' },
	  subproject_id: { type: 'list_subprojects', modelName: 'sub_project', order: 18, locale_name: 'subproject' }
	})

	.constant('DEFAULT_SORT_CRITERIA', 'parent:desc')

	.constant('MAX_SORT_ELEMENTS', 3)

	.constant('DEFAULT_PAGINATION_OPTIONS', {
	  page: 1,
	  perPage: 10,
	  perPageOptions: [10, 100, 500, 1000],
	  maxVisiblePageOptions: 6,
	  optionsTruncationSize: 2
	});


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.controllers')
	  .constant('TEXT_TYPE', 'text')
	  .constant('STATUS_TYPE', 'status')
	  .constant('VERSION_TYPE', 'version')
	  .constant('CATEGORY_TYPE', 'category')
	  .constant('PRIORITY_TYPE', 'priority')
	  .constant('USER_TYPE', 'user')
	  .constant('TIME_ENTRY_TYPE', 'time_entry')
	  .constant('USER_FIELDS', ['assignee', 'author', 'responsible'])
	  .controller('DetailsTabOverviewController', [
	    '$scope',
	    'WorkPackagesOverviewService',
	    'WorkPackageFieldService',
	    'EditableFieldsState',
	    'WorkPackagesDisplayHelper',
	    'NotificationsService',
	    'I18n',
	    'WorkPackageAttachmentsService',
	    __webpack_require__(172)
	  ])
	  .constant('ADD_WATCHER_SELECT_INDEX', -1)
	  .controller('DetailsTabWatchersController', [
	    '$scope',
	    'I18n',
	    'WatchersService',
	    'ADD_WATCHER_SELECT_INDEX', __webpack_require__(173)
	  ])
	  .constant('RELATION_TYPES', {
	    relatedTo: 'Relation::Relates',
	    duplicates: 'Relation::Duplicates',
	    duplicated: 'Relation::Duplicated',
	    blocks: 'Relation::Blocks',
	    blocked: 'Relation::Blocked',
	    precedes: 'Relation::Precedes',
	    follows: 'Relation::Follows'
	  })
	  .constant('RELATION_IDENTIFIERS', {
	    parent: 'parent',
	    relatedTo: 'relates',
	    duplicates: 'duplicates',
	    duplicated: 'duplicated',
	    blocks: 'blocks',
	    blocked: 'blocked',
	    precedes: 'precedes',
	    follows: 'follows'
	  })
	  .controller('WorkPackageDetailsController', [
	    '$scope',
	    '$state',
	    'latestTab',
	    'workPackage',
	    'I18n',
	    'RELATION_TYPES',
	    'RELATION_IDENTIFIERS',
	    '$q',
	    '$filter',
	    'WorkPackagesHelper',
	    'PathHelper',
	    'UsersHelper',
	    'ConfigurationService',
	    'WorkPackageService',
	    'CommonRelationsHandler',
	    'ChildrenRelationsHandler',
	    'ParentRelationsHandler',
	    'NotificationsService',
	    __webpack_require__(174)
	  ])
	  .controller('WorkPackageNewController', [
	    '$scope',
	    '$rootScope',
	    '$state',
	    '$stateParams',
	    '$timeout',
	    '$window',
	    'PathHelper',
	    'WorkPackagesOverviewService',
	    'WorkPackageFieldService',
	    'WorkPackageService',
	    'EditableFieldsState',
	    'WorkPackagesDisplayHelper',
	    __webpack_require__(175)
	  ])
	  .controller('WorkPackagesController', [
	    '$scope',
	    '$state',
	    '$stateParams',
	    'QueryService',
	    'PathHelper',
	    '$rootScope',
	    __webpack_require__(176)
	  ])
	  .controller('WorkPackagesListController', [
	    '$scope',
	    '$rootScope',
	    '$state',
	    '$location',
	    'latestTab',
	    'I18n',
	    'WorkPackagesTableService',
	    'WorkPackageService',
	    'ProjectService',
	    'QueryService',
	    'PaginationService',
	    'AuthorisationService',
	    'UrlParamsHelper',
	    'PathHelper',
	    'Query',
	    'OPERATORS_AND_LABELS_BY_FILTER_TYPE',
	    'NotificationsService',
	    __webpack_require__(177)
	  ])
	  .factory('columnsModal', ['btfModal', function(btfModal) {
	    return btfModal({
	      controller: 'ColumnsModalController',
	      controllerAs: 'modal',
	      templateUrl: '/templates/work_packages/modals/columns.html',
	      afterFocusOn: '#work-packages-settings-button'
	    });
	  }])
	  .controller('ColumnsModalController', ['$scope',
	    '$filter',
	    'columnsModal',
	    'QueryService',
	    'WorkPackageService',
	    'WorkPackagesTableService',
	    '$rootScope',
	    '$timeout',
	    __webpack_require__(178)
	  ])
	  .factory('exportModal', ['btfModal', function(btfModal) {
	    return btfModal({
	      controller: 'ExportModalController',
	      controllerAs: 'modal',
	      templateUrl: '/templates/work_packages/modals/export.html',
	      afterFocusOn: '#work-packages-settings-button'
	    });
	  }])
	  .controller('ExportModalController', ['exportModal', 'QueryService',
	    'UrlParamsHelper',
	    __webpack_require__(171)
	  ])
	  .factory('groupingModal', ['btfModal', function(btfModal) {
	    return btfModal({
	      controller: 'GroupByModalController',
	      controllerAs: 'modal',
	      templateUrl: '/templates/work_packages/modals/group_by.html',
	      afterFocusOn: '#work-packages-settings-button'
	    });
	  }])
	  .controller('GroupByModalController', [
	    '$scope',
	    '$filter',
	    'groupingModal',
	    'QueryService',
	    'WorkPackagesTableService',
	    'I18n',
	    __webpack_require__(179)
	  ])
	  .factory('saveModal', ['btfModal', function(btfModal) {
	    return btfModal({
	      controller: 'SaveModalController',
	      controllerAs: 'modal',
	      templateUrl: '/templates/work_packages/modals/save.html',
	      afterFocusOn: '#work-packages-settings-button'
	    });
	  }])
	  .controller('SaveModalController', [
	    '$scope',
	    'saveModal',
	    'QueryService',
	    'AuthorisationService',
	    '$state',
	    'NotificationsService',
	    __webpack_require__(180)
	  ])
	  .factory('settingsModal', ['btfModal', function(btfModal) {
	    return btfModal({
	      controller: 'SettingsModalController',
	      controllerAs: 'modal',
	      templateUrl: '/templates/work_packages/modals/settings.html',
	      afterFocusOn: '#work-packages-settings-button'
	    });
	  }])
	  .controller('SettingsModalController', [
	    '$scope',
	    'settingsModal',
	    'QueryService',
	    'AuthorisationService',
	    '$rootScope',
	    'QUERY_MENU_ITEM_TYPE',
	    'NotificationsService',
	    __webpack_require__(181)
	  ])
	  .factory('shareModal', ['btfModal', function(btfModal) {
	    return btfModal({
	      controller: 'ShareModalController',
	      controllerAs: 'modal',
	      templateUrl: '/templates/work_packages/modals/share.html',
	      afterFocusOn: '#work-packages-settings-button'
	    });
	  }])
	  .controller('ShareModalController', [
	    '$scope',
	    'shareModal',
	    'QueryService',
	    'AuthorisationService',
	    'queryMenuItemFactory',
	    'PathHelper',
	    'NotificationsService',
	    __webpack_require__(182)
	  ])
	  .factory('sortingModal', ['btfModal', function(btfModal) {
	    return btfModal({
	      controller: 'SortingModalController',
	      controllerAs: 'modal',
	      templateUrl: '/templates/work_packages/modals/sorting.html',
	      afterFocusOn: '#work-packages-settings-button'
	    });
	  }])
	  .controller('SortingModalController', ['sortingModal',
	    '$scope',
	    '$filter',
	    'QueryService',
	    'I18n',
	    __webpack_require__(183)
	  ]);
	__webpack_require__(184);


/***/ },
/* 171 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(exportModal, QueryService, UrlParamsHelper) {
	  this.name    = 'Export';
	  var query = QueryService.getQuery();
	  this.closeMe = exportModal.deactivate;

	  this.exportOptions = UrlParamsHelper.buildQueryExportOptions(query);
	};


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	           $scope,
	           WorkPackagesOverviewService,
	           WorkPackageFieldService,
	           EditableFieldsState,
	           WorkPackageDisplayHelper,
	           NotificationsService,
	           I18n,
	           WorkPackageAttachmentsService
	           ) {
	  'use strict';
	  var vm = this;

	  vm.groupedFields = [];
	  vm.hideEmptyFields = true;
	  vm.workPackage = $scope.workPackage;

	  vm.isGroupHideable = WorkPackageDisplayHelper.isGroupHideable;
	  vm.isFieldHideable = WorkPackageDisplayHelper.isFieldHideable;
	  vm.getLabel = WorkPackageDisplayHelper.getLabel;
	  vm.isSpecified = WorkPackageDisplayHelper.isSpecified;
	  vm.hasNiceStar = WorkPackageDisplayHelper.hasNiceStar;
	  vm.showToggleButton = WorkPackageDisplayHelper.showToggleButton;
	  vm.filesExist = false;
	  activate();

	  WorkPackageAttachmentsService.hasAttachments(vm.workPackage).then(function(bool) {
	    vm.filesExist = bool;
	  });

	  function activate() {
	    EditableFieldsState.forcedEditState = false;
	    $scope.$watch('workPackage.schema', function(schema) {
	      if (schema) {
	        WorkPackageDisplayHelper.setFocus();
	        vm.workPackage = $scope.workPackage;
	      }
	    });
	    vm.groupedFields = WorkPackagesOverviewService.getGroupedWorkPackageOverviewAttributes();

	    $scope.$watchCollection('vm.workPackage.form', function() {
	      var schema = WorkPackageFieldService.getSchema(vm.workPackage);
	      var otherGroup = _.find(vm.groupedFields, {groupName: 'other'});
	      otherGroup.attributes = [];
	      _.forEach(schema.props, function(prop, propName) {
	        if (propName.match(/^customField/)) {
	          otherGroup.attributes.push(propName);
	        }
	      });
	      otherGroup.attributes.sort(function(a, b) {
	        var getLabel = function(field) {
	          return vm.getLabel(vm.workPackage, field);
	        };
	        var left = getLabel(a).toLowerCase(),
	            right = getLabel(b).toLowerCase();
	        return left.localeCompare(right);
	      });
	    });
	    $scope.$on('workPackageUpdatedInEditor', function() {
	      NotificationsService.addSuccess(I18n.t('js.label_successful_update'));
	    });
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(scope, I18n, WatchersService) {
	  'use strict';

	  var vm = this,
	      fetchWatchers = function(loading) {
	        vm.error = false;
	        vm.loading = angular.isUndefined(loading) ? true : false;
	        WatchersService.forWorkPackage(scope.workPackage).then(function(users) {
	          vm.watching = users.watching;
	          vm.available = users.available;
	        }, function() {
	          vm.watchers = [];
	          vm.available = [];
	          vm.error = true;
	        }).finally(function() {
	          vm.loading = false;
	        });
	      },
	      addWatcher = function(event, watcher) {
	        // last stop for this one
	        event.stopPropagation();
	        watcher.loading = true;
	        add(watcher, vm.watching);
	        remove(watcher, vm.available);
	        WatchersService
	          .addForWorkPackage(scope.workPackage, watcher)
	          .then(function(watcher) {
	            scope.$broadcast('watchers.add.finished', watcher);
	          })
	          .finally(function() {
	            delete watcher.loading;
	          });
	      },
	      removeWatcher = function(event, watcher) {
	        event.stopPropagation();
	        WatchersService
	          .removeFromWorkPackage(scope.workPackage, watcher)
	          .then(function(watcher) {
	            remove(watcher, vm.watching);
	            add(watcher, vm.available);
	          });
	      };
	  // helpers to work with the watchers array
	  var remove = function(watcher, arr) {
	        var idx = _.findIndex(arr, watcher, equality(watcher));

	        if (idx > -1) {
	          arr.splice(idx, 1);
	        }
	      },
	      add = function(watcher, arr) {
	        var idx = _.findIndex(arr, watcher, equality(watcher));
	        if (idx === -1) {
	          arr.push(watcher);
	        }
	      },
	      equality = function(firstElement) {
	        return function(secondElement) {
	          return firstElement.id === secondElement.id;
	        };
	      };

	  vm.watching = [];
	  vm.I18n = I18n;
	  fetchWatchers();

	  scope.$on('watchers.add', addWatcher);
	  scope.$on('watchers.remove', removeWatcher);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 174 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope,
	    $state,
	    latestTab,
	    workPackage,
	    I18n,
	    RELATION_TYPES,
	    RELATION_IDENTIFIERS,
	    $q,
	    $filter,
	    WorkPackagesHelper,
	    PathHelper,
	    UsersHelper,
	    ConfigurationService,
	    WorkPackageService,
	    CommonRelationsHandler,
	    ChildrenRelationsHandler,
	    ParentRelationsHandler,
	    NotificationsService
	  ) {
	  $scope.$on('$stateChangeSuccess', function(event, toState){
	    latestTab.registerState(toState.name);
	  });

	  $scope.$on('workPackageRefreshRequired', function(e, callback) {
	    refreshWorkPackage(callback);
	  });

	  // initialization
	  setWorkPackageScopeProperties(workPackage);

	  $scope.I18n = I18n;
	  $scope.$parent.preselectedWorkPackageId = $scope.workPackage.props.id;
	  $scope.maxDescriptionLength = 800;

	  function refreshWorkPackage(callback) {
	    WorkPackageService.getWorkPackage($scope.workPackage.props.id)
	      .then(function(workPackage) {
	        setWorkPackageScopeProperties(workPackage);
	        $scope.$broadcast('workPackageRefreshed');
	        if (callback) {
	          callback(workPackage);
	        }
	      });
	  }
	  $scope.refreshWorkPackage = refreshWorkPackage; // expose to child controllers

	  // Inform parent that work package is loaded so back url can be maintained
	  $scope.$emit('workPackgeLoaded');

	  function outputMessage(message, isError) {
	    if (!!isError) {
	      NotificationsService.addError(message);
	    }
	    else {
	      NotificationsService.addSuccess(message);
	    }
	  }

	  function outputError(error) {
	    NotificationsService.addError(error.message);
	  }

	  $scope.outputMessage = outputMessage; // expose to child controllers
	  $scope.outputError = outputError; // expose to child controllers

	  function setWorkPackageScopeProperties(workPackage){
	    $scope.workPackage = workPackage;
	    $scope.isWatched = !!workPackage.links.unwatch;

	    if (workPackage.links.watch === undefined) {
	      $scope.toggleWatchLink = workPackage.links.unwatch;
	    } else {
	      $scope.toggleWatchLink = workPackage.links.watch;
	    }

	    // autocomplete path
	    var projectId = workPackage.embedded.project.props.id;
	    $scope.autocompletePath = PathHelper.staticWorkPackagesAutocompletePath(projectId);

	    // activities and latest activities
	    $scope.activitiesSortedInDescendingOrder = ConfigurationService.commentsSortedInDescendingOrder();
	    $scope.activities = [];
	    aggregateActivities($scope.workPackage);

	    // watchers
	    if(workPackage.links.watchers) {
	      $scope.watchers = workPackage.embedded.watchers.embedded.elements;
	    }

	    $scope.showStaticPagePath = PathHelper.staticWorkPackagePath($scope.workPackage.props.id);

	    // Type
	    $scope.type = workPackage.embedded.type;

	    // Author
	    $scope.author = workPackage.embedded.author;
	    $scope.authorPath = PathHelper.staticUserPath($scope.author.props.id);
	    $scope.authorActive = UsersHelper.isActive($scope.author);

	    // Attachments
	    $scope.attachments = workPackage.embedded.attachments.embedded.elements;

	    // relations
	    $q.all(WorkPackagesHelper.getParent(workPackage)).then(function(parents) {
	      var relationsHandler = new ParentRelationsHandler(workPackage, parents, 'parent');
	      $scope.wpParent = relationsHandler;
	    });

	    $q.all(WorkPackagesHelper.getChildren(workPackage)).then(function(children) {
	      var relationsHandler = new ChildrenRelationsHandler(workPackage, children);
	      $scope.wpChildren = relationsHandler;
	    });

	    function relationTypeIterator(key) {
	      $q.all(WorkPackagesHelper.getRelationsOfType(
	        workPackage,
	        RELATION_TYPES[key])
	      ).then(function(relations) {
	        var relationsHandler = new CommonRelationsHandler(workPackage,
	                                                          relations,
	                                                          RELATION_IDENTIFIERS[key]);
	        $scope[key] = relationsHandler;
	      });
	    }

	    for (var key in RELATION_TYPES) {
	      if (RELATION_TYPES.hasOwnProperty(key)) {
	        relationTypeIterator(key);
	      }
	    }
	  }

	  $scope.toggleWatch = function() {
	    var fetchOptions = {
	      method: $scope.toggleWatchLink.props.method
	    };

	    if($scope.toggleWatchLink.props.payload !== undefined) {
	      fetchOptions.contentType = 'application/json; charset=utf-8';
	      fetchOptions.data = JSON.stringify($scope.toggleWatchLink.props.payload);
	    }

	    $scope.toggleWatchLink
	      .fetch({ajax: fetchOptions})
	      .then(refreshWorkPackage, outputError);
	  };

	  $scope.canViewWorkPackageWatchers = function() {
	    return !!($scope.workPackage && $scope.workPackage.embedded.watchers !== undefined);
	  };

	  $scope.isInitialActivity = function(activity, activityNo) {
	    var type = activity.props._type,
	      activities = $scope.activities;


	    // Type must be Activity
	    if (type.indexOf('Activity') !== 0) {
	      return false;
	    }

	    // Shortcut, activityNo is 1 and its an Activity
	    if (activityNo === 1) {
	      return true;
	    }

	    // Otherwise, the current acitity may be initial if ALL other preceding activites are
	    // other types.
	    while (--activityNo > 0) {
	      var index = ($scope.activitiesSortedInDescendingOrder ?
	                    activities.length - activityNo : activityNo - 1);

	      if (activities[index].props._type.indexOf('Activity') === 0) {
	        return false;
	      }
	    }

	    return true;
	  };

	  function aggregateActivities(workPackage) {
	    // Do not yet add any intermittent result to the scope,
	    // as we will get an inconsistent activity view
	    // As we may not what activities will be added at a given time,
	    // let them be aggregated asynchronously.
	    var aggregated = [],
	      totalActivities = 0;

	    var aggregate = function(success, activity) {

	      if (success === true) {
	        aggregated = aggregated.concat(activity);
	      }

	      if (++totalActivities === 2) {
	        $scope.activities = $filter('orderBy')(aggregated,
	          'props.createdAt',
	          $scope.activitiesSortedInDescendingOrder
	        );
	      }
	    };

	    addDisplayedActivities(workPackage, aggregate);
	    addDisplayedRevisions(workPackage, aggregate);
	  }

	  function addDisplayedActivities(workPackage, aggregate) {
	    var activities = workPackage.embedded.activities.embedded.elements;
	    aggregate(true, activities);
	  }

	  function addDisplayedRevisions(workPackage, aggregate) {
	    var linkedRevisions = workPackage.links.revisions;

	    if (linkedRevisions === undefined) {
	      return aggregate();
	    }

	    linkedRevisions
	      .fetch()
	      .then(function(data) {
	        aggregate(true, data.embedded.elements);
	      }, aggregate);
	  }

	  // toggles

	  $scope.toggleStates = {
	    hideFullDescription: true,
	    hideAllAttributes: true
	  };

	  function getFocusAnchorLabel(tab, workPackage) {
	    var tabLabel = I18n.t('js.work_packages.tabs.' + tab),
	        params = {
	          tab: tabLabel,
	          type: workPackage.props.type,
	          subject: workPackage.props.subject
	        };

	    return I18n.t('js.label_work_package_details_you_are_here', params);
	  }

	  $scope.focusAnchorLabel = getFocusAnchorLabel(
	    $state.current.url.replace(/\//, ''),
	    $scope.workPackage
	  );
	};


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	           $scope,
	           $rootScope,
	           $state,
	           $stateParams,
	           $timeout,
	           $window,
	           PathHelper,
	           WorkPackagesOverviewService,
	           WorkPackageFieldService,
	           WorkPackageService,
	           EditableFieldsState,
	           WorkPackageDisplayHelper
	           ) {

	  var vm = this;

	  vm.groupedFields = [];
	  vm.hideEmptyFields = true;

	  vm.submit = submit;
	  vm.cancel = cancel;

	  vm.loaderPromise = null;

	  vm.isFieldHideable = WorkPackageDisplayHelper.isFieldHideableOnCreate;
	  vm.isGroupHideable = function(groups, group, wp) {
	    // custom wrapper for injecting a special callback
	    return WorkPackageDisplayHelper.isGroupHideable(groups, group, wp, vm.isFieldHideable);
	  };
	  vm.getLabel = WorkPackageDisplayHelper.getLabel;
	  vm.isSpecified = WorkPackageDisplayHelper.isSpecified;
	  vm.isEditable = WorkPackageDisplayHelper.isEditable;
	  vm.hasNiceStar = WorkPackageDisplayHelper.hasNiceStar;
	  vm.showToggleButton = WorkPackageDisplayHelper.showToggleButton;

	  activate();

	  function activate() {
	    EditableFieldsState.forcedEditState = true;
	    vm.loaderPromise = WorkPackageService.initializeWorkPackage($scope.projectIdentifier, {
	      _links: {
	        type: {
	          href: PathHelper.apiV3TypePath($stateParams.type)
	        }
	      }
	    }).then(function(wp) {
	      vm.workPackage = wp;
	      WorkPackageDisplayHelper.setFocus();
	      $scope.workPackage = wp;
	      $scope.$watchCollection('vm.workPackage.form', function() {
	        vm.groupedFields = WorkPackagesOverviewService.getGroupedWorkPackageOverviewAttributes();
	        var schema = WorkPackageFieldService.getSchema(vm.workPackage);
	        var otherGroup = _.find(vm.groupedFields, { groupName: 'other' });
	        otherGroup.attributes = [];
	        _.forEach(schema.props, function(prop, propName) {
	          if (propName.match(/^customField/)) {
	            otherGroup.attributes.push(propName);
	          }
	        });
	        otherGroup.attributes.sort(function(a, b) {
	          var getLabel = function(field) {
	            return vm.getLabel(vm.workPackage, field);
	          };
	          var left = getLabel(a).toLowerCase(),
	              right = getLabel(b).toLowerCase();
	          return left.localeCompare(right);
	        });
	      });
	    });

	    $scope.$on('workPackageUpdatedInEditor', function(e, workPackage) {
	      $state.go('work-packages.list.details.overview', {workPackageId: workPackage.props.id});
	    });
	  }

	  function submit(notify) {
	    angular
	      .element('.work-packages--details--subject:first .inplace-edit--write')
	      .scope().editPaneController.submit(notify);
	  }

	  function cancel() {
	    // previousState set in a $stateChangeSuccess callback
	    // in the .run() sequence
	    if ($rootScope.previousState && $rootScope.previousState.name) {
	      vm.loaderPromise = $state.go($rootScope.previousState.name, $rootScope.previousState.params);
	    } else {
	      vm.loaderPromise = $state.go('^');
	    }
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 176 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, $state, $stateParams, QueryService, PathHelper, $rootScope) {

	  // Setup
	  $scope.$state = $state;
	  $scope.selectedTitle = I18n.t('js.toolbar.unselected_title');

	  if ($stateParams.projectPath.indexOf(PathHelper.staticBase + '/projects') === 0) {
	    $scope.projectIdentifier = $stateParams.projectPath.replace(PathHelper.staticBase + '/projects/', '');
	  }

	  $scope.query_id = $stateParams.query_id;

	  $scope.$watch(QueryService.getAvailableGroupedQueries, function(availableQueries) {
	    if (availableQueries) {
	      $scope.groups = [{ name: I18n.t('js.label_global_queries'), models: availableQueries['queries']},
	                       { name: I18n.t('js.label_custom_queries'), models: availableQueries['user_queries']}];
	    }
	  });

	  $scope.isDetailsViewActive = function() {
	    return $state.includes('work-packages.list.details');
	  };

	  $scope.getToggleActionLabel = function(active) {
	    return (active) ? I18n.t('js.label_deactivate') : I18n.t('js.label_activate');
	  };

	  $scope.getActivationActionLabel = function(activate) {
	    return (activate) ? I18n.t('js.label_activate') : '';
	  };
	  $rootScope.$broadcast('openproject.layout.activateMenuItem');
	};


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, $rootScope, $state, $location, latestTab,
	      I18n, WorkPackagesTableService,
	      WorkPackageService, ProjectService, QueryService, PaginationService,
	      AuthorisationService, UrlParamsHelper, PathHelper, Query,
	      OPERATORS_AND_LABELS_BY_FILTER_TYPE, NotificationsService) {

	  // Setup
	  function initialSetup() {
	    $scope.operatorsAndLabelsByFilterType = OPERATORS_AND_LABELS_BY_FILTER_TYPE;
	    $scope.disableFilters = false;
	    $scope.disableNewWorkPackage = true;
	    setupFiltersVisibility();
	    $scope.toggleShowFilterOptions = function() {
	      WorkPackagesTableService.toggleShowFilterOptions();
	      setupFiltersVisibility();
	    };

	    var queryParams = $location.search().query_props;

	    var fetchWorkPackages;
	    if(queryParams) {
	      // Attempt to build up query from URL params
	      fetchWorkPackages = fetchWorkPackagesFromUrlParams(queryParams);
	    } else if($state.params.query_id) {
	      // Load the query by id if present
	      fetchWorkPackages = WorkPackageService.getWorkPackagesByQueryId($scope.projectIdentifier, $state.params.query_id);
	    } else {
	      // Clear the cached query and load the default
	      QueryService.clearQuery();
	      fetchWorkPackages = WorkPackageService.getWorkPackages($scope.projectIdentifier);
	    }

	    $scope.settingUpPage = fetchWorkPackages // put promise in scope for cg-busy
	      .then(function(json) {
	        return setupPage(json, !!queryParams);
	      })
	      .then(function() {
	        fetchAvailableColumns();
	        fetchProjectTypesAndQueries();
	        QueryService.loadAvailableGroupedQueries($scope.projectIdentifier);
	      });
	  }

	  function fetchWorkPackagesFromUrlParams(queryParams) {
	    try {
	      var queryData = UrlParamsHelper.decodeQueryFromJsonParams($state.params.query_id, queryParams);
	      var queryFromParams = new Query(queryData, { rawFilters: true });

	      // Set pagination options if present
	      if(!!queryFromParams.page) {
	        PaginationService.setPage(queryFromParams.page);
	      }
	      if(!!queryFromParams.perPage) {
	        PaginationService.setPerPage(queryFromParams.perPage);
	      }

	      return WorkPackageService.getWorkPackages($scope.projectIdentifier, queryFromParams, PaginationService.getPaginationOptions());
	    } catch(e) {
	      NotificationsService.addError(
	          I18n.t('js.work_packages.query.errors.unretrievable_query')
	      );
	      clearUrlQueryParams();

	      return WorkPackageService.getWorkPackages($scope.projectIdentifier);
	    }
	  }

	  function clearUrlQueryParams() {
	    $location.search('query_props', null);
	    $location.search('query_id', null);
	  }

	  function fetchProjectTypesAndQueries() {
	    if ($scope.projectIdentifier) {
	      ProjectService.getProject($scope.projectIdentifier)
	        .then(function(project) {
	          $scope.project = project;
	          $scope.projects = [ project ];
	          $scope.availableTypes = project.embedded.types;
	        });

	    }
	  }

	  function setupPage(json, queryParamsPresent) {
	    initQuery(json.meta, queryParamsPresent);
	    setupWorkPackagesTable(json);

	    if (json.work_packages.length) {
	      $scope.preselectedWorkPackageId = json.work_packages[0].id;
	    }
	  }

	  function initQuery(metaData, queryParamsPresent) {
	    var queryData = metaData.query,
	        columnData = metaData.columns;

	    var cachedQuery = QueryService.getQuery();
	    var urlQueryId = $state.params.query_id;

	    if (cachedQuery && urlQueryId && cachedQuery.id == urlQueryId) {
	      // Augment current unsaved query with url param data
	      var updateData = angular.extend(queryData, { columns: columnData });
	      $scope.query = QueryService.updateQuery(updateData, afterQuerySetupCallback);
	    } else {
	      // Set up fresh query from retrieved query meta data
	      $scope.query = QueryService.initQuery($state.params.query_id, queryData, columnData, metaData.export_formats, afterQuerySetupCallback);
	      if (queryParamsPresent) {
	        $scope.query.dirty = true;
	      }
	    }

	    $scope.maintainBackUrl();
	  }

	  function afterQuerySetupCallback(query) {
	    setupFiltersVisibility();
	  }

	  function setupWorkPackagesTable(json) {
	    var meta = json.meta,
	        workPackages = json.work_packages,
	        bulkLinks = json._bulk_links;

	    // register data

	    // table data
	    WorkPackagesTableService.setColumns($scope.query.columns);
	    WorkPackagesTableService.addColumnMetaData(meta);
	    WorkPackagesTableService.setGroupBy($scope.query.groupBy);
	    WorkPackagesTableService.buildRows(workPackages, $scope.query.groupBy);
	    WorkPackagesTableService.setBulkLinks(bulkLinks);

	    // query data
	    QueryService.setTotalEntries(meta.total_entries);

	    // pagination data
	    PaginationService.setPerPageOptions(meta.per_page_options);
	    PaginationService.setPerPage(meta.per_page);
	    PaginationService.setPage(meta.page);

	    // yield updatable data to scope
	    $scope.columns = $scope.query.columns;
	    $scope.rows = WorkPackagesTableService.getRows();
	    $scope.groupableColumns = WorkPackagesTableService.getGroupableColumns();
	    $scope.workPackageCountByGroup = meta.work_package_count_by_group;
	    $scope.totalEntries = QueryService.getTotalEntries();

	    // Authorisation
	    AuthorisationService.initModelAuth("work_package", meta._links);
	    AuthorisationService.initModelAuth("query", meta.query._links);
	  }

	  function setupFiltersVisibility() {
	    $scope.showFiltersOptions = WorkPackagesTableService.getShowFilterOptions();
	  }

	  function fetchAvailableColumns() {
	    return QueryService.loadAvailableUnusedColumns($scope.projectIdentifier)
	      .then(function(data){
	        $scope.availableUnusedColumns = data;
	      });
	  }

	  $scope.maintainBackUrl = function() {
	    $scope.backUrl = $location.url();
	  };

	  // Updates

	  $scope.maintainUrlQueryState = function(){
	    if($scope.query) {
	      $location.search('query_props', UrlParamsHelper.encodeQueryJsonParams($scope.query));
	    }
	  };

	  $scope.loadQuery = function(queryId) {
	    // Clear unsaved changes to current query
	    clearUrlQueryParams();

	    // Load new query
	    $scope.settingUpPage = $state.go('work-packages.list', { 'query_id': queryId });
	  };

	  function updateResults() {
	    $scope.$broadcast('openproject.workPackages.updateResults');

	    $scope.refreshWorkPackages = WorkPackageService.getWorkPackages($scope.projectIdentifier, $scope.query, PaginationService.getPaginationOptions())
	      .then(setupWorkPackagesTable);

	    return $scope.refreshWorkPackages;
	  }

	  // More

	  function serviceErrorHandler(data) {
	    // TODO RS: This is where we'd want to put an error message on the dom
	    $scope.isLoading = false;
	  }

	  // Go

	  initialSetup();

	  // Just to keep the templates a bit cleaner
	  $scope.can = AuthorisationService.can;
	  $scope.cannot = AuthorisationService.cannot;

	  $scope.$watch(QueryService.getQueryName, function(queryName){
	    $scope.selectedTitle = queryName || I18n.t('js.toolbar.unselected_title');
	  });

	  $rootScope.$on('queryStateChange', function(event, message) {
	    $scope.maintainUrlQueryState();
	    $scope.maintainBackUrl();
	  });

	  $rootScope.$on('workPackagesRefreshRequired', function(event, message) {
	    updateResults();
	  });

	  $rootScope.$on('queryClearRequired', function(event, message) {
	    $location.search('query_props', null);
	    if($location.search().query_id) {
	      $location.search('query_id', null);
	    } else {
	      initialSetup();
	    }
	  });

	  $rootScope.$on('workPackgeLoaded', function(event, message) {
	    $scope.maintainBackUrl();
	  });

	  $scope.openLatestTab = function() {
	    $scope.settingUpPage = $state.go(
	      latestTab.getStateName(),
	      {
	        workPackageId: $scope.preselectedWorkPackageId,
	        'query_props': $location.search()['query_props']
	      });
	  };

	  $scope.openOverviewTab = function() {
	    $scope.settingUpPage = $state.go(
	      'work-packages.list.details.overview',
	      {
	        workPackageId: $scope.preselectedWorkPackageId,
	        'query_props': $location.search()['query_props']
	      });
	  };

	  $scope.closeDetailsView = function() {
	    // can't use query_props in $state.go since it's not specified
	    // in the config. if I put it into config, a reload will be triggered
	    // on each filter change
	    var path = $state.href("work-packages.list"),
	        query_props = $location.search().query_props;
	    $location.url(path).search('query_props', query_props);
	  };

	  $scope.showWorkPackageDetails = function(id, force) {
	    if (force || $state.current.url != "") {
	      $scope.settingUpPage = $state.go(
	        latestTab.getStateName(),
	        { workPackageId: id, 'query_props': $location.search()['query_props'] }
	      );
	    }
	  };

	  $scope.getFilterCount = function() {
	    if ($scope.query) {
	      var filters = $scope.query.filters;
	      return _.size(_.where(filters, function(filter) {
	        return !filter.deactivated;
	      }));
	    } else {
	      return 0;
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, $filter, columnsModal, QueryService, 
	                          WorkPackageService, WorkPackagesTableService, 
	                          $rootScope, $timeout) {

	  this.name    = 'Columns';
	  this.closeMe = columnsModal.deactivate;
	  var vm;
	  $scope.vm = vm = {};
	  vm.selectedColumns = [];
	  vm.oldSelectedColumns = [];
	  vm.availableColumns = [];
	  vm.unusedColumns = [];

	  var selectedColumns = QueryService.getSelectedColumns();

	  // Available selectable Columns
	  vm.promise = QueryService.loadAvailableColumns()
	    .then(function(availableColumns){
	      vm.availableColumns = availableColumns; // all existing columns
	      vm.unusedColumns = QueryService.selectUnusedColumns(availableColumns); // columns not shown

	      var availableColumnNames = getColumnNames(availableColumns);
	      selectedColumns.forEach(function(column) {
	        if (_.contains(availableColumnNames, column.name)) {
	          vm.selectedColumns.push(column);
	          vm.oldSelectedColumns.push(column);
	        }
	      });
	    });

	  function getNewlyAddedColumns() {
	    return _.difference(vm.selectedColumns, vm.oldSelectedColumns);
	  }

	  function getColumnName(column) {
	    return column.name;
	  }

	  function getColumnNames(arr) {
	    return _.map(arr, getColumnName);
	  }

	  $scope.updateSelectedColumns = function() {
	    QueryService.setSelectedColumns(getColumnNames(vm.selectedColumns));

	    // Augment work packages with new columns data
	    var addedColumns        = getNewlyAddedColumns(),
	        currentWorkPackages = WorkPackagesTableService.getRowsData(),
	        groupBy             = WorkPackagesTableService.getGroupBy();

	    if(groupBy.length === 0) groupBy = undefined; // don't pass an empty string as groupBy

	    if(addedColumns.length) {
	      $rootScope.refreshWorkPackages = WorkPackageService.augmentWorkPackagesWithColumnsData(currentWorkPackages, addedColumns, groupBy);
	    }

	    columnsModal.deactivate();
	  };

	  /**
	   * When a column is removed from the selection it becomes unused and hence available for
	   * selection again. When a column is added to the selection it becomes used and is
	   * therefore unavailable for selection.
	   *
	   * This function updates the unused columns according to the currently selected columns.
	   *
	   * @param selectedColumns Columns currently selected through the multi select box.
	   */
	  $scope.updateUnusedColumns = function(selectedColumns) {
	    var used = _.map(selectedColumns, getColumnName);
	    var isUnused = function(col) {
	      return !_.contains(used, col.name);
	    };

	    vm.unusedColumns = _.filter(vm.availableColumns, isUnused);
	  };
	  
	  //hack to prevent dragging of close icons
	  $timeout(function(){
	    angular.element('.columns-modal-content .ui-select-match-close')
	      .on('dragstart', function(event) {
	        event.preventDefault(); 
	      });
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 179 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope,
	                          $filter,
	                          groupingModal,
	                          QueryService,
	                          WorkPackagesTableService,
	                          I18n) {

	  this.name    = 'GroupBy';
	  this.closeMe = groupingModal.deactivate;

	  var emptyOption = {
	    title: I18n.t('js.inplace.clear_value_label')
	  };

	  $scope.vm = {};

	  $scope.updateGroupBy = function(){
	    QueryService.setGroupBy($scope.vm.selectedColumnName);

	    groupingModal.deactivate();
	  };

	  $scope.workPackageTableData = WorkPackagesTableService.getWorkPackagesTableData();

	  $scope.$watch('workPackageTableData.groupableColumns', function(groupableColumns) {
	    if (!groupableColumns) {
	      return;
	    }

	    $scope.vm.groupableColumns   = [emptyOption].concat(groupableColumns);
	    $scope.vm.selectedColumnName = QueryService.getGroupBy();
	  });

	};


/***/ },
/* 180 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	    $scope,
	    saveModal,
	    QueryService,
	    AuthorisationService,
	    $state,
	    NotificationsService
	  ) {

	  this.name    = 'Save';
	  this.closeMe = saveModal.deactivate;

	  $scope.saveQueryAs = function(name) {
	    QueryService.saveQueryAs(name)
	      .then(function(data){

	        if (data.status.isError){
	          NotificationsService.addError(data.status.text);
	        }
	        else {
	          // push query id to URL without reinitializing work-packages-list-controller
	          if (data.query) {
	            $state.go('work-packages.list',
	                      { query_id: data.query.id, query: null },
	                      { notify: false });
	            AuthorisationService.initModelAuth('query', data.query._links);
	          }

	          saveModal.deactivate();

	          NotificationsService.addSuccess(data.status.text);
	        }
	      });
	  };
	};


/***/ },
/* 181 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	    $scope,
	    settingsModal,
	    QueryService,
	    AuthorisationService,
	    $rootScope,
	    QUERY_MENU_ITEM_TYPE,
	    NotificationsService
	  ) {

	  var query = QueryService.getQuery();

	  this.name    = 'Settings';
	  this.closeMe = settingsModal.deactivate;
	  $scope.queryName   = query.name;

	  $scope.updateQuery = function() {
	    query.name = $scope.queryName;
	    QueryService.saveQuery()
	      .then(function(data) {
	        QueryService.updateHighlightName();
	        return data;
	      })
	      .then(function(data) {
	        settingsModal.deactivate();
	        NotificationsService.addSuccess(data.status.text);

	        $rootScope.$broadcast('openproject.layout.renameQueryMenuItem', {
	          itemType: QUERY_MENU_ITEM_TYPE,
	          queryId: query.id,
	          queryName: query.name
	        });

	        if(data.query) {
	          AuthorisationService.initModelAuth('query', data.query._links);
	        }
	      });
	    };
	};


/***/ },
/* 182 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	    $scope,
	    shareModal,
	    QueryService,
	    AuthorisationService,
	    queryMenuItemFactory,
	    PathHelper,
	    NotificationsService
	  ) {

	  this.name    = 'Share';
	  this.closeMe = shareModal.deactivate;
	  $scope.query = QueryService.getQuery();

	  $scope.shareSettings = {
	    starred: $scope.query.starred
	  };

	  function closeAndReport(message) {
	    shareModal.deactivate();
	    NotificationsService.addSuccess(message.text);
	  }

	  $scope.cannot = AuthorisationService.cannot;

	  $scope.saveQuery = function() {
	    var messageObject;
	    QueryService.saveQuery()
	      .then(function(data){
	        messageObject = data.status;
	        if(data.query) {
	          AuthorisationService.initModelAuth('query', data.query._links);
	        }
	      })
	      .then(function(data){
	        if($scope.query.starred !== $scope.shareSettings.starred){
	          QueryService.toggleQueryStarred($scope.query)
	            .then(function(data){
	              closeAndReport(data.status || messageObject);

	              return $scope.query;
	            });
	        } else {
	          closeAndReport(messageObject);
	        }
	      });
	  };
	};


/***/ },
/* 183 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(sortingModal, $scope, $filter, QueryService, I18n) {
	  this.name    = 'Sorting';
	  this.closeMe = sortingModal.deactivate;

	  $scope.availableColumnsData = [];
	  $scope.sortElements = [];
	  $scope.initSortation = function(){
	    var currentSortation = QueryService.getSortation();

	    $scope.sortElements = currentSortation.sortElements.map(function(element){
	      return [
	        $scope.availableColumnsData.filter(function(column) { return column.id == element.field; })[0],
	        $scope.availableDirectionsData.filter(function(direction) { return direction.id == element.direction; })[0]
	      ];
	    });

	    fillUpSortElements();
	  };

	  function fillUpSortElements() {
	    while($scope.sortElements.length < 3) {
	      $scope.sortElements.push([{}, $scope.availableDirectionsData[1]]);
	    }
	  }

	  // reduction of column options to columns that haven't been selected

	  function getIdsOfSelectedSortElements() {
	    return $scope.sortElements
	      .map(function(sortElement) {
	        if (sortElement.length) return sortElement[0].id;
	      })
	      .filter(function(element) { return element; });
	  }
	  function getRemainingAvailableColumnsData() {
	    return $scope.availableColumnsData.filter(function(availableColumn) {
	      return getIdsOfSelectedSortElements().indexOf(availableColumn.id) === -1;
	    });
	  }

	  $scope.getRemainingAvailableColumnsData = getRemainingAvailableColumnsData;
	  // updates

	  $scope.updateSortation = function(){
	    var sortElements = $scope.sortElements
	      .filter(function(element){
	        return element.length == 2;
	      })
	      .map(function(element){
	        return { field: element[0].id, direction: element[1].id };
	      });
	    QueryService.updateSortElements(sortElements);

	    sortingModal.deactivate();
	  };

	  // setup

	  $scope.availableDirectionsData = [{ id: 'desc', label: I18n.t('js.label_descending')}, { id: 'asc', label: I18n.t('js.label_ascending')}];

	  var blankOption = { id: null, label: ' ', other: null };

	  $scope.promise = QueryService.loadAvailableColumns()
	    .then(function(available_columns){

	      $scope.availableColumnsData = available_columns
	        .filter(function(column){
	          return !!column.sortable;
	        })
	        .map(function(column){
	          return { id: column.name, label: column.title, other: column.title };
	        });
	      $scope.availableColumnsData.unshift(blankOption);

	      $scope.initSortation();
	    });
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++


	angular.module('openproject.workPackages')
	  .factory('ColumnContextMenu', [
	    'ngContextMenu',
	    function(ngContextMenu) {
	      return ngContextMenu({
	        controller: 'ColumnContextMenuController',
	        controllerAs: 'contextMenu',
	        templateUrl: '/templates/work_packages/menus/column_context_menu.html',
	        container: '.work-packages--list-table-area'
	      });
	    }
	  ])
	  .controller('ColumnContextMenuController', [
	    '$scope',
	    'ColumnContextMenu',
	    'I18n',
	    'QueryService',
	    'WorkPackagesTableHelper',
	    'WorkPackagesTableService',
	    'columnsModal',
	    __webpack_require__(185)
	  ])
	  .factory('SettingsDropdownMenu', [
	    'ngContextMenu',
	    function(ngContextMenu) {
	      return ngContextMenu({
	        controller: 'SettingsDropdownMenuController',
	        templateUrl: '/templates/work_packages/menus/settings_dropdown_menu.html',
	        container: '.toolbar'
	      });
	    }
	  ])
	  .controller('SettingsDropdownMenuController', [
	    '$scope',
	    'I18n',
	    'columnsModal',
	    'exportModal',
	    'saveModal',
	    'settingsModal',
	    'shareModal',
	    'sortingModal',
	    'groupingModal',
	    'QueryService',
	    'AuthorisationService',
	    '$window',
	    '$state',
	    '$timeout',
	    'NotificationsService',
	    __webpack_require__(186)
	  ])
	  .factory('TasksDropdownMenu', [
	    'ngContextMenu',
	    function(ngContextMenu) {
	      return ngContextMenu({
	        templateUrl: '/templates/work_packages/menus/tasks_dropdown_menu.html',
	        container: '.toolbar'
	      });
	    }
	  ])
	  .constant('PERMITTED_CONTEXT_MENU_ACTIONS', [
	    'edit', 'watch', 'log_time',
	    'duplicate', 'move', 'copy', 'delete'
	  ])
	  .factory('WorkPackageContextMenu', [
	    'ngContextMenu',
	    function(ngContextMenu) {
	      return ngContextMenu({
	        controller: 'WorkPackageContextMenuController',
	        controllerAs: 'contextMenu',
	        templateUrl: '/templates/work_packages/menus/work_package_context_menu.html'
	      });
	    }
	  ])
	  .controller('WorkPackageContextMenuController', [
	    '$scope',
	    'WorkPackagesTableHelper',
	    'WorkPackageContextMenuHelper',
	    'WorkPackageService',
	    'WorkPackagesTableService',
	    'I18n',
	    '$window',
	    'PERMITTED_CONTEXT_MENU_ACTIONS',
	    __webpack_require__(187)
	  ])
	  .factory('DetailsMoreDropdownMenu', [
	    'ngContextMenu',
	    function(ngContextMenu) {
	      return ngContextMenu({
	        templateUrl: '/templates/work_packages/menus/details_more_dropdown_menu.html',
	        container: '.work-packages--details-toolbar'
	      });
	    }
	  ])
	  .factory('QuerySelectDropdownMenu', [
	    'ngContextMenu',
	    function(ngContextMenu) {
	      return ngContextMenu({
	        templateUrl: '/templates/work_packages/menus/query_select_dropdown_menu.html',
	        container: '.title-container',
	        controller: 'QuerySelectDropdownMenuController'
	      });
	    }
	  ])
	  .controller('QuerySelectDropdownMenuController', [
	    '$scope',
	    '$sce', 'LABEL_MAX_CHARS', 'KEY_CODES',
	    __webpack_require__(188)
	  ]);


/***/ },
/* 185 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, ColumnContextMenu, I18n, QueryService, WorkPackagesTableHelper, WorkPackagesTableService, columnsModal) {

	    $scope.I18n = I18n;

	    $scope.$watch('column', function() {
	      // fall back to 'id' column as the default
	      $scope.column = $scope.column || { name: 'id', sortable: true };
	      $scope.isGroupable = WorkPackagesTableService.isGroupable($scope.column);
	    });

	    // context menu actions

	    $scope.groupBy = function(columnName) {
	      QueryService.getQuery().groupBy = columnName;
	      QueryService.getQuery().dirty = true;
	    };

	    $scope.sortAscending = function(columnName) {
	      WorkPackagesTableService.sortBy(columnName || 'id', 'asc');
	      QueryService.getQuery().dirty = true;
	    };

	    $scope.sortDescending = function(columnName) {
	      WorkPackagesTableService.sortBy(columnName || 'id', 'desc');
	      QueryService.getQuery().dirty = true;
	    };

	    $scope.moveLeft = function(columnName) {
	      WorkPackagesTableHelper.moveColumnBy($scope.columns, columnName, -1);
	      QueryService.getQuery().dirty = true;
	    };

	    $scope.moveRight = function(columnName) {
	      WorkPackagesTableHelper.moveColumnBy($scope.columns, columnName, 1);
	      QueryService.getQuery().dirty = true;
	    };

	    $scope.hideColumn = function(columnName) {
	      ColumnContextMenu.close();
	      QueryService.hideColumns(new Array(columnName));
	      QueryService.getQuery().dirty = true;
	    };

	    $scope.insertColumns = function() {
	      columnsModal.activate();
	    };

	    $scope.canSort = function() {
	      return $scope.column && !!$scope.column.sortable;
	    };

	    function isValidColumn(column) {
	      return column;
	    }

	    $scope.canMoveLeft = function() {
	      return isValidColumn($scope.column) && $scope.columns.indexOf($scope.column) !== 0;
	    };

	    $scope.canMoveRight = function() {
	      return isValidColumn($scope.column) && $scope.columns.indexOf($scope.column) !== $scope.columns.length - 1;
	    };

	    $scope.canBeHidden = function() {
	      return isValidColumn($scope.column);
	    };

	    $scope.focusFeature = function(feature) {
	      var focus;
	      var mergeOrReturn = function(currentState, state) {
	        return ((currentState === undefined) ? state : currentState && !state);
	      };

	      switch (feature) {
	        case 'insert': focus = mergeOrReturn(focus, true);
	        case 'hide': focus = mergeOrReturn(focus, $scope.canBeHidden());
	        case 'moveRight': focus = mergeOrReturn(focus, $scope.canMoveRight());
	        case 'moveLeft': focus = mergeOrReturn(focus, $scope.canMoveLeft());
	        case 'group': focus = mergeOrReturn(focus, !!$scope.isGroupable);
	        default: focus = mergeOrReturn(focus, $scope.canSort());
	      }

	      return focus;
	    };
	};


/***/ },
/* 186 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	  $scope, I18n, columnsModal,
	  exportModal, saveModal, settingsModal,
	  shareModal, sortingModal, groupingModal,
	  QueryService, AuthorisationService,
	  $window, $state, $timeout,
	  NotificationsService) {
	  $scope.$watch('query.displaySums', function(newValue) {
	    $timeout(function() {
	      $scope.displaySumsLabel = (newValue) ? I18n.t('js.toolbar.settings.hide_sums')
	                                          : I18n.t('js.toolbar.settings.display_sums');
	    });
	  });

	  $scope.saveQuery = function(event){
	    event.stopPropagation();
	    if (!$scope.query.isDirty()) {
	      return;
	    }
	    if($scope.query.isNew()) {
	      if( allowQueryAction(event, 'create') ){
	        emitClosingEvents($scope);
	        saveModal.activate();
	      }
	    } else {
	      if( allowQueryAction(event, 'update') ) {
	        QueryService.saveQuery()
	          .then(function(data){
	            if (data.status.isError) {
	              NotificationsService.addError(data.status.text);
	            }
	            else {
	              NotificationsService.addSuccess(data.status.text);
	              $state.go('work-packages.list',
	                        { 'query_id': $scope.query.id, 'query_props': null },
	                        { notify: false });
	            }
	          });
	      }
	    }
	  };

	  $scope.deleteQuery = function(event){
	    event.stopPropagation();
	    if( allowQueryAction(event, 'delete') && preventNewQueryAction(event) && deleteConfirmed() ){
	      QueryService.deleteQuery()
	        .then(function(data){
	          if (data.status.isError) {
	              NotificationsService.addError(data.status.text);
	          }
	          else {
	            NotificationsService.addSuccess(data.status.text);
	            $state.go('work-packages.list',
	                      { 'query_id': null, 'query_props': null },
	                      { reload: true });
	          }
	        });
	    }
	  };

	  // Modals
	  $scope.showSaveAsModal = function(event){
	    event.stopPropagation();
	    if( allowQueryAction(event, 'create') ) {
	      showExistingQueryModal.call(saveModal, event);
	    }
	  };

	  $scope.showShareModal = function(event){
	    event.stopPropagation();
	    if (allowQueryAction(event, 'publicize') || allowQueryAction(event, 'star')) {
	      showExistingQueryModal.call(shareModal, event);
	    }
	  };

	  $scope.showSettingsModal = function(event){
	    event.stopPropagation();
	    if( allowQueryAction(event, 'update') ) {
	      showExistingQueryModal.call(settingsModal, event);
	    }
	  };

	  $scope.showExportModal = function(event){
	    event.stopPropagation();
	    if( allowWorkPackageAction(event, 'export') ) {
	      showModal.call(exportModal);
	    }
	  };

	  $scope.showColumnsModal = function(event){
	    event.stopPropagation();
	    showModal.call(columnsModal);
	  };

	  $scope.showGroupingModal = function(event){
	    event.stopPropagation();
	    showModal.call(groupingModal);
	  };

	  $scope.showSortingModal = function(event){
	    event.stopPropagation();
	    showModal.call(sortingModal);
	  };

	  $scope.toggleDisplaySums = function(){
	    emitClosingEvents($scope);
	    $scope.query.displaySums = !$scope.query.displaySums;

	    // This eventually calls the resize event handler defined in the
	    // WorkPackagesTable directive and ensures that the sum row at the
	    // table footer is properly displayed.
	    angular.element($window).trigger('resize');
	  };

	  $scope.showSettingsModalInvalid = function() {
	    return AuthorisationService.cannot('query', 'update');
	  };

	  $scope.showShareModalInvalid = function() {
	    return (AuthorisationService.cannot('query', 'publicize') &&
	            AuthorisationService.cannot('query', 'star'));
	  };

	  $scope.showExportModalInvalid = function() {
	    return AuthorisationService.cannot('work_package', 'export');
	  };

	  $scope.deleteQueryInvalid = function() {
	    return AuthorisationService.cannot('query', 'delete');
	  };

	  $scope.showSaveModalInvalid = function() {
	    return $scope.query.isNew() || AuthorisationService.cannot('query', 'create');
	  };

	  $scope.saveQueryInvalid = function() {
	    return (!$scope.query.isDirty()) ||
	      (
	        $scope.query.isDirty() &&
	        !$scope.query.isNew() &&
	        AuthorisationService.cannot('query', 'update')
	      ) ||
	      ($scope.query.isNew() && AuthorisationService.cannot('query', 'create'));
	  };

	  function preventNewQueryAction(event){
	    if (event && $scope.query.isNew()) {
	      event.stopPropagation();
	      return false;
	    }
	    return true;
	  }

	  function showModal() {
	    emitClosingEvents($scope);
	    this.activate();
	  }

	  function showExistingQueryModal(event) {
	    if( preventNewQueryAction(event) ){
	      emitClosingEvents($scope);
	      this.activate();
	    }
	  }

	  function allowQueryAction(event, action) {
	    return allowAction(event, 'query', action);
	  }

	  function allowWorkPackageAction(event, action) {
	    return allowAction(event, 'work_package', action);
	  }

	  function allowAction(event, modelName, action) {
	    if(AuthorisationService.can(modelName, action)){
	      return true;
	    } else {
	      event.stopPropagation();
	      return false;
	    }
	  }

	  function emitClosingEvents($scope) {
	    $scope.$emit('hideAllDropdowns');
	    $scope.$root.$broadcast('openproject.dropdown.closeDropdowns', true);
	  }

	  function deleteConfirmed() {
	    return $window.confirm(I18n.t('js.text_query_destroy_confirmation'));
	  }
	};


/***/ },
/* 187 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, WorkPackagesTableHelper, WorkPackageContextMenuHelper, WorkPackageService, WorkPackagesTableService, I18n, $window, PERMITTED_CONTEXT_MENU_ACTIONS) {

	  $scope.I18n = I18n;

	  $scope.$watch('row', function() {
	    if (!$scope.row.checked) {
	      WorkPackagesTableService.setCheckedStateForAllRows($scope.rows, false);
	    }

	    $scope.row.checked = true;
	    $scope.permittedActions = WorkPackageContextMenuHelper.getPermittedActions(getSelectedWorkPackages(), PERMITTED_CONTEXT_MENU_ACTIONS);
	  });

	  $scope.isDetailsViewLinkPresent = function() {
	    return !!angular.element('#work-package-context-menu li.open').length;
	  };

	  $scope.triggerContextMenuAction = function(action, link) {
	    if (action === 'delete') {
	      deleteSelectedWorkPackages();
	    } else {
	      $window.location.href = link;
	    }
	  };

	  function deleteSelectedWorkPackages() {
	    var rows = WorkPackagesTableHelper.getSelectedRows($scope.rows);

	    WorkPackageService.performBulkDelete(getSelectedWorkPackages().map(function(wp) { return wp.id; }), true);
	  }

	  function getWorkPackagesFromSelectedRows() {
	    var selectedRows = WorkPackagesTableHelper.getSelectedRows($scope.rows);

	    return WorkPackagesTableHelper.getWorkPackagesFromRows(selectedRows);
	  }

	  function getSelectedWorkPackages() {
	    var workPackagefromContext = $scope.row.object;
	    var workPackagesfromSelectedRows = getWorkPackagesFromSelectedRows();

	    if (workPackagesfromSelectedRows.length === 0) {
	      return [workPackagefromContext];
	    } else if (workPackagesfromSelectedRows.indexOf(workPackagefromContext) === -1) {
	      return [workPackagefromContext].concat(workPackagesfromSelectedRows);
	    } else {
	      return workPackagesfromSelectedRows;
	    }
	  }

	};


/***/ },
/* 188 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($scope, $sce, LABEL_MAX_CHARS, KEY_CODES) {
	  var scope = $scope;
	  scope.$watch('groups', refreshFilteredGroups);
	  scope.$watch('selectedId', selectTitle);

	  function refreshFilteredGroups() {
	    if (scope.groups) {
	      initFilteredModels();
	    }
	  }

	  function selectTitle() {
	    angular.forEach(scope.filteredGroups, function(group) {
	      if (group.models.length) {
	        angular.forEach(group.models, function(model){
	          model.highlighted = model.id == scope.selectedId;
	        });
	      }
	    });
	  }

	  function initFilteredModels() {
	    scope.filteredGroups = angular.copy(scope.groups);
	    angular.forEach(scope.filteredGroups, function(group) {
	      group.models = group.models.map(function(model){
	        return {
	          label: model[0],
	          labelHtml: $sce.trustAsHtml(truncate(model[0], LABEL_MAX_CHARS)),
	          id: model[1],
	          highlighted: false
	        };
	      });
	    });
	  }

	  function labelHtml(label, filterBy) {
	    var html;
	    filterBy = filterBy.toLowerCase();
	    label = truncate(label, LABEL_MAX_CHARS);
	    if (label.toLowerCase().indexOf(filterBy) >= 0) {
	      html = label.substr(0, label.toLowerCase().indexOf(filterBy)) +
	        '<span class=\'filter-selection\'>' +
	        label.substr(label.toLowerCase().indexOf(filterBy), filterBy.length) +
	        '</span>' + label.substr(label.toLowerCase().indexOf(filterBy) + filterBy.length);
	    } else {
	      html = label;
	    }
	    return $sce.trustAsHtml(html);
	  }

	  function truncate(text, chars) {
	    if (text.length > chars) {
	      return text.substr(0, chars) + '...';
	    }
	    return text;
	  }

	  function modelIndex(models) {
	    return models.map(function(model) {
	      return model.id;
	    }).indexOf(scope.selectedId);
	  }

	  function performSelect() {
	    scope.transitionMethod(scope.selectedId);
	  }

	  function nextNonEmptyGroup(groups, currentGroupIndex) {
	    currentGroupIndex = (currentGroupIndex === undefined) ? -1 : currentGroupIndex;
	    while (currentGroupIndex < groups.length - 1) {
	      if (groups[currentGroupIndex + 1].models.length) {
	        return groups[currentGroupIndex + 1];
	      }
	      currentGroupIndex = currentGroupIndex + 1;
	    }
	    return null;
	  }

	  function previousNonEmptyGroup(groups, currentGroupIndex) {
	    while (currentGroupIndex > 0) {
	      if(groups[currentGroupIndex - 1].models.length) {
	        return groups[currentGroupIndex - 1];
	      }
	      currentGroupIndex = currentGroupIndex - 1;
	    }
	    return null;
	  }

	  function getModelPosition(groups) {
	    for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
	      var models = groups[groupIdx].models;
	      var modelIdx = modelIndex(models);
	      if(modelIdx >= 0) {
	        return {
	          group: groupIdx,
	          model: modelIdx
	        };
	      }
	    }
	    return false;
	  }

	  function selectNext() {
	    var groups = scope.filteredGroups,
	      nextGroup;
	    if(!scope.selectedId) {
	      nextGroup = nextNonEmptyGroup(groups);
	      scope.selectedId = nextGroup ? nextGroup.models[0].id : 0;
	    } else {
	      var position = getModelPosition(groups, scope.selectedId);
	      if (!position) {
	        return;
	      }
	      var models = groups[position.group].models;

	      if(position.model == models.length - 1){ // It is the last in the group
	        nextGroup = nextNonEmptyGroup(groups, position.group);
	        if(nextGroup) {
	          scope.selectedId = nextGroup.models[0].id;
	        }
	      } else {
	        scope.selectedId = models[position.model + 1].id;
	      }
	    }
	  }

	  function selectPrevious() {
	    var groups = scope.filteredGroups;
	    if (scope.selectedId) {
	      var position = getModelPosition(groups, scope.selectedId);
	      if (!position) {
	        return;
	      }
	      var models = groups[position.group].models;

	      if (position.model === 0) { // It is the last in the group
	        var previousGroup = previousNonEmptyGroup(groups, position.group);
	        if(previousGroup) {
	          scope.selectedId = previousGroup.models[previousGroup.models.length - 1].id;
	        }
	      } else {
	        scope.selectedId = models[position.model - 1].id;
	      }
	    }
	  }

	  function preventDefault(event) {
	    event.preventDefault();
	    event.stopPropagation();
	  }

	  angular.element('#title-filter').bind('click', function(event) {
	    preventDefault(event);
	  });

	  scope.handleSelection = function(event) {
	    switch(event.which) {
	      case KEY_CODES.enter:
	        performSelect();
	        preventDefault(event);
	        break;
	      case KEY_CODES.down:
	        selectNext();
	        preventDefault(event);
	        break;
	      case KEY_CODES.up:
	        selectPrevious();
	        preventDefault(event);
	        break;
	      default:
	        break;
	    }
	  };

	  scope.reload = function(modelId, newTitle) {
	    scope.selectedTitle = newTitle;
	    scope.reloadMethod(modelId);
	    scope.$emit('hideAllDropdowns');
	  };

	  scope.filterModels = function(filterBy) {
	    initFilteredModels();

	    scope.selectedId = 0;
	    angular.forEach(scope.filteredGroups, function(group) {
	      if (filterBy.length) {
	        group.filterBy = filterBy;
	        group.models = group.models.filter(function(model){
	          return model.label.toLowerCase().indexOf(filterBy.toLowerCase()) >= 0;
	        });

	        if (group.models.length) {
	          angular.forEach(group.models, function(model){
	            model['labelHtml'] = labelHtml(model.label, filterBy);
	          });
	          if (!scope.selectedId) {
	            group.models[0].highlighted = true;
	            scope.selectedId = group.models[0].id;
	          }
	        }
	      }
	    });
	  };
	};


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.directives')
	  .directive('langAttribute', __webpack_require__(190))
	  .directive('queryColumns', [
	    'WorkPackagesTableHelper',
	    'WorkPackagesTableService',
	    'WorkPackageService',
	    'QueryService', __webpack_require__(191)
	  ])
	  .directive('queryFilter', [
	    'WorkPackageLoadingHelper',
	    'QueryService',
	    'PaginationService',
	    'I18n',
	    'OPERATORS_NOT_REQUIRING_VALUES',
	    '$timeout',
	    '$animate', __webpack_require__(192)
	  ])
	  .constant('ADD_FILTER_SELECT_INDEX', -1)
	  .directive('queryFilters', [
	    '$timeout',
	    'FiltersHelper',
	    'I18n',
	    'ADD_FILTER_SELECT_INDEX', __webpack_require__(193)
	  ])
	  .directive('queryForm', __webpack_require__(194))
	  .directive('sortHeader', [
	    'I18n', __webpack_require__(195)
	  ])
	  .directive('workPackageColumn', ['PathHelper', 'WorkPackagesHelper',
	    'UserService',
	    __webpack_require__(196)
	  ])
	  .directive('workPackageField', __webpack_require__(197))
	  .constant('PERMITTED_MORE_MENU_ACTIONS', ['log_time', 'duplicate', 'move',
	    'delete'
	  ])
	  .directive('workPackageDetailsToolbar', [
	    'PERMITTED_MORE_MENU_ACTIONS',
	    '$state',
	    '$window',
	    '$location',
	    'I18n',
	    'HookService',
	    'WorkPackageService',
	    'WorkPackageAuthorization',
	    'PathHelper',
	    __webpack_require__(198)
	  ])
	  .directive('workPackageDynamicAttribute', ['$compile', __webpack_require__(
	    199)])
	  .directive('workPackageGroupHeader', __webpack_require__(
	    200))
	  .directive('workPackageGroupSums', __webpack_require__(
	    201))
	  .directive('workPackageRow', ['I18n', 'WorkPackagesTableService', __webpack_require__(
	    202)])
	  .directive('workPackageTotalSums', [
	    'WorkPackageService',
	    __webpack_require__(203)
	  ])
	  .directive('workPackagesTable', [
	    'I18n',
	    'WorkPackagesTableService',
	    '$window',
	    '$timeout',
	    'featureFlags',
	    'PathHelper',
	    __webpack_require__(204)
	  ])
	  .directive('workPackageAttachments', [
	    'WorkPackageAttachmentsService',
	    'NotificationsService',
	    'I18n',
	    'ConfigurationService',
	    'ConversionService',
	    'FocusHelper',
	    __webpack_require__(205)
	  ])
	  .directive('workPackageWatcher', [
	    'I18n',
	    __webpack_require__(206)
	  ])
	  .directive('workPackageWatchersLookup', [
	    'I18n',
	    'FocusHelper',
	    __webpack_require__(207)
	  ]);

	  __webpack_require__(208);
	  __webpack_require__(212);
	  __webpack_require__(216);


/***/ },
/* 190 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    link: function(scope, element, attributes){
	      if(scope.column && scope.column.custom_field){
	        var langAttr = document.createAttribute('lang');
	        langAttr.nodeValue = scope.column.custom_field.name_locale;
	        element[0].setAttributeNode(langAttr);
	      }
	    }
	  };
	};


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WorkPackagesTableHelper, WorkPackagesTableService, WorkPackageService, QueryService) {

	  return {
	    restrict: 'E',
	    replace: true,
	    scope: {},
	    templateUrl: '/templates/work_packages/query_columns.html',
	    compile: function(tElement) {
	      return {
	        pre: function(scope) {
	          scope.tableData = WorkPackagesTableService.getWorkPackagesTableData();

	          scope.$watch('tableData.columns', function(columns) {
	            scope.columns = columns;
	          });

	          QueryService.loadAvailableUnusedColumns().then(function(availableUnusedColumns) {
	            scope.availableUnusedColumns = availableUnusedColumns;
	          });

	          scope.showColumns = function(columnNames) {
	            QueryService.showColumns(columnNames);

	            extendRowsWithColumnData(columnNames); // TODO move to QueryService
	          };

	          scope.hideColumns = function(columnNames) {
	            QueryService.hideColumns(columnNames);
	          };

	          scope.moveSelectedColumnBy = function(by) {
	            var nameOfColumnToBeMoved = _.first(scope.markedSelectedColumns);
	            WorkPackagesTableHelper.moveColumnBy(scope.columns, nameOfColumnToBeMoved, by);
	          };

	          // TODO move to WorkPackagesService
	          function extendRowsWithColumnData(columnNames) {
	            var workPackages = WorkPackagesTableService.getRowsData(),
	                groupBy = WorkPackagesTableService.getGroupBy();

	            var newColumns = WorkPackagesTableHelper.selectColumnsByName(scope.columns, columnNames);

	            WorkPackageService.augmentWorkPackagesWithColumnsData(workPackages, newColumns, groupBy)
	              .then(function(){ scope.$emit('queryStateChange'); });
	          }
	        }
	      };
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	  WorkPackageLoadingHelper,
	  QueryService,
	  PaginationService,
	  I18n,
	  OPERATORS_NOT_REQUIRING_VALUES,
	  $timeout,
	  $animate
	) {

	  var updateResultsJob;

	  return {
	    restrict: 'A',
	    scope: true,
	    link: function(scope, element, attributes) {
	      scope.I18n = I18n;
	      scope.isLoading = false; // shadow isLoading as its used for a different purpose in this context

	      scope.filterModelOptions = {
	        updateOn: 'default blur',
	        debounce: { 'default': 400, 'blur': 0 }
	      };

	      $animate.enabled(false, element);
	      scope.showValueOptionsAsSelect = !scope.filter.isSingleInputField();

	      if (scope.showValueOptionsAsSelect) {
	        WorkPackageLoadingHelper.withLoading(scope, QueryService.getAvailableFilterValues, [scope.filter.name, scope.projectIdentifier])
	          .then(buildOptions)
	          .then(addStandardOptions)
	          .then(function(options) {
	            scope.availableFilterValueOptions = options;
	          });
	      }

	      preselectOperator();

	      scope.$on('openproject.workPackages.updateResults', function() {
	        $timeout.cancel(updateResultsJob);
	      });

	      // Filter updates

	      scope.$watch('filter.operator', function(operator) {
	        if(operator && scope.filter.requiresValues) scope.showValuesInput = scope.filter.requiresValues();
	      });

	      scope.$watch('filter', function(filter, oldFilter) {
	        if (filter !== oldFilter) {
	          if (filter.isConfigured() && (filterChanged(filter, oldFilter) || valueReset(filter, oldFilter))) {
	            PaginationService.resetPage();
	            scope.$emit('queryStateChange');
	            scope.$emit('workPackagesRefreshRequired');
	            scope.query.dirty = true;
	          }
	        }
	      }, true);

	      function buildOptions(values) {
	        return values.map(function(value) {
	          return [value.name, value.id];
	        });
	      }

	      function addStandardOptions(options) {
	        if (scope.filter.modelName === 'user') {
	          options.unshift(['<< ' + I18n.t('js.label_me') + ' >>', 'me']);
	        }

	        return options;
	      }

	      function filterChanged(filter, oldFilter) {
	        return filter.operator !== oldFilter.operator ||
	          !angular.equals(filter.getValuesAsArray(), oldFilter.getValuesAsArray()) ||
	          filter.deactivated !== oldFilter.deactivated;
	      }

	      function valueReset(filter, oldFilter) {
	        return oldFilter.hasValues() && !filter.hasValues();
	      }

	      function preselectOperator() {
	        if (!scope.filter.operator) {
	          var operatorArray = _.find(
	            scope.operatorsAndLabelsByFilterType[scope.filter.type],
	            function(operator) {
	              return OPERATORS_NOT_REQUIRING_VALUES.indexOf(operator[0]) === -1;
	            }
	          );
	          scope.filter.operator = operatorArray ? operatorArray[0] : undefined;
	        }
	      }
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 193 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($timeout, FiltersHelper, I18n, ADD_FILTER_SELECT_INDEX) {

	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/work_packages/query_filters.html',
	    compile: function(tElement) {
	      return {
	        pre: function(scope) {
	          scope.I18n = I18n;
	          scope.localisedFilterName = FiltersHelper.localisedFilterName;
	          scope.focusElementIndex;

	          scope.$watch('filterToBeAdded', function(filterName) {
	            if (filterName) {
	              scope.query.addFilter(filterName);
	              scope.filterToBeAdded = undefined;
	            }
	          });

	          scope.deactivateFilter = function(filter) {
	            var index = scope.query.getActiveFilters().indexOf(filter);

	            scope.query.deactivateFilter(filter);

	            updateFilterFocus(index);
	          };

	          function updateFilterFocus(index) {
	            var activeFilterCount = scope.query.getActiveFilters().length;

	            if (activeFilterCount == 0) {
	              scope.focusElementIndex = ADD_FILTER_SELECT_INDEX;
	            } else {
	              var filterIndex = (index < activeFilterCount) ? index : activeFilterCount - 1;
	              var filter = scope.query.getActiveFilters()[filterIndex];

	              scope.focusElementIndex = scope.query.filters.indexOf(filter);
	            }

	            $timeout(function() {
	              scope.$broadcast('updateFocus');
	            });
	          }
	        }
	      };
	    }
	  };
	};


/***/ },
/* 194 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {

	  return {
	    restrict: 'EA',

	    compile: function(tElement) {
	      return {
	        pre: function(scope) {
	          scope.showQueryOptions = false;

	          function querySwitched(currentProperties, formerProperties) {
	            if (formerProperties === undefined) {
	              return true;
	            } else {
	              return formerProperties.id !== currentProperties.id;
	            }
	          }

	          function queryPropertiesChanged(currentProperties, formerProperties) {
	            if (formerProperties === undefined) return false;

	            var groupByChanged = currentProperties.groupBy !== formerProperties.groupBy;
	            var sortElementsChanged = JSON.stringify(currentProperties.sortElements) !== JSON.stringify(formerProperties.sortElements);

	            return groupByChanged || sortElementsChanged;
	          }

	          function passiveQueryPropertiesChanged(currentProperties, formerProperties) {
	            if (formerProperties === undefined) return false;

	            var columnsChanged = JSON.stringify(currentProperties.columns) !== JSON.stringify(formerProperties.columns);
	            var displaySumsChanged = currentProperties.displaySums !== formerProperties.displaySums;

	            return columnsChanged || displaySumsChanged;
	          }

	          function observedQueryProperties() {
	            var query = scope.query;

	            if (query !== undefined) {
	              /* Oberve a few properties to avoid a full deep watch,
	                 filters are being watched within their own directive scope */
	              return {
	                id: query.id,
	                groupBy: query.groupBy,
	                sortElements: query.sortation.sortElements
	              };
	            }
	          }

	          function passiveQueryProperties() {
	            var query = scope.query;

	            if (query !== undefined) {
	              return {
	                columns: query.columns,
	                displaySums: query.displaySums
	              };
	            }
	          }

	          scope.$watch(observedQueryProperties, function(newProperties, oldProperties) {
	            if (!querySwitched(newProperties, oldProperties)) {
	              if (queryPropertiesChanged(newProperties, oldProperties)) {
	                scope.$emit('queryStateChange');
	                scope.$emit('workPackagesRefreshRequired');
	              }
	            }
	          }, true);

	          scope.$watch(passiveQueryProperties, function(newProperties, oldProperties) {
	            if (passiveQueryPropertiesChanged(newProperties, oldProperties)) {
	              scope.$emit('queryStateChange');
	            }
	          }, true);
	        }
	      };
	    }
	  };
	};


/***/ },
/* 195 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n){

	  return {
	    restrict: 'A',
	    templateUrl: '/templates/work_packages/sort_header.html',
	    scope: {
	      query: '=',
	      headerName: '=',
	      headerTitle: '=',
	      sortable: '=',
	      locale: '='
	    },
	    link: function(scope, element) {
	      scope.$watch('query.sortation.sortElements', function(sortElements){
	        var latestSortElement = sortElements[0];

	        if (scope.headerName !== latestSortElement.field) {
	          scope.currentSortDirection = null;
	        } else {
	          scope.currentSortDirection = latestSortElement.direction;
	        }

	        setFullTitle();
	      }, true);

	      function setFullTitle() {
	        if(!scope.sortable) scope.fullTitle = '';

	        if(scope.currentSortDirection) {
	          var sortDirectionText = (scope.currentSortDirection == 'asc') ? I18n.t('js.label_ascending') : I18n.t('js.label_descending');
	          scope.fullTitle = sortDirectionText + " " + I18n.t('js.label_sorted_by') + ' \"' + scope.headerTitle + '\"';
	        } else {
	          scope.fullTitle = I18n.t('js.label_open_menu');
	        }
	      }

	      // active-column class setting

	      function setActiveColumnClass() {
	        element.toggleClass('active-column', !!scope.currentSortDirection);
	      }
	      scope.$watch('currentSortDirection', setActiveColumnClass);

	    }
	  };
	};


/***/ },
/* 196 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(PathHelper, WorkPackagesHelper, UserService){
	  return {
	    restrict: 'EA',
	    replace: true,
	    scope: {
	      workPackage: '=',
	      column: '=',
	      displayType: '@',
	      displayEmpty: '@'
	    },
	    templateUrl: '/templates/work_packages/work_package_column.html',
	    link: function(scope, element, attributes) {
	      scope.displayType = scope.displayType || 'text';

	      // Set text to be displayed
	      scope.$watch(dataAvailable, setColumnData);

	      // Check if the data is available on the work package

	      function dataAvailable() {
	        if (!scope.workPackage) return false;

	        if (scope.column.custom_field) {
	          return customValueAvailable();
	        } else {
	          return scope.workPackage.hasOwnProperty(scope.column.name);
	        }
	      }

	      function customValueAvailable() {
	        var customFieldId = scope.column.custom_field.id;

	        return scope.workPackage.custom_values &&
	          scope.workPackage.custom_values.filter(function(customValue){
	            return customValue && customValue.custom_field_id === customFieldId;
	          }).length;
	      }

	      // Write column data to the scope

	      function setColumnData() {
	        setDisplayText(getFormattedColumnValue());

	        if (scope.column.meta_data.link.display) {
	          displayDataAsLink(WorkPackagesHelper.getColumnDataId(scope.workPackage, scope.column));
	        } else {
	          setCustomDisplayType();
	        }
	      }

	      function getFormattedColumnValue() {
	        // retrieve column value from work package
	        if (scope.column.custom_field) {
	          var custom_field = scope.column.custom_field;
	          return WorkPackagesHelper.getFormattedCustomValue(scope.workPackage, custom_field);
	        } else {
	          return WorkPackagesHelper.getFormattedColumnData(scope.workPackage, scope.column);
	        }
	      }

	      /**
	       * @name setDisplayText
	       * @function
	       *
	       * @description
	       * Sets scope.displayText to the passed value or applies a default
	       *
	       * @param {String|Number} value The value for scope.displayText
	       *
	       * @returns null
	       */
	      function setDisplayText(value) {
	        if (typeof value == 'number' || value){
	          scope.displayText = value;
	        } else {
	          scope.displayText = scope.displayEmpty || '';
	        }
	      }

	      function setCustomDisplayType() {
	        if (scope.column.name === 'done_ratio') scope.displayType = 'progress_bar';
	        // ...
	      }

	      function displayDataAsLink(id) {
	        // Example of how we can look to the provided meta data to format the column
	        // This relies on the meta being sent from the server
	        scope.displayType = 'link';
	        scope.url = getLinkFor(id, scope.column.meta_data.link);
	      }

	      function getLinkFor(id, link_meta){
	        switch (link_meta.model_type) {
	          case 'work_package':
	            return PathHelper.workPackagePath(id);
	          case 'user':
	            if (scope.workPackage[scope.column.name] && scope.workPackage[scope.column.name].type == 'Group') {
	              // if it's a group, we have nothing to link to
	              scope.displayType = 'text';
	              return '';
	            } else {
	              return PathHelper.staticUserPath(id);
	            }
	          case 'version':
	            return PathHelper.staticVersionPath(id);
	          case 'project':
	            return PathHelper.staticProjectPath(id);
	          default:
	            return '';
	        }
	      }

	    }
	  };
	};


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WorkPackageFieldService, EditableFieldsState) {

	  function workPackageFieldDirectiveController($scope) {
	    this.state = EditableFieldsState;

	    this.isEditable = function() {
	      return WorkPackageFieldService.isEditable(EditableFieldsState.workPackage, this.field);
	    };

	    this.isEmpty = function() {
	      return WorkPackageFieldService.isEmpty(EditableFieldsState.workPackage, this.field);
	    };

	    this.getLabel = function() {
	      return WorkPackageFieldService.getLabel(EditableFieldsState.workPackage, this.field);
	    };

	    this.updateWriteValue = function() {
	      this.writeValue = _.cloneDeep(WorkPackageFieldService.getValue(
	        EditableFieldsState.workPackage,
	        this.field
	      ));
	    };

	    if (this.isEditable()) {
	      this.state.isBusy = false;
	      this.isEditing = this.state.forcedEditState;
	      this.updateWriteValue();
	      this.editTitle = I18n.t('js.inplace.button_edit', { attribute: this.getLabel() });
	    }
	  }

	  return {
	    restrict: 'E',
	    replace: true,
	    controllerAs: 'fieldController',
	    bindToController: true,
	    templateUrl: '/templates/work_packages/field.html',
	    scope: {
	      field: '='
	    },
	    controller: workPackageFieldDirectiveController
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 198 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(PERMITTED_MORE_MENU_ACTIONS,
	           $state,
	           $window,
	           $location,
	           I18n,
	           HookService,
	           WorkPackageService,
	           WorkPackageAuthorization,
	           PathHelper) {

	  function getPermittedActions(authorization, permittedMoreMenuActions) {
	    var permittedActions = authorization.permittedActions(permittedMoreMenuActions);
	    var augmentedActions = { };

	    angular.forEach(permittedActions, function(value, key) {
	      var css = ["icon-" + key];

	      this[key] = { link: value, css: css };
	    }, augmentedActions);

	    return augmentedActions;
	  }

	  function getPermittedPluginActions(authorization) {
	    var pluginActions = HookService.call('workPackageDetailsMoreMenu').reduce(function(previousValue, currentValue) {
	                          return angular.extend(previousValue, currentValue);
	                        }, { });

	    var permittedPluginActions = authorization.permittedActions(Object.keys(pluginActions));
	    var augmentedPluginActions = { };

	    angular.forEach(permittedPluginActions, function(value, key) {
	      var css = [].concat(pluginActions[key]);

	      if (css.length == 0) {
	        css = ["icon-" + key];
	      }

	      this[key] = { link: value, css: css };
	    }, augmentedPluginActions);

	    return augmentedPluginActions;
	  }

	  return {
	    restrict: 'E',
	    templateUrl: '/templates/work_packages/work_package_details_toolbar.html',
	    scope: {
	      workPackage: '='
	    },
	    link: function(scope, element, attributes) {
	      var authorization = new WorkPackageAuthorization(scope.workPackage);

	      scope.I18n = I18n;
	      scope.permittedActions = angular.extend(getPermittedActions(authorization, PERMITTED_MORE_MENU_ACTIONS),
	                                              getPermittedPluginActions(authorization));
	      scope.actionsAvailable = Object.keys(scope.permittedActions).length > 0;

	      scope.editWorkPackage = function() {
	        var editWorkPackagePath = PathHelper.staticEditWorkPackagePath(scope.workPackage.props.id);
	        var backUrl = '?back_url=' + encodeURIComponent($location.url());

	        // TODO: Temporarily going to the old edit dialog until we get in-place editing done
	        window.location = editWorkPackagePath + backUrl;
	      };

	      scope.triggerMoreMenuAction = function(action, link) {
	        switch (action) {
	          case 'delete':
	            deleteSelectedWorkPackage();
	            break;
	          default:
	            $window.location.href = link;
	            break;
	        }
	      };

	      function deleteSelectedWorkPackage() {
	        var promise = WorkPackageService.performBulkDelete([scope.workPackage.props.id], true);

	        promise.success(function(data, status) {
	          $state.go('work-packages.list');
	        });
	      }
	    }
	  };
	};


/***/ },
/* 199 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($compile){
	  return {
	    restrict: 'EA',
	    scope: {
	      htmlElement: '=',
	      workPackage: '='
	    },
	    link: function(scope, element, attributes) {
	      var html = '<' + scope.htmlElement + '></' + scope.htmlElement +'>';

	      element.html(html);
	      $compile(element.contents())(scope);
	    }
	  };
	};


/***/ },
/* 200 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {

	  return {
	    restrict: 'A',
	    compile: function(tElement) {
	      return {
	        pre: function(scope, iElement, iAttrs, controller) {
	          scope.currentGroup = scope.row.groupName;

	          pushGroup(scope.currentGroup);

	          scope.toggleAllGroups = function() {
	            var targetExpansion = !scope.groupExpanded[scope.currentGroup];

	            angular.forEach(scope.groupExpanded, function(currentExpansion, group) {
	              scope.groupExpanded[group] = targetExpansion;
	            });
	          };

	          scope.toggleCurrentGroup = function() {
	            scope.groupExpanded[scope.currentGroup] = !scope.groupExpanded[scope.currentGroup];
	          };

	          function pushGroup(group) {
	            if (scope.groupExpanded[group] === undefined) {
	              scope.groupExpanded[group] = true;
	            }
	          }
	        }
	      };
	    }
	  };
	};


/***/ },
/* 201 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {

	  return {
	    restrict: 'A',
	    scope: true,
	    compile: function(tElement) {
	      return {
	        pre: function(scope, iElement, iAttrs, controller) {
	          scope.currentGroup = scope.row.groupName;

	          function setSums() {
	            if(scope.groupSums == null) return;
	            scope.sums = scope.groupSums.map(function(groupSum){
	              return groupSum[scope.currentGroup];
	            });
	          }

	          scope.$watch('groupSums.length', function(newVal, oldVal) {
	            if(newVal != oldVal) {
	              // map columns to sums if the column data is a number
	              setSums();
	            }
	          });
	        }
	      };
	    }
	  };
	};


/***/ },
/* 202 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, WorkPackagesTableService){

	  function setCheckboxTitle(scope) {
	    var checkboxTitleLocale = I18n.t('js.description_select_work_package');
	    scope.checkboxTitle = checkboxTitleLocale + '#' + scope.workPackage.id;
	  }

	  var parentWorkPackageLabel = I18n.t('js.description_subwork_package') + ' ' + I18n.t('js.label_work_package') + ' ';
	  function setHiddenWorkPackageLabel(scope) {
	    scope.parentWorkPackageHiddenText = parentWorkPackageLabel + '"' + scope.row.parent.object.subject + '"';
	  }

	  return {
	    restrict: 'A',
	    link: function(scope) {
	      scope.workPackage = scope.row.object;
	      setCheckboxTitle(scope);
	      if (scope.row.parent) setHiddenWorkPackageLabel(scope);

	      scope.$watch('row.checked', function(checked, formerState) {
	        if (checked !== formerState) {
	          WorkPackagesTableService.setAllRowsChecked(scope.rows, scope.row, checked);
	        }
	      });
	    }
	  };
	};


/***/ },
/* 203 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WorkPackageService) {

	  return {
	    restrict: 'A',
	    scope: true,
	    link: function(scope) {
	      function fetchTotalSums() {
	        scope.fetchTotalSums = WorkPackageService.getWorkPackagesSums(scope.projectIdentifier, scope.query, scope.columns)
	          .then(function(data){
	            angular.forEach(scope.columns, function(column, i){
	              column.total_sum = data.column_sums[i];
	            });
	          });

	        return scope.fetchTotalSums;
	      }

	      function totalSumsFetched() {
	        return scope.columns.every(function(column) {
	          return column.hasOwnProperty('total_sum');
	        });
	      }

	      if (!totalSumsFetched()) fetchTotalSums();

	      function columnNames() {
	        return scope.columns.map(function(column) {
	          return column.name;
	        });
	      }

	      scope.$watch(columnNames, function(columnNames, formerNames) {
	        if (!angular.equals(columnNames, formerNames) && !totalSumsFetched()) {
	          fetchTotalSums();
	          scope.$emit('queryStateChange');
	        }
	      }, true);
	    }
	  };
	};


/***/ },
/* 204 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, WorkPackagesTableService, $window, $timeout, flags, PathHelper){

	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/work_packages/work_packages_table.html',
	    scope: {
	      projectIdentifier: '=',
	      columns: '=',
	      rows: '=',
	      query: '=',
	      countByGroup: '=',
	      groupBy: '=',
	      groupByColumn: '=',
	      displaySums: '=',
	      totalSums: '=',
	      groupSums: '=',
	      activationCallback: '&'
	    },
	    link: function(scope, element, attributes) {
	      var activeSelectionBorderIndex;

	      scope.I18n = I18n;
	      scope.workPackagesTableData = WorkPackagesTableService.getWorkPackagesTableData();
	      scope.workPackagePath = PathHelper.staticWorkPackagePath;

	      var topMenuHeight = angular.element('#top-menu').prop('offsetHeight') || 0;
	      scope.adaptVerticalPosition = function(event) {
	        event.pageY -= topMenuHeight;
	      };

	      // groupings
	      scope.grouped = scope.groupByColumn !== undefined;
	      scope.groupExpanded = {};

	      scope.$watch('workPackagesTableData.allRowsChecked', function(checked) {
	        scope.toggleRowsLabel = checked ? I18n.t('js.button_uncheck_all') : I18n.t('js.button_check_all');
	      });

	      scope.$watchCollection('columns', function() {
	        // force Browser rerender
	        element.hide().show(0);

	        angular.element($window).trigger('resize');
	      });
	      scope.$watchCollection('rows', function() {
	        // force Browser rerender
	        element.hide().show(0);

	        angular.element($window).trigger('resize');
	      });

	      scope.setCheckedStateForAllRows = function(state) {
	        WorkPackagesTableService.setCheckedStateForAllRows(scope.rows, state);
	      };

	      var groupableColumns = WorkPackagesTableService.getGroupableColumns();
	      scope.$watch('query.groupBy', function(groupBy) {
	        if (scope.columns) {
	          var groupByColumnIndex = groupableColumns.map(function(column){
	            return column.name;
	          }).indexOf(groupBy);

	          scope.groupByColumn = groupableColumns[groupByColumnIndex];
	        }
	      });

	      scope.$watch(function() {
	        return flags.isOn('detailsView');
	      }, function(detailsEnabled) {
	        scope.hideWorkPackageDetails = !detailsEnabled;
	      });

	      // Thanks to http://stackoverflow.com/a/880518
	      function clearSelection() {
	        if(document.selection && document.selection.empty) {
	          document.selection.empty();
	        } else if(window.getSelection) {
	          var sel = window.getSelection();
	          sel.removeAllRanges();
	        }
	      }

	      function setRowSelectionState(row, selected) {
	        activeSelectionBorderIndex = scope.rows.indexOf(row);
	        WorkPackagesTableService.setRowSelection(row, selected);
	      }

	      function mulipleRowsChecked(){
	        var counter = 0;
	        for (var i = 0, l = scope.rows.length; i<l; i++) {
	          if (scope.rows[i].checked) {
	            if (++counter === 2) {
	              return true;
	            }
	          }
	        }
	        return false;
	      }

	      scope.selectWorkPackage = function(row, $event) {
	        if ($event.target.type != 'checkbox') {
	          var currentRowCheckState = row.checked;
	          var multipleChecked = mulipleRowsChecked();
	          var isLink = angular.element($event.target).is('a');

	          if (!($event.ctrlKey || $event.shiftKey)) {
	            scope.setCheckedStateForAllRows(false);
	          }

	          if(isLink) {
	            return;
	          }

	          if ($event.shiftKey) {
	            clearSelection();
	            activeSelectionBorderIndex = WorkPackagesTableService.selectRowRange(scope.rows, row, activeSelectionBorderIndex);
	          } else if($event.ctrlKey){
	            setRowSelectionState(row, multipleChecked ? true : !currentRowCheckState);
	          } else {
	            setRowSelectionState(row, multipleChecked ? true : !currentRowCheckState);

	            scope.activationCallback({ id: row.object.id, force: false });
	          }
	        }
	      };

	      scope.showWorkPackageDetails = function(row) {
	        clearSelection();

	        scope.setCheckedStateForAllRows(false);

	        setRowSelectionState(row, true);

	        scope.activationCallback({ id: row.object.id, force: true });
	      };
	    }
	  };
	};


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	  workPackageAttachmentsService,
	  NotificationsService,
	  I18n,
	  ConfigurationService,
	  ConversionService
	) {
	  'use strict';
	  var editMode = function(attrs) {
	    return typeof attrs.edit !== 'undefined';
	  };

	  var attachmentsController = function(scope, element, attrs) {
	    scope.files = [];

	    var workPackage = scope.workPackage(),
	        upload = function(event, workPackage) {
	          if (angular.isUndefined(scope.files)) {
	            return;
	          }
	          if (scope.files.length > 0) {
	            workPackageAttachmentsService.upload(workPackage, scope.files).then(function() {
	              scope.files = [];
	              loadAttachments();
	            });
	          }
	        },
	        loadAttachments = function() {
	          if (!editMode(attrs)) {
	            return;
	          }
	          scope.loading = true;
	          workPackageAttachmentsService.load(workPackage, true).then(function(attachments) {
	            scope.attachments = attachments;
	          }).finally(function() {
	            scope.loading = false;
	          });
	        };

	    scope.I18n = I18n;
	    scope.rejectedFiles = [];
	    scope.size = ConversionService.fileSize;

	    scope.instantUpload = function() {
	      scope.$emit('uploadPendingAttachments', workPackage);
	    };

	    var currentlyRemoving = [];
	    scope.remove = function(file) {
	      currentlyRemoving.push(file);
	      workPackageAttachmentsService.remove(file).then(function(file) {
	        _.remove(scope.attachments, file);
	        _.remove(scope.files, file);
	      }).finally(function() {
	        _.remove(currentlyRemoving, file);
	      });
	    };

	    scope.deleting = function(attachment) {
	      return _.findIndex(currentlyRemoving, attachment) > -1;
	    };

	    var currentlyFocusing = null;

	    scope.focus = function(attachment) {
	      currentlyFocusing = attachment;
	    };

	    scope.focussing = function(attachment) {
	      return currentlyFocusing === attachment;
	    };

	    scope.$on('uploadPendingAttachments', upload);
	    scope.$watch('rejectedFiles', function(rejectedFiles) {
	      if (rejectedFiles.length === 0) {
	        return;
	      }
	      var errors = _.map(rejectedFiles, function(file) {
	            return file.name + ' (' + scope.size(file.size) + ')';
	          }),
	          message = I18n.t('js.label_rejected_files_reason',
	            { maximumFilesize: scope.size(scope.maximumFileSize) }
	          );
	      NotificationsService.addError(message, errors);
	    });

	    scope.fetchingConfiguration = true;
	    ConfigurationService.api().then(function(settings) {
	      scope.maximumFileSize = settings.maximumAttachmentFileSize;
	      // somehow, I18n cannot interpolate function results, so we need to cache this once
	      scope.maxFileSize = scope.size(settings.maximumAttachmentFileSize);
	      scope.fetchingConfiguration = false;
	    });

	    loadAttachments();
	  };

	  return {
	    restrict: 'E',
	    replace: true,
	    reqire: '^workPackageField',
	    scope: {
	      workPackage: '&'
	    },
	    templateUrl: function(element, attrs) {
	      if (editMode(attrs)) {
	        return '/templates/work_packages/attachments-edit.html';
	      }
	      return '/templates/work_packages/attachments.html';
	    },
	    link: attachmentsController
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 206 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n) {
	  'use strict';

	  var workPackageWatcherController = function(scope) {
	    scope.remove = function() {
	      scope.deleting = true;
	      scope.$emit('watchers.remove', scope.watcher);
	    };

	    scope.I18n = I18n;

	    var focused = false;
	    scope.focus = function() {
	      focused = true;
	    };

	    scope.blur = function() {
	      focused = false;
	    };

	    scope.focussing = function() {
	      return focused;
	    };
	  };

	  return {
	    replace: true,
	    templateUrl: '/templates/work_packages/watchers/watcher.html',
	    link: workPackageWatcherController,
	    scope: {
	      watcher: '='
	    }
	  };
	};


/***/ },
/* 207 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	    I18n,
	    FocusHelper
	  ) {
	  'use strict';

	  var workPackageWatchersLookupController = function(scope) {
	    scope.locked = false;
	    scope.editMode = false;
	    scope.I18n = I18n;

	    // we need an object for ui.select to work properly
	    scope.selection = {
	      watcher: null
	    };

	    scope.changeEditMode = function() {
	      scope.editMode = !scope.editMode;
	    };

	    scope.intoEditMode = function() {
	      scope.changeEditMode();
	      FocusHelper.focusUiSelect(angular.element('.work-package--watchers-lookup'));
	    };

	    scope.addWatcher = function() {
	      if (!scope.selection.watcher) {
	        return;
	      }

	      scope.locked = !scope.locked;

	      // we pass up the original up the scope chain,
	      // _not_ the wrapper object
	      scope.$emit('watchers.add', scope.selection.watcher);
	    };

	    scope.$on('watchers.add.finished', function() {
	      scope.locked = !scope.locked;

	      // to clear the input of the directive
	      scope.selection.watcher = null;

	      if (scope.watchers.length ===  0) {
	        // this will set the editMode back, once no more watchers can be added
	        scope.editMode = false;
	      }
	      else {
	        FocusHelper.focusUiSelect(angular.element('.work-package--watchers-lookup'));
	      }
	    });
	  };

	  return {
	    replace: true,
	    restrict: 'E',
	    templateUrl: '/templates/work_packages/watchers/lookup.html',
	    link: workPackageWatchersLookupController,
	    scope: {
	      watchers: '='
	    }
	  };
	};


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.directives')
	  .directive('inplaceEditorMainPane', __webpack_require__(209))
	  .directive('inplaceEditorDisplayPane', __webpack_require__(210))
	  .directive('inplaceEditorEditPane', __webpack_require__(211));


/***/ },
/* 209 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/main_pane.html',
	    controller: function($scope, $timeout) {
	      // controller is invoked before linker
	      $timeout(function() {
	        var fieldController = $scope.fieldController;
	        this.saveTitle = I18n.t(
	          'js.inplace.button_save',
	          { attribute: fieldController.field }
	        );
	        this.saveAndSendTitle = I18n.t(
	          'js.inplace.button_save_and_send',
	          { attribute: fieldController.field }
	        );
	        this.cancelTitle = I18n.t(
	          'js.inplace.button_cancel',
	          { attribute: fieldController.field }
	        );
	      });
	    },
	    controllerAs: 'mainPaneController',
	    link: function(scope, element, attrs, fieldController) {
	      scope.fieldController = fieldController;
	    }
	  };
	};


/***/ },
/* 210 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	  WorkPackageFieldService,
	  EditableFieldsState,
	  $timeout,
	  HookService,
	  I18n) {
	  return {
	    replace: true,
	    transclude: true,
	    scope: {},
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/display_pane.html',
	    controller: function($scope) {

	      this.placeholder = WorkPackageFieldService.defaultPlaceholder;

	      this.startEditing = function() {
	        var fieldController = $scope.fieldController;
	        fieldController.isEditing = true;
	      };

	      this.isReadValueEmpty = function() {
	        return WorkPackageFieldService.isEmpty(
	          EditableFieldsState.workPackage,
	          $scope.fieldController.field
	        );
	      };

	      this.getReadValue = function() {
	        return WorkPackageFieldService.format(
	          EditableFieldsState.workPackage,
	          $scope.fieldController.field
	        );
	      };

	      // for dynamic type that is set by plugins
	      // refactor to a service method the whole extraction
	      this.getDynamicDirectiveName = function() {
	        return HookService.call('workPackageOverviewAttributes', {
	          type: EditableFieldsState.workPackage.schema.props[$scope.fieldController.field].type,
	          field: $scope.fieldController.field,
	          workPackage: EditableFieldsState.workPackage
	        })[0];
	      };

	      // expose work package to the dynamic directive
	      this.getWorkPackage = function() {
	        return EditableFieldsState.workPackage;
	      };
	    },
	    controllerAs: 'displayPaneController',
	    link: function(scope, element, attrs, fieldController) {
	      scope.fieldController = fieldController;
	      scope.displayPaneController.field = scope.fieldController.field;
	      scope.editableFieldsState = EditableFieldsState;

	      scope.$watchCollection('editableFieldsState.workPackage.form', function() {
	        var strategy = WorkPackageFieldService.getInplaceDisplayStrategy(
	          EditableFieldsState.workPackage,
	          fieldController.field
	        );
	        if (strategy !== scope.displayStrategy) {
	          scope.displayStrategy = strategy;
	          scope.templateUrl = '/templates/components/inplace_editor/display/' + strategy +'.html';
	        }
	      });

	      // TODO: extract this when more placeholders come
	      if (fieldController.field === 'description') {
	        scope.displayPaneController.placeholder = I18n.t('js.label_click_to_enter_description');
	      }

	      scope.$watch('editableFieldsState.errors', function(errors) {
	        if (errors) {
	          if (errors[scope.fieldController.field]) {
	            scope.displayPaneController.startEditing();
	          }
	        }
	      }, true);

	      scope.$watch('fieldController.isEditing', function(isEditing, oldIsEditing) {
	        if (!isEditing) {
	          $timeout(function() {
	            if (oldIsEditing) {
	              // check old value to not trigger focus on the first time
	              element.find('.inplace-editing--trigger-link').focus();
	            }
	            element.find('.inplace-edit--read-value a').off('click').on('click', function(e) {
	              e.stopPropagation();
	            });
	          });
	        }
	      });
	    }
	  };
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	  WorkPackageFieldService,
	  EditableFieldsState,
	  FocusHelper,
	  $timeout,
	  ApiHelper,
	  $rootScope,
	  NotificationsService,
	  I18n) {
	  'use strict';

	  var showErrors = function() {
	    var errors  = EditableFieldsState.errors;
	    if (_.isEmpty(_.keys(errors))) {
	      return;
	    }
	    var errorMessages = _.flatten(_.map(errors), true);
	    NotificationsService.addError(I18n.t('js.label_validation_error'), errorMessages);
	  };

	  return {
	    transclude: true,
	    replace: true,
	    scope: true,
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/edit_pane.html',
	    controllerAs: 'editPaneController',
	    controller: function($scope, WorkPackageService) {
	      var vm = this;

	      // go full retard
	      var uploadPendingAttachments = function(wp) {
	        $rootScope.$broadcast('uploadPendingAttachments', wp);
	      };

	      this.submit = function(notify) {
	        var fieldController = $scope.fieldController;
	        var pendingFormChanges = getPendingFormChanges();
	        var detectedViolations = [];
	        pendingFormChanges[fieldController.field] = fieldController.writeValue;
	        if (vm.editForm.$invalid) {
	          var acknowledgedValidationErrors = Object.keys(vm.editForm.$error);
	          acknowledgedValidationErrors.forEach(function(error) {
	            if (vm.editForm.$error[error]) {
	              detectedViolations.push(I18n.t('js.inplace.errors.' + error, {
	                field: fieldController.getLabel()
	              }));
	            }
	          });
	        }
	        if (detectedViolations.length) {
	          EditableFieldsState.errors = EditableFieldsState.errors || {};
	          EditableFieldsState.errors[fieldController.field] = detectedViolations.join(' ');
	          showErrors();
	        } else {
	          fieldController.state.isBusy = true;
	          WorkPackageService.loadWorkPackageForm(EditableFieldsState.workPackage).then(
	            function(form) {
	              EditableFieldsState.workPackage.form = form;
	              if (_.isEmpty(form.embedded.validationErrors.props)) {
	                var result = WorkPackageService.updateWorkPackage(
	                  EditableFieldsState.workPackage,
	                  notify
	                );
	                result.then(angular.bind(this, function(updatedWorkPackage) {
	                  $scope.$emit('workPackageUpdatedInEditor', updatedWorkPackage);
	                  $scope.$emit(
	                    'workPackageRefreshRequired',
	                    function() {
	                      fieldController.state.isBusy = false;
	                      fieldController.isEditing = false;
	                      fieldController.updateWriteValue();
	                      EditableFieldsState.errors = null;
	                    }
	                  );
	                  uploadPendingAttachments(updatedWorkPackage);
	                })).catch(setFailure);
	              } else {
	                afterError();
	                EditableFieldsState.errors = {};
	                 _.forEach(form.embedded.validationErrors.props, function(error, field) {
	                  if(field === 'startDate' || field === 'dueDate') {
	                    EditableFieldsState.errors['date'] = error.message;
	                  } else {
	                    EditableFieldsState.errors[field] = error.message;
	                  }
	                });
	              }
	            }).catch(setFailure);
	        }

	      };

	      this.discardEditing = function() {
	        $scope.fieldController.isEditing = false;
	        delete getPendingFormChanges()[$scope.fieldController.field];
	        $scope.fieldController.updateWriteValue();
	        if (
	          EditableFieldsState.errors &&
	          EditableFieldsState.errors.hasOwnProperty($scope.fieldController.field)
	        ) {
	          delete EditableFieldsState.errors[$scope.fieldController.field];
	        }
	      };

	      this.isActive = function() {
	        if (EditableFieldsState.forcedEditState) {
	          return false;
	        }
	        return $scope.fieldController.field === EditableFieldsState.activeField;
	      };

	      this.markActive = function() {
	        EditableFieldsState.activeField = $scope.fieldController.field;
	      };

	      this.getPendingFormChanges = getPendingFormChanges;

	      function getPendingFormChanges() {
	        var form = EditableFieldsState.workPackage.form;
	        form.pendingChanges = form.pendingChanges || angular.copy(form.embedded.payload.props);
	        return form.pendingChanges;
	      }

	      function afterError() {
	        $scope.fieldController.state.isBusy = false;
	        $scope.focusInput();
	      }
	      function setFailure(e) {
	        afterError();
	        EditableFieldsState.errors = {
	          '_common': ApiHelper.getErrorMessages(e)
	        };
	        showErrors();
	      }
	    },
	    link: function(scope, element, attrs, fieldController) {
	      scope.fieldController = fieldController;
	      scope.editableFieldsState = EditableFieldsState;

	      scope.editPaneController.isRequired = WorkPackageFieldService.isRequired(
	        EditableFieldsState.workPackage,
	        fieldController.field
	      );

	      scope.$watchCollection('editableFieldsState.workPackage.form', function(form) {
	        var strategy = WorkPackageFieldService.getInplaceEditStrategy(
	          EditableFieldsState.workPackage,
	          fieldController.field
	        );

	        if (fieldController.field === 'date' && strategy === 'date') {
	          form.pendingChanges = scope.editPaneController.getPendingFormChanges();
	          form.pendingChanges['startDate'] =
	          form.pendingChanges['dueDate'] =
	          fieldController.writeValue ? fieldController.writeValue['dueDate'] : null;
	        }

	        if (strategy !== scope.strategy) {
	          scope.strategy = strategy;
	          scope.templateUrl = '/templates/components/inplace_editor/editable/' +
	            scope.strategy + '.html';
	          fieldController.updateWriteValue();
	        }
	      });

	      scope.focusInput = function() {
	        $timeout(function() {
	          var inputElement = element.find('.focus-input');
	          FocusHelper.focus(inputElement);
	          inputElement.triggerHandler('keyup');
	          scope.editPaneController.markActive();
	          inputElement.off('focus.inplace').on('focus.inplace', function() {
	            // ♥♥♥ angular ♥♥♥
	            scope.$apply(function() {
	              scope.editPaneController.markActive();
	            });
	          });
	        });
	      };

	      if (!EditableFieldsState.forcedEditState) {
	        element.bind('keydown keypress', function(e) {
	          if (e.keyCode === 27) {
	            scope.$apply(function() {
	              scope.editPaneController.discardEditing();
	            });
	          }
	        });
	      }

	      scope.$watch('fieldController.writeValue', function(writeValue) {
	        if (scope.fieldController.isEditing) {
	          var pendingChanges = scope
	            .editPaneController
	            .getPendingFormChanges();
	          pendingChanges[scope.fieldController.field] = writeValue;
	        }
	      }, true);
	      scope.$on('workPackageRefreshed', function() {
	        scope.editPaneController.discardEditing();
	      });

	      scope.$watch('fieldController.isEditing', function(isEditing) {
	        if (isEditing && !EditableFieldsState.forcedEditState) {
	          scope.focusInput();
	        }
	      });
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.directives')
	  .directive('inplaceDisplayUser', __webpack_require__(213))
	  .directive('inplaceDisplaySpentTime', __webpack_require__(214))
	  .directive('inplaceDisplayVersion', __webpack_require__(215));


/***/ },
/* 213 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(PathHelper) {
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^inplaceEditorDisplayPane',
	    templateUrl: '/templates/work_packages/inplace_editor/custom/display/user.html',
	    controller: function($scope) {
	      this.userPath = PathHelper.staticUserPath;
	      this.getUser = function() {
	        return $scope.inplaceEditorDisplayPane.getReadValue();
	      };
	      this.getUserName = function() {
	        var user = this.getUser();
	        if (user && user.props && (user.props.firstName || user.props.lastName)) {
	          return user.props.firstName + ' ' + user.props.lastName;
	        }
	        return null;
	      };
	    },
	    controllerAs: 'customEditorController',
	    link: function(scope, element, attrs, inplaceEditorDisplayPane) {
	      scope.inplaceEditorDisplayPane = inplaceEditorDisplayPane;
	    }
	  };
	};


/***/ },
/* 214 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(EditableFieldsState) {
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: ['^inplaceEditorDisplayPane', '^workPackageField'],
	    templateUrl: '/templates/work_packages/inplace_editor/custom/display/spent_time.html',
	    controller: function() {
	      this.isLinkViewable = function() {
	        return EditableFieldsState.workPackage.links.timeEntries;
	      };

	      this.getPath = function() {
	        return EditableFieldsState.workPackage.links.timeEntries.href;
	      };
	    },
	    controllerAs: 'customEditorController',
	    link: function(scope, element, attrs, controllers) {
	      scope.displayPaneController = controllers[0];
	      scope.fieldController = controllers[1];
	    }
	  };
	};


/***/ },
/* 215 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(EditableFieldsState, PathHelper, VersionService, $timeout) {
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^inplaceEditorDisplayPane',
	    templateUrl: '/templates/work_packages/inplace_editor/custom/display/version.html',
	    controller: function($scope) {
	      this.pathHelper = PathHelper;
	      this.isVersionLinkViewable = function() {
	        var version = $scope.displayPaneController.getReadValue();
	        return version.links.definingProject && version.links.definingProject.href;
	      }
	    },
	    controllerAs: 'customEditorController',
	    link: function(scope, element, attrs, displayPaneController) {
	      scope.displayPaneController = displayPaneController;
	    }
	  };
	};


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.directives')
	.directive('inplaceEditorWikiTextarea', __webpack_require__(217))
	.directive('inplaceEditorDuration', __webpack_require__(218))
	.directive('inplaceEditorDropdown', __webpack_require__(219))
	.directive('inplaceEditorDate', __webpack_require__(220))
	.directive('inplaceEditorDateRange', __webpack_require__(221));


/***/ },
/* 217 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(TextileService, EditableFieldsState, $sce, AutoCompleteHelper, $timeout) {
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/custom/editable/wiki_textarea.html',
	    controller: function($scope) {
	      this.isPreview = false;
	      this.previewHtml = '';
	      this.autocompletePath = '/work_packages/auto_complete.json';

	      this.togglePreview = function() {
	        this.isPreview = !this.isPreview;
	        this.previewHtml = '';
	        // $scope.error = null;
	        if (!this.isPreview) {
	          return;
	        }
	        $scope.fieldController.state.isBusy = true;
	        TextileService
	          .renderWithWorkPackageContext(
	          EditableFieldsState.workPackage.form,
	          $scope.fieldController.writeValue.raw)
	          .then(angular.bind(this, function(r) {
	            this.previewHtml = $sce.trustAsHtml(r.data);
	            $scope.fieldController.state.isBusy = false;
	          }), angular.bind(this, function() {
	            this.isPreview = false;
	            $scope.fieldController.state.isBusy = false;
	          }));
	      };
	    },
	    controllerAs: 'customEditorController',
	    link: function(scope, element, attrs, fieldController) {
	      scope.fieldController = fieldController;
	      $timeout(function() {
	        AutoCompleteHelper.enableTextareaAutoCompletion(element.find('textarea'));
	        // set as dirty for the script to show a confirm on leaving the page
	        element.find('textarea').data('changed', true);
	      });
	    }
	  };
	};


/***/ },
/* 218 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/custom/editable/duration.html',
	    controllerAs: 'customEditorController',
	    controller: function() {},
	    link: function(scope, element, attrs, fieldController) {
	      scope.fieldController = fieldController;
	      if (fieldController.writeValue === null) {
	        scope.customEditorController.writeValue = null;
	      } else {
	        scope.customEditorController.writeValue = Number(
	          moment
	            .duration(fieldController.writeValue)
	            .asHours()
	            .toFixed(2)
	        );
	      }
	      scope.$watch('customEditorController.writeValue', function(value) {
	        if (value === null) {
	          fieldController.writeValue = null;
	        } else {
	          // get rounded minutes so that we don't have to send 12.223000000003
	          // to the server
	          var minutes = Number(moment.duration(value, 'hours').asMinutes().toFixed(2));
	          fieldController.writeValue = moment.duration(minutes, 'minutes');
	        }
	      });
	    }
	  };
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	    WorkPackageFieldService,
	    WorkPackageFieldConfigurationService,
	    EditableFieldsState,
	    I18n,
	    $timeout,
	    $q,
	    FocusHelper) {
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/custom/editable/dropdown.html',
	    controller: function() {
	      this.allowedValues = [];
	      this.nullValueLabel = I18n.t('js.inplace.null_value_label');

	      this.updateAllowedValues = function(field) {
	        var customEditorController = this;

	        return $q(function(resolve) {
	          WorkPackageFieldService.getAllowedValues(
	            EditableFieldsState.workPackage,
	            field
	          ).then(function(values) {

	            var sorting = WorkPackageFieldConfigurationService
	              .getDropdownSortingStrategy(field);

	            if (sorting !== null) {
	              values = _.sortBy(values, sorting);
	            }

	            if (!WorkPackageFieldService.isRequired(EditableFieldsState.workPackage,
	                                                    field)) {
	              var arrayWithEmptyOption = [{
	                href: null,
	                name: I18n.t('js.inplace.clear_value_label')
	              }];

	              values = arrayWithEmptyOption.concat(values);
	            }
	            customEditorController.allowedValues = values;

	            resolve();
	          });
	        });
	      };
	    },
	    controllerAs: 'customEditorController',
	    link: function(scope, element, attrs, fieldController) {
	      scope.fieldController = fieldController;
	      scope.fieldController.state.isBusy = true;

	      scope.customEditorController.updateAllowedValues(fieldController.field).then(function() {
	        fieldController.state.isBusy = false;

	        if (!EditableFieldsState.forcedEditState) {
	          FocusHelper.focusUiSelect(element);
	        }
	      });
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 220 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WorkPackageFieldService, EditableFieldsState, 
	                          TimezoneService, ConfigurationService, I18n, 
	                          $timeout, Datepicker) {
	  var parseISODate = TimezoneService.parseISODate,
	      customDateFormat = 'YYYY-MM-DD',
	      customFormattedDate = function(date) {
	        return parseISODate(date).format(customDateFormat);
	      };
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/custom/editable/date.html',
	    controller: function() {
	    },
	    controllerAs: 'customEditorController',
	    link: function(scope, element, attrs, fieldController) {
	      scope.fieldController = fieldController;
	      var form = element.parents('.inplace-edit--form'),
	          input = element.find('.inplace-edit--date'),
	          datepickerContainer = element.find('.inplace-edit--date-picker'),
	          datepicker;

	      scope.execute = function() {
	        form.scope().editPaneController.submit(false);
	      };

	      if(scope.fieldController.writeValue) {
	        scope.fieldController.writeValue = customFormattedDate(scope.fieldController.writeValue);
	      }

	      datepicker = new Datepicker(datepickerContainer, input, scope.fieldController.writeValue);
	      datepicker.onChange = function(date) {
	        scope.fieldController.writeValue = date;
	      };
	      scope.onEdit = function() {
	        datepicker.onEdit();
	      };
	      datepicker.onDone = function() {
	        form.scope().editPaneController.discardEditing();
	      };

	      datepicker.textbox.attr({
	        'placeholder': '-',
	        'aria-label': customDateFormat
	      });

	      scope.showDatepicker = function() {
	        datepicker.show();
	      };

	      $timeout(function() {
	        datepicker.focus();
	      });

	      angular.element('.work-packages--details-content').on('click', function(e) {
	        var target = angular.element(e.target);
	        if(!target.is('.inplace-edit--date input') && 
	            target.parents('.inplace-edit--date .hasDatepicker').length <= 0 &&
	            target.parents('.ui-datepicker-header').length <= 0) {
	          datepicker.hide();
	        }
	      });
	    }
	  };
	};


/***/ },
/* 221 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(TimezoneService, ConfigurationService,
	                          I18n, $timeout, WorkPackageFieldService,
	                          EditableFieldsState, Datepicker) {
	  return {
	    restrict: 'E',
	    transclude: true,
	    replace: true,
	    scope: {},
	    require: '^workPackageField',
	    templateUrl: '/templates/work_packages/inplace_editor/custom/editable/daterange.html',
	    controller: function() {
	    },
	    controllerAs: 'customEditorController',
	    link: function(scope, element, attrs, fieldController) {

	      var customDateFormat = 'YYYY-MM-DD';


	      function getTitle(labelName) {
	        return I18n.t('js.inplace.button_edit', {
	          attribute: WorkPackageFieldService.getLabel(
	            EditableFieldsState.workPackage,
	            labelName
	          )
	        });
	      }

	      scope.startDate = fieldController.writeValue.startDate;
	      scope.endDate = fieldController.writeValue.dueDate;
	      var form = element.parents('.inplace-edit--form'),
	          inputStart = element.find('.inplace-edit--date-range-start-date'),
	          inputEnd = element.find('.inplace-edit--date-range-end-date'),
	          divStart = element.find('.inplace-edit--date-range-start-date-picker'),
	          divEnd = element.find('.inplace-edit--date-range-end-date-picker'),
	          startDatepicker, endDatepicker;

	      scope.startDateIsChanged = scope.endDateIsChanged = false;

	      if (scope.endDate) {
	        scope.endDate = TimezoneService.formattedISODate(scope.endDate);
	      }
	      if (scope.startDate) {
	        scope.startDate = TimezoneService.formattedISODate(scope.startDate);
	      }

	      scope.execute = function() {
	        form.scope().editPaneController.submit(false);
	      };

	      startDatepicker = new Datepicker(divStart, inputStart, scope.startDate);
	      endDatepicker = new Datepicker(divEnd, inputEnd, scope.endDate);
	      startDatepicker.onChange = function(date) {
	        scope.startDate = fieldController.writeValue.startDate = date;
	        if (startDatepicker.prevDate.isAfter(endDatepicker.prevDate)) {
	          scope.startDateIsChanged = true;
	          scope.endDate = fieldController.writeValue.dueDate = scope.startDate;
	          endDatepicker.setDate(scope.endDate);
	        }
	      };
	      scope.onStartEdit = function() {
	        scope.startDateIsChanged = scope.endDateIsChanged = false;
	        startDatepicker.onEdit();
	      };
	      endDatepicker.onChange = function(date) {
	        scope.endDate = fieldController.writeValue.dueDate = date;
	        if (endDatepicker.prevDate.isBefore(startDatepicker.prevDate)) {
	          scope.endDateIsChanged = true;
	          scope.startDate = fieldController.writeValue.startDate = scope.endDate;
	          startDatepicker.setDate(scope.startDate);
	        }
	      };
	      scope.onEndEdit = function() {
	        scope.startDateIsChanged = scope.endDateIsChanged = false;
	        endDatepicker.onEdit();
	      };

	      startDatepicker.onDone = endDatepicker.onDone = function() {
	        form.scope().editPaneController.discardEditing();
	      };

	      $timeout(function() {
	        startDatepicker.focus();
	      });

	      startDatepicker.textbox.on('click focusin', function() {
	        if (divStart.is(':hidden') || divEnd.is(':visible')) {
	          endDatepicker.hide();
	          startDatepicker.show();
	        }
	        scope.startDateIsChanged = scope.endDateIsChanged = false;
	      }).attr({
	        'placeholder': customDateFormat,
	        'aria-label': customDateFormat,
	        'title': getTitle('startDate')
	      });

	      endDatepicker.textbox.on('click focusin', function() {
	        if (divEnd.is(':hidden') || divStart.is(':visible')) {
	          endDatepicker.show();
	          startDatepicker.hide();
	        }
	        scope.startDateIsChanged = scope.endDateIsChanged = false;
	      }).attr({
	        'placeholder': customDateFormat,
	        'aria-label': customDateFormat,
	        'title': getTitle('dueDate')
	      });

	      angular.element('.work-packages--details-content').on('click', function(e) {
	        var target = angular.element(e.target);
	        if (!target.is('.inplace-edit--date-range input') &&
	          target.parents('.hasDatepicker').length <= 0 &&
	          target.parents('.ui-datepicker-header').length <= 0) {
	          startDatepicker.hide();
	          endDatepicker.hide();
	        }
	      });
	    }
	  };
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.filters')

	.filter('allRowsChecked', ['WorkPackagesTableHelper', function(WorkPackagesTableHelper) {
	  return WorkPackagesTableHelper.allRowsChecked;
	}])

	/**
	 * filter
	 * @name remainingFilterNames
	 * @function
	 *
	 * @description
	 * Gets a hash of available filters and selected filters and calculates the difference.
	 * Returns the keys of those filters that haven't been selected sorted by the localised
	 * filter names.
	 *
	 * @param {Object} availableFilters The set of available filters, stored with their
	 *    filter name.
	 * @param {Array} selectedFilters An array with the selected filters.
	 *
	 * @returns {Array} An array of the filter names of those available filters that haven't
	 *    been selected, ordered by the corresponding filters localised names.
	*/
	.filter('remainingFilterNames', ['orderByFilter', 'FiltersHelper', function(orderByFilter, FiltersHelper) {

	  function subtractActiveFilters(filters, filtersToSubtract) {
	    var filterDiff = _.clone(filters);

	    angular.forEach(filtersToSubtract, function(filter) {
	      if(!filter.deactivated) delete filterDiff[filter.name];
	    });

	    return filterDiff;
	  }

	  function flattenFiltersHash(filtersHash) {
	    var flattenedHash = [];
	    angular.forEach(filtersHash, function(filterValues, filterName) {
	      flattenedHash.push(angular.extend({filterName: filterName}, filterValues));
	    });

	    return flattenedHash;
	  }

	  return function(availableFilters, selectedFilters) {
	    if(!availableFilters) return [];

	    var filters = subtractActiveFilters(availableFilters, selectedFilters);

	    return orderByFilter(flattenFiltersHash(filters), FiltersHelper.localisedFilterName).map(function(filter) {
	      return filter.filterName;
	    });
	  };
	}]);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.models')
	  .factory('WorkPackageAuthorization', __webpack_require__(224))
	  .factory('Datepicker', ['TimezoneService', 'ConfigurationService', 
	                          '$timeout', __webpack_require__(225)]);


/***/ },
/* 224 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {

	  var WorkPackageAuthorization = function (workPackage) {
	    this.workPackage = workPackage;
	  };

	  WorkPackageAuthorization.prototype = {
	    permittedActions: function(allowedActions) {
	      var permittedActions = {};
	      var workPackageActions = Object.keys(this.workPackage.links);
	      var validActions = allowedActions.filter(function(action) {
	        return workPackageActions.indexOf(action) >= 0;
	      });

	      angular.forEach(validActions, function(action) {
	        this.links[action] = this.workPackage.links[action].href;
	      }, { links: permittedActions, workPackage: this.workPackage });

	      return permittedActions;
	    }
	  };

	  return WorkPackageAuthorization;
	};


/***/ },
/* 225 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(TimezoneService, ConfigurationService, $timeout) {
	  var datepickerFormat = 'yy-mm-dd',
	    addButton = function(appendTo, text, className, callback) {
	      return jQuery('<button>', {
	          text: text
	        })
	        .addClass('ui-state-default ui-priority-primary ui-corner-all ' + className)
	        .appendTo(appendTo)
	        .on('click', callback);
	    };

	  function Datepicker(datepickerElem, textboxElem, date) {
	    this.date = date;
	    this.prevDate = TimezoneService.formattedISODate(this.date);
	    this.datepickerCont = angular.element(datepickerElem);
	    this.textbox = angular.element(textboxElem);
	    this.editTimerId = 0;
	    this.initialize();
	    this.setDate(this.date);
	  }

	  Datepicker.prototype.addDoneButton = function() {
	    var self = this;
	    setTimeout(function() {
	      var buttonPane = self.datepickerCont.find('.ui-datepicker-buttonpane');

	      if (buttonPane.find('.ui-datepicker-done').length !== 0) {
	        return;
	      }

	      addButton(buttonPane, 'Done', 'ui-datepicker-done', function(e) {
	        self.onDone();
	        e.preventDefault();
	      });
	    }, 1);
	  };

	  Datepicker.prototype.setDate = function(date) {
	    if (date) {
	      this.datepickerCont.datepicker('option', 'defaultDate', TimezoneService.formattedISODate(date));
	      this.datepickerCont.datepicker('option', 'setDate', TimezoneService.formattedISODate(date));
	      this.textbox.val(TimezoneService.formattedISODate(date));
	    } else {
	      this.datepickerCont.datepicker('option', 'defaultDate', null);
	      this.datepickerCont.datepicker('option', 'setDate', null);
	      this.textbox.val('');
	      this.textbox.change();
	    }
	  };

	  Datepicker.prototype.initialize = function() {
	    var self = this,
	        firstDayOfWeek = ConfigurationService.startOfWeekPresent() ?
	        ConfigurationService.startOfWeek() :
	        jQuery.datepicker._defaults.firstDay;
	    this.datepickerCont.datepicker({
	      firstDay: firstDayOfWeek,
	      showWeeks: true,
	      changeMonth: true,
	      dateFormat: datepickerFormat,
	      defaultDate: TimezoneService.formattedISODate(self.date),
	      inline: true,
	      showButtonPanel: true,
	      beforeShow: function() {
	        self.addDoneButton();
	      },
	      onChangeMonthYear: function() {
	        self.addDoneButton();
	      },
	      alterOffset: function(offset) {
	        var wHeight = angular.element(window).height(),
	          dpHeight = angular.element('#ui-datepicker-div').height(),
	          inputTop = self.datepickerCont.offset().top,
	          inputHeight = self.datepickerCont.innerHeight();

	        if ((inputTop + inputHeight + dpHeight) > wHeight) {
	          offset.top -= inputHeight - 4;
	        }
	        return offset;
	      },
	      onSelect: function(selectedDate) {
	        if (!selectedDate || selectedDate === self.prevDate) {
	          return;
	        }
	        self.prevDate = TimezoneService.parseISODate(selectedDate);
	        $timeout(function() {
	          self.onChange(TimezoneService.formattedISODate(self.prevDate));
	        });
	        self.textbox.focus();
	        self.datepickerCont.hide();
	        self.addDoneButton();
	      }
	    });
	  };

	  Datepicker.prototype.hide = function() {
	    this.datepickerCont.hide();
	  };

	  Datepicker.prototype.show = function() {
	    this.datepickerCont.show();
	  };

	  Datepicker.prototype.focus = function() {
	    this.textbox.click().focus();
	  };

	  Datepicker.prototype.onChange = angular.noop;
	  Datepicker.prototype.onDone = angular.noop;
	  Datepicker.prototype.onEdit = function() {
	    var self = this;
	    if (self.textbox.val().trim() === '') {
	      self.onChange(null);
	      self.textbox.val('');
	      $timeout.cancel(self.editTimerId);
	      return;
	    }
	    $timeout.cancel(self.editTimerId);
	    self.editTimerId = $timeout(function() {
	      var date = self.textbox.val(),
	        isValid = TimezoneService.isValidISODate(date);

	      if (isValid) {
	        self.prevDate = TimezoneService.parseISODate(date);
	        self.onChange(TimezoneService.formattedISODate(self.prevDate));
	      } else {
	        self.textbox.val(TimezoneService.formattedISODate(self.prevDate));
	      }
	    }, 1000);
	  };

	  return Datepicker;
	};



/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.services')
	  .service('WorkPackagesTableService', [
	    '$filter',
	    'QueryService',
	    'WorkPackagesTableHelper',
	    __webpack_require__(228)
	  ])
	  .constant('WORK_PACKAGE_ATTRIBUTES', [
	    {
	      groupName: 'details',
	      attributes: ['type', 'status', 'percentageDone', 'date', 'priority', 'version', 'category']
	    },
	    {
	      groupName: 'people',
	      attributes: ['assignee', 'responsible']
	    },
	    {
	      groupName: 'estimatesAndTime',
	      attributes: ['estimatedTime', 'spentTime']
	    },
	    {
	      groupName: 'other',
	      attributes: []
	    }
	  ])
	  .factory('WorkPackageFieldConfigurationService',
	           __webpack_require__(229))
	  .constant('WORK_PACKAGE_REGULAR_EDITABLE_FIELD', [
	    'assignee', 'responsible', 'status', 'version', 'priority'
	  ])
	  .service('WorkPackagesOverviewService', [
	    'WORK_PACKAGE_ATTRIBUTES',
	    __webpack_require__(230)
	  ])
	  .service('WorkPackageFieldService', [
	    'I18n',
	    'WORK_PACKAGE_REGULAR_EDITABLE_FIELD',
	    'WorkPackagesHelper',
	    '$q',
	    '$http',
	    'HookService',
	    'EditableFieldsState',
	    __webpack_require__(227)
	  ])
	  .service('EditableFieldsState',
	    __webpack_require__(231)
	  )
	  .service('WorkPackageAttachmentsService', [
	    'Upload', // 'Upload' is provided by ngFileUpload
	    'PathHelper',
	    'I18n',
	    'NotificationsService',
	    '$q',
	    '$timeout',
	    '$http',
	    __webpack_require__(232)
	  ]);


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	  I18n,
	  WORK_PACKAGE_REGULAR_EDITABLE_FIELD,
	  WorkPackagesHelper,
	  $q,
	  $http,
	  HookService,
	  EditableFieldsState
	  ) {

	  function getSchema(workPackage) {
	    if (workPackage.form) {
	      return workPackage.form.embedded.schema;
	    } else {
	      return workPackage.schema;
	    }
	  }

	  function isEditable(workPackage, field) {
	    // no form - no editing
	    if (!workPackage.form) {
	      return false;
	    }
	    var schema = getSchema(workPackage);
	    // TODO: extract to strategy if new cases arise
	    if (field === 'date') {
	      // nope
	      return schema.props['startDate'].writable && schema.props['dueDate'].writable;
	      //return workPackage.schema.props.startDate.writable
	      // && workPackage.schema.props.dueDate.writable;
	    }
	    if(schema.props[field].type === 'Date') {
	      return true;
	    }
	    var isWritable = schema.props[field].writable;

	    // not writable if no embedded allowed values
	    if (schema.props[field]._links && allowedValuesEmbedded(workPackage, field)) {
	      if (getEmbeddedAllowedValues(workPackage, field).length === 0) {
	        return false;
	      }
	    }
	    return isWritable;
	  }

	  function isSpecified(workPackage, field) {
	    var schema = getSchema(workPackage);
	    if (field === 'date') {
	      // kind of specified
	      return true;
	    }
	    return !_.isUndefined(schema.props[field]);
	  }

	  // under special conditions fields will be shown
	  // irregardless if they are empty or not
	  // e.g. when an error should trigger the editing state
	  // of an empty field after type change
	  function isHideable(workPackage, field) {
	    if (EditableFieldsState.errors && EditableFieldsState.errors[field]) {
	      return false;
	    }
	    return isEmpty(workPackage, field);
	  }

	  function isMilestone(workPackage) {
	    // TODO: this should be written as "only use the form when editing"
	    // otherwise always use the simple way
	    // currently we don't know the context in which this method is called
	    var formAvailable = !_.isUndefined(workPackage.form);
	    if (formAvailable) {
	      var embedded = workPackage.form.embedded,
	        allowedValues = embedded.schema.props.type._embedded.allowedValues,
	        currentType = embedded.payload.links.type.props.href;
	      return _.some(allowedValues, function(allowedValue) {
	        return allowedValue._links.self.href === currentType &&
	          allowedValue.isMilestone;
	      });
	    } else {
	      return workPackage.embedded.type.isMilestone;
	    }
	  }

	  function getValue(workPackage, field, isReadMode) {
	    var payload = isReadMode ? workPackage : workPackage.form.embedded.payload;
	    //var payload = workPackage;
	    if (field === 'date') {
	      if(isMilestone(workPackage)) {
	        return payload.props['dueDate'];
	      }
	      return {
	        startDate: payload.props['startDate'],
	        dueDate: payload.props['dueDate']
	      };
	    }
	    if (!_.isUndefined(payload.props[field])) {
	      return payload.props[field];
	    }
	    if (WorkPackageFieldService.isEmbedded(payload, field)) {
	      return payload.embedded[field];
	    }

	    if (payload.links[field] && payload.links[field].props.href !== null) {
	      return payload.links[field];
	    }
	    return null;
	  }

	  function allowedValuesEmbedded(workPackage, field) {
	    var schema = getSchema(workPackage);
	    return _.isArray(schema.props[field]._links.allowedValues);
	  }

	  function getEmbeddedAllowedValues(workPackage, field) {
	    var options = [];
	    var schema = getSchema(workPackage);
	    var allowedValues = schema.props[field]._links.allowedValues;
	    options = _.map(allowedValues, function(item) {
	      return _.extend({}, item, { name: item.title });
	    });

	    return options;
	  }

	  function getLinkedAllowedValues(workPackage, field) {
	    var schema = getSchema(workPackage);
	    var href = schema.props[field]._links.allowedValues.href;
	    return $http.get(href).then(function(r) {
	      var options = [];
	      options = _.map(r.data._embedded.elements, function(item) {
	        return _.extend({}, item._links.self, { name: item.name });
	      });
	      return options;
	    });
	  }

	  function getAllowedValues(workPackage, field) {
	    if (allowedValuesEmbedded(workPackage, field)) {
	      return $q(function(resolve) {
	        resolve(getEmbeddedAllowedValues(workPackage, field));
	      });
	    } else {
	      return getLinkedAllowedValues(workPackage, field);
	    }
	  }

	  function isRequired(workPackage, field) {
	    var schema = getSchema(workPackage);
	    if (_.isUndefined(schema.props[field])) {
	      return false;
	    }
	    return schema.props[field].required;
	  }

	  function isEmbedded(workPackage, field) {
	    return !_.isUndefined(workPackage.embedded[field]);
	  }

	  function isSavedAsLink(workPackage, field) {
	    return _.isUndefined(workPackage.form.embedded.payload.props[field]);
	  }

	  function getLabel(workPackage, field) {
	    var schema = getSchema(workPackage);
	    if (field === 'date') {
	      // special case
	      return I18n.t('js.work_packages.properties.date');
	    }
	    return schema.props[field].name;
	  }

	  function isEmpty(workPackage, field) {
	    if (field === 'date') {
	      return (
	        getValue(workPackage, 'startDate') === null &&
	        getValue(workPackage, 'dueDate') === null
	      );
	    }
	    var value = WorkPackageFieldService.format(workPackage, field);
	    if (value === null || value === '') {
	      return true;
	    }

	    if (value.html === '') {
	      return true;
	    }

	    // strategy pattern, guys
	    if (field === 'spentTime' && WorkPackageFieldService.getValue(workPackage, field) === 'PT0S') {
	      return true;
	    }

	    if (value.embedded && _.isArray(value.embedded.elements)) {
	      return value.embedded.elements.length === 0;
	    }

	    return false;
	  }

	  function getInplaceEditStrategy(workPackage, field) {
	    var schema = getSchema(workPackage);
	    var fieldType = null,
	        inplaceType = 'text';

	    if (field === 'date') {
	      if(isMilestone(workPackage)) {
	        fieldType = 'Date';
	      } else {
	        fieldType = 'DateRange';
	      }
	    } else {
	      fieldType = schema.props[field].type;
	    }
	    switch(fieldType) {
	      case 'DateRange':
	        inplaceType = 'daterange';
	        break;
	      case 'Date':
	        inplaceType = 'date';
	        break;
	      case 'Float':
	        inplaceType = 'float';
	        break;
	      case 'Integer':
	        inplaceType = 'integer';
	        break;
	      case 'Boolean':
	        inplaceType = 'boolean';
	        break;
	      case 'Formattable':
	        if (workPackage.form.embedded.payload.props[field].format === 'textile') {
	          inplaceType = 'wiki_textarea';
	        } else {
	          inplaceType = 'textarea';
	        }
	        break;
	      case 'Duration':
	        inplaceType = 'duration';
	        break;
	      case 'StringObject':
	      case 'Version':
	      case 'User':
	      case 'Status':
	      case 'Priority':
	      case 'Category':
	      case 'Type':
	        inplaceType = 'dropdown';
	        break;
	    }

	    var typeFromPluginHook = HookService.call('workPackageAttributeEditableType', {
	      type: fieldType
	    }).pop();

	    if (typeFromPluginHook) {
	      inplaceType = typeFromPluginHook;
	    }
	    return inplaceType;
	  }

	  function getInplaceDisplayStrategy(workPackage, field) {
	    var schema = getSchema(workPackage);
	    var fieldType = null,
	      displayStrategy = 'embedded';

	    if (field === 'date') {
	      if(isMilestone(workPackage)) {
	        fieldType = 'Date';
	      } else {
	        fieldType = 'DateRange';
	      }
	    } else if (field === 'spentTime') {
	      fieldType = 'SpentTime';
	    }  else {
	      fieldType = schema.props[field].type;
	    }
	    switch(fieldType) {
	      case 'String':
	      case 'Integer':
	      case 'Float':
	      case 'Duration':
	      case 'Boolean':
	        displayStrategy = 'text';
	        break;
	      case 'SpentTime':
	        displayStrategy = 'spent_time';
	        break;
	      case 'Formattable':
	        displayStrategy = 'wiki_textarea';
	        break;
	      case 'Version':
	        displayStrategy = 'version';
	        break;
	      case 'User':
	        displayStrategy = 'user';
	        break;
	      case 'DateRange':
	        displayStrategy = 'daterange';
	        break;
	      case 'Date':
	        displayStrategy = 'date';
	        break;
	    }

	    //workPackageOverviewAttributes
	    var pluginDirectiveName = HookService.call('workPackageOverviewAttributes', {
	      type: fieldType,
	      field: field,
	      workPackage: workPackage
	    })[0];
	    if (pluginDirectiveName) {
	      displayStrategy = 'dynamic';
	    }

	    return displayStrategy;
	  }

	  function format(workPackage, field) {
	    var schema = getSchema(workPackage);
	    if (field === 'date') {
	      if(isMilestone(workPackage)) {
	        return workPackage.props['dueDate'];
	      }
	      return {
	        startDate: workPackage.props.startDate,
	        dueDate: workPackage.props.dueDate,
	        noStartDate: I18n.t('js.label_no_start_date'),
	        noEndDate: I18n.t('js.label_no_due_date')
	      };
	    }

	    var value = workPackage.props[field];
	    if (_.isUndefined(value)) {
	      // might be embedded
	      var isReadMode = true;
	      return WorkPackageFieldService.getValue(workPackage, field, isReadMode);
	    }

	    if (value === null) {
	      return null;
	    }

	    var mappings = {
	      dueDate: 'date',
	      startDate: 'date',
	      createdAt: 'datetime',
	      updatedAt: 'datetime'
	    };

	    if (schema.props[field]) {
	      if (schema.props[field].type === 'Duration') {
	        var hours = moment.duration(value).asHours();
	        return I18n.t('js.units.hour', { count: hours.toFixed(2) });
	      }

	      if (schema.props[field].type === 'Boolean') {
	        return value ? I18n.t('js.general_text_yes') : I18n.t('js.general_text_no');
	      }

	      if (workPackage.schema.props[field].type === 'Date') {
	        return value;
	      }
	    }

	    return WorkPackagesHelper.formatValue(value, mappings[field]);
	  }

	  var WorkPackageFieldService = {
	    getSchema: getSchema,
	    isEditable: isEditable,
	    isRequired: isRequired,
	    isSpecified: isSpecified,
	    isEmpty: isEmpty,
	    isHideable: isHideable,
	    isMilestone: isMilestone,
	    isEmbedded: isEmbedded,
	    isSavedAsLink: isSavedAsLink,
	    getValue: getValue,
	    getLabel: getLabel,
	    getAllowedValues: getAllowedValues,
	    format: format,
	    getInplaceEditStrategy: getInplaceEditStrategy,
	    getInplaceDisplayStrategy: getInplaceDisplayStrategy,
	    defaultPlaceholder: '-'
	  };

	  return WorkPackageFieldService;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 228 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function($filter, QueryService, WorkPackagesTableHelper) {
	  var workPackagesTableData = {
	    allRowsChecked: false,
	    showFiltersOptions: false
	  };
	  var bulkLinks = {};

	  var WorkPackagesTableService = {
	    setBulkLinks: function(links) {
	      bulkLinks = links;
	    },
	    getBulkLinks: function() {
	      return bulkLinks;
	    },

	    getWorkPackagesTableData: function() {
	      return workPackagesTableData;
	    },

	    setAllRowsChecked: function(rows, currentRow, currentState) {
	      rows = rows.filter(function(row) {
	        return row !== currentRow;
	      });
	      workPackagesTableData.allRowsChecked = $filter('allRowsChecked')(rows) && currentState;
	    },
	    allRowsChecked: function() {
	      return workPackagesTableData.allRowsChecked;
	    },

	    setColumns: function(columns) {
	      workPackagesTableData.columns = columns;
	    },

	    addColumnMetaData: function(metaData) {
	      angular.forEach(workPackagesTableData.columns, function(column, i){
	        column.total_sum = metaData.sums[i];

	        if (metaData.group_sums) column.group_sums = metaData.group_sums[i];
	      });

	      if (!workPackagesTableData.groupableColumns) workPackagesTableData.groupableColumns = metaData.groupable_columns;
	    },

	    getGroupableColumns: function() {
	      return workPackagesTableData.groupableColumns;
	    },

	    isGroupable: function(column) {
	      if (!workPackagesTableData.groupableColumns || !column) return false;

	      return workPackagesTableData.groupableColumns.map(function(groupableColumn) {
	        return groupableColumn.name;
	      }).indexOf(column.name) !== -1;
	    },

	    buildRows: function(workPackages, groupBy) {
	      this.setRows(WorkPackagesTableHelper.buildRows(workPackages, groupBy));
	    },

	    setRows: function(rows) {
	      workPackagesTableData.rows = rows;
	    },

	    getRows: function() {
	      return workPackagesTableData.rows;
	    },

	    getRowsData: function() {
	      return WorkPackagesTableService.getRows().map(function(row) {
	        return row.object;
	      });
	    },

	    getRowsByWorkPackageIds: function(ids) {
	      var rows = [];

	      angular.forEach(WorkPackagesTableService.getRows(), function(row) {
	        if (ids.indexOf(row.object.id) >= 0) {
	          rows.push(row);
	        }
	      });

	      return rows;
	    },

	    getGroupBy: function() {
	      return workPackagesTableData.groupBy;
	    },

	    setGroupBy: function(groupBy) {
	      workPackagesTableData.groupBy = groupBy;
	    },

	    removeRow: function(row) {
	      var rows = workPackagesTableData.rows;
	      var index = rows.indexOf(row);

	      if (index > -1) rows.splice(index, 1);
	    },
	    removeRows: function(rows) {
	      angular.forEach(rows, function(row) {
	        WorkPackagesTableService.removeRow(row);
	      });
	    },

	    sortBy: function(columnName, direction) {
	      QueryService.getQuery().sortation.addSortElement({
	        field: columnName,
	        direction: direction
	      });
	    },

	    setCheckedStateForAllRows: function(rows, state) {
	      angular.forEach(rows, function(row) {
	        row.checked = state;
	      });
	    },
	    setRowSelection: function(row, state) {
	      row.checked = state;
	    },
	    selectRowRange: function(rows, row, activeSelectionBorderIndex) {
	      if (WorkPackagesTableHelper.getSelectedRows(rows).length == 0) {
	        this.setRowSelection(row, true);

	        activeSelectionBorderIndex = rows.indexOf(row);
	      } else {
	        var index = rows.indexOf(row);
	        var start = Math.min(index, activeSelectionBorderIndex);
	        var end = Math.max(index, activeSelectionBorderIndex);

	        for (var x = 0; x < rows.length; x++) {
	          rows[x].checked = x >= start && x <= end;
	        }
	      }

	      return activeSelectionBorderIndex;
	    },

	    getShowFilterOptions: function() {
	      return workPackagesTableData.showFiltersOptions;
	    },
	    toggleShowFilterOptions: function() {
	      workPackagesTableData.showFiltersOptions = !workPackagesTableData.showFiltersOptions;
	    }
	  };

	  return WorkPackagesTableService;
	};


/***/ },
/* 229 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  function getDropdownSortingStrategy(field) {
	    var sorting;

	    switch(field) {
	      case 'version':
	        sorting = 'title';
	        break;
	      default:
	        sorting = null;
	    }
	    return sorting;
	  }

	  return {
	    getDropdownSortingStrategy: getDropdownSortingStrategy
	  };
	};


/***/ },
/* 230 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(WORK_PACKAGE_ATTRIBUTES) {

	  var workPackageDetailsAttributes = angular.copy(WORK_PACKAGE_ATTRIBUTES);

	  var WorkPackagesOverviewService = {
	    getGroupedWorkPackageOverviewAttributes: function() {
	      return angular.copy(workPackageDetailsAttributes);
	    },
	    getGroup: function(groupName, groupedAttributes) {
	      for (var x=0; x < groupedAttributes.length; x++) {
	        if (groupedAttributes[x].groupName === groupName) {
	          return groupedAttributes[x];
	        }
	      }

	      return null;
	    },
	    getGroupAttributesForGroupedAttributes: function(groupName, groupedAttributes) {
	      var group = this.getGroup(groupName, groupedAttributes);

	      return (group ? group.attributes : null);
	    },
	    getGroupAttributes: function(groupName) {
	      return this.getGroupAttributesForGroupedAttributes(groupName, workPackageDetailsAttributes);
	    },
	    addAttributesToGroup: function(groupName, attributes) {
	      var groupAttributes = this.getGroupAttributes(groupName);

	      if (groupAttributes) {
	        angular.forEach(attributes, function(attribute) {
	          this.push(attribute);
	        }, groupAttributes);
	      }
	    },
	    addAttributeToGroup: function(groupName, attribute, position) {
	      var attributes = this.getGroupAttributes(groupName);

	      if (attributes) {
	        if (position) {
	          attributes.splice(position, 0, attribute);
	        } else {
	          attributes.push(attribute);
	        }
	      }
	    },
	    addGroup: function(groupName, position) {
	      var group = this.getGroup(groupName, workPackageDetailsAttributes);

	      if (!group) {
	        group = { groupName: groupName, attributes: [] };

	        if (position) {
	          workPackageDetailsAttributes.splice(position, 0, group);
	        } else {
	          workPackageDetailsAttributes.push(group);
	        }
	      }
	    },
	    removeAttribute: function(attribute) {
	      for (var x=0; x < workPackageDetailsAttributes.length; x++) {
	        var group = workPackageDetailsAttributes[x];
	        var index = group.attributes.indexOf(attribute);

	        if (index >= 0) {
	          group.attributes.splice(index, 1);
	        }
	      }
	    }
	  };

	  return WorkPackagesOverviewService;
	};


/***/ },
/* 231 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    workPackage: null,
	    errors: null,
	    isBusy: false,
	    activeField: null,
	    forcedEditState: false
	  };
	};


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(Upload, PathHelper, I18n, NotificationsService, $q, $timeout, $http) {
	  'use strict';
	  var upload = function(workPackage, files) {
	    var uploadPath = workPackage.links.addAttachment.url();
	    // for file in files build some promises, create a notification per WP,
	    // notify the noticiation (wat?) about progress
	    var uploads = _.map(files, function(file) {
	      var options = {
	        url: uploadPath,
	        fields: {
	          metadata: {
	            fileName: file.name,
	            description: file.description
	          }
	        },
	        file: file
	      };
	      return Upload.upload(options);
	    });

	    // notify the user
	    var message = I18n.t('js.label_upload_notification', {
	      id: workPackage.props.id,
	      subject: workPackage.props.subject
	    });

	    var notification = NotificationsService.addWorkPackageUpload(message, uploads);
	    var allUploadsDone = $q.defer();
	    $q.all(uploads).then(function() {
	      $timeout(function() { // let the notification linger for a bit
	        NotificationsService.remove(notification);
	        allUploadsDone.resolve();
	      }, 700);
	    }, function(err) {
	      allUploadsDone.reject(err);
	    });
	    return allUploadsDone.promise;
	  },
	  load = function(workPackage, reload) {
	    var path = workPackage.links.attachments.url(),
	        attachments = $q.defer();
	    $http.get(path, { cache: !reload }).success(function(response) {
	      attachments.resolve(response._embedded.elements);
	    }).error(function(err) {
	      attachments.reject(err);
	    });
	    return attachments.promise;
	  },
	  remove = function(fileOrAttachment) {
	    var removal = $q.defer();
	    if (angular.isObject(fileOrAttachment._links)) {
	      var path = fileOrAttachment._links.self.href;
	      $http.delete(path).success(function() {
	        removal.resolve(fileOrAttachment);
	      }).error(function(err) {
	        removal.reject(err);
	      });
	    } else {
	      removal.resolve(fileOrAttachment);
	    }
	    return removal.promise;
	  },
	  hasAttachments = function(workPackage) {
	    var existance = $q.defer();
	    load(workPackage).then(function(attachments) {
	      existance.resolve(attachments.length > 0);
	    });
	    return existance.promise;
	  };

	  return {
	    upload: upload,
	    remove: remove,
	    load: load,
	    hasAttachments: hasAttachments
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.workPackages.tabs')
	  .directive('addWorkPackageChild', __webpack_require__(
	    235))
	  .directive('addWorkPackageRelation', __webpack_require__(
	    236))
	  .directive('exclusiveEdit', __webpack_require__(237))
	  .directive('panelExpander', __webpack_require__(238))
	  .directive('relatedWorkPackageTableRow', [
	    'I18n',
	    'PathHelper',
	    'WorkPackagesHelper', __webpack_require__(
	      239)
	  ])
	  .directive('workPackageRelations', [
	    'I18n',
	    'WorkPackagesHelper',
	    '$timeout',
	    __webpack_require__(240)
	  ]);

	// FIXME: move modules or files to the right place
	angular.module('openproject.workPackages.directives')
	  .directive('attachmentFileSize', __webpack_require__(234))
	  .directive('attachmentTitleCell', ['PathHelper', __webpack_require__(
	    241)])
	  .directive('attachmentUserCell', ['PathHelper', __webpack_require__(
	    242)])
	  .directive('attachmentsTable', ['I18n', __webpack_require__(
	    243)])
	  .directive('attachmentsTitle', __webpack_require__(244))
	  .directive('editableComment', __webpack_require__(245));


/***/ },
/* 234 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    replace: false,
	    templateUrl: '/templates/work_packages/tabs/_attachment_file_size.html',
	    scope: {
	      attachment: '='
	    },
	    link: function(scope, element, attributes) {
	      scope.displayFileSize = "(" + formattedFileSize(scope.attachment.props.fileSize) + ")";

	      function formattedFileSize(fileSize) {
	        var size = parseFloat(fileSize);
	        return isNaN(size) ? "0kB" : (size / 1000).toFixed(2) + "kB";
	      }
	    }
	  };
	};


/***/ },
/* 235 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function() {
	  return {
	    restrict: 'E',
	    templateUrl: '/templates/work_packages/tabs/_add_work_package_child.html',
	  };
	};


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(URI) {//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function($http, PathHelper) {
	  return {
	    restrict: 'E',
	    templateUrl: '/templates/work_packages/tabs/_add_work_package_relation.html',
	    link: function(scope, element, attributes) {
	      scope.relationToAddId = null;
	      scope.autocompleteWorkPackages = function(term) {
	        if (!term) {
	          return;
	        }
	        var params = {
	          q: term,
	          scope: 'relatable',
	          escape: false,
	          id: scope.handler.workPackage.props.id,
	          'project_id': scope.handler.workPackage.embedded.project.props.id
	        };
	        return $http({
	          method: 'GET',
	          url: URI(PathHelper.workPackageJsonAutoCompletePath())
	            .search(params)
	            .toString()
	        }).then(function(response) {
	          scope.options = response.data;
	        });
	      }
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27)))

/***/ },
/* 237 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'EA',
	    replace: true,
	    transclude: true,
	    template: '<div class="exclusive-edit" ng-transclude></div>',
	    controller: function() {
	      var editors = [];
	      var creator;

	      this.gotEditable = function(selectedEditor) {
	        angular.forEach(editors, function(editor) {
	          editor.inEdit = selectedEditor == editor;
	        });
	      };

	      this.addEditable = function(editor) {
	        editors.push(editor);
	      };

	      this.setCreator = function(newCreator) {
	        creator = newCreator;
	      };

	      this.setQuoted = function(text) {
	        creator.activity.comment = text;
	      };
	    }
	  };
	};


/***/ },
/* 238 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/work_packages/tabs/_panel_expander.html',
	    scope: {
	      collapsed: '=',
	      expandText: '@',
	      collapseText: '@'
	    }
	  };
	};


/***/ },
/* 239 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	// TODO move to UI components
	module.exports = function(I18n, PathHelper, WorkPackagesHelper) {
	  return {
	    restrict: 'A',
	    link: function(scope) {
	      scope.I18n = I18n;
	      scope.workPackagePath = PathHelper.staticWorkPackagePath;
	      scope.userPath = PathHelper.staticUserPath;

	      scope.handler.getRelatedWorkPackage(scope.workPackage, scope.relation).then(function(relatedWorkPackage){
	        scope.relatedWorkPackage = relatedWorkPackage;
	        scope.fullIdentifier = WorkPackagesHelper.getFullIdentifier(relatedWorkPackage);
	        scope.state = WorkPackagesHelper.getState(relatedWorkPackage);
	      });
	    }
	  };
	};


/***/ },
/* 240 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n, WorkPackagesHelper, $timeout) {
	  return {
	    restrict: 'E',
	    replace: true,
	    scope: {
	      title: '@',
	      handler: '=',
	      btnTitle: '@buttonTitle',
	      btnIcon: '@buttonIcon',
	      isSingletonRelation: '@singletonRelation'
	    },
	    templateUrl: '/templates/work_packages/tabs/_work_package_relations.html',
	    link: function(scope, element, attrs) {
	      scope.I18n = I18n;
	      scope.focusElementIndex = -2;

	      var setExpandState = function() {
	        scope.expand = !scope.handler.isEmpty();
	      };

	      scope.$watch('handler', function() {
	        if (scope.handler) {
	          scope.workPackage = scope.handler.workPackage;

	          setExpandState();
	          scope.relationsCount = scope.handler.getCount();

	          if (scope.handler.applyCustomExtensions) {
	            $timeout(function() {
	              scope.handler.applyCustomExtensions();
	            });
	          }
	        }
	      });

	      scope.$watch('expand', function(newVal, oldVal) {
	        scope.stateClass = WorkPackagesHelper.collapseStateIcon(newVal);
	      });

	      scope.toggleExpand = function() {
	        scope.expand = !scope.expand;
	      };

	      scope.isFocused = function(index) {
	        return index == scope.focusElementIndex;
	      };

	      scope.updateFocus = function(index) {
	        var length = scope.handler.relations.length;

	        if (length == 0) {
	          scope.focusElementIndex = -1;
	        } else {
	          scope.focusElementIndex = (index < length) ? index : length - 1;
	        }

	        $timeout(function() {
	          scope.$broadcast('updateFocus');
	        });
	      };
	    }
	  };
	};


/***/ },
/* 241 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(PathHelper) {
	  return {
	    restrict: 'A',
	    replace: false,
	    templateUrl: '/templates/work_packages/tabs/_attachment_title_cell.html',
	    scope: {
	      attachment: '='
	    },
	    link: function(scope, element, attributes) {
	      scope.attachmentPath = scope.attachment.links.downloadLocation.href;
	    }
	  };
	};


/***/ },
/* 242 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(PathHelper) {
	  return {
	    restrict: 'A',
	    templateUrl: '/templates/work_packages/tabs/_attachment_user_cell.html',
	    scope: {
	      attachment: '='
	    },
	    link: function(scope, element, attributes) {
	      scope.attachment.links.author.fetch()
	        .then(function(author){
	          scope.authorName = author.props.name;
	          scope.authorId = author.props.id;
	          scope.userPath = PathHelper.staticUserPath(author.props.id);
	        });
	    }
	  };
	};


/***/ },
/* 243 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(I18n) {
	  return {
	    restrict: 'E',
	    templateUrl: '/templates/work_packages/tabs/_attachments_table.html',
	    scope: {
	      attachments: '='
	    },
	    link: function(scope) {
	      scope.I18n = I18n;
	    }
	  };
	};


/***/ },
/* 244 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'E',
	    replace: true,
	    templateUrl: '/templates/work_packages/tabs/_attachments_title.html',
	    scope: {
	      attachments: '='
	    },
	    link: function(scope, element, attributes) {
	      scope.attachmentsTitle = I18n.t('js.work_packages.tabs.attachments') + " (" + scope.attachments.length + ")";
	    }
	  };
	};


/***/ },
/* 245 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function() {
	  return {
	    restrict: 'A',
	    scope: {
	      activity: '=',
	      commentInEdit: '='
	    },
	    templateUrl: '/templates/work_packages/tabs/_editable_comment.html',
	    link: function(scope){

	    }
	  };
	};


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	angular.module('openproject.viewModels')
	  .factory('CommonRelationsHandler', [
	    '$timeout',
	    'WorkPackageService',
	    'ApiNotificationsService',
	    __webpack_require__(247)
	  ])
	  .factory('ChildrenRelationsHandler', [
	    'CommonRelationsHandler',
	    'WorkPackageService',
	    'ApiNotificationsService',
	    __webpack_require__(248)
	  ])
	  .factory('ParentRelationsHandler', [
	    'CommonRelationsHandler',
	    'WorkPackageService',
	    'ApiNotificationsService',
	    __webpack_require__(249)
	  ]);


/***/ },
/* 247 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	    $timeout,
	    WorkPackageService,
	    ApiNotificationsService
	  ) {
	  function CommonRelationsHandler(workPackage,
	                                  relations,
	                                  relationsId) {
	    this.workPackage = workPackage;
	    this.relations = relations;
	    this.relationsId = relationsId;

	    this.type = 'relation';
	    this.isSingletonRelation = false;
	  }

	  CommonRelationsHandler.prototype = {
	    isEmpty: function() {
	      return !this.relations || this.relations.length === 0;
	    },

	    getCount: function() {
	      return (this.relations) ? this.relations.length : 0;
	    },

	    canAddRelation: function() {
	      return !!this.workPackage.links.addRelation;
	    },

	    canDeleteRelation: function(relation) {
	      return !!relation.links.remove;
	    },

	    addRelation: function(scope) {
	      WorkPackageService.addWorkPackageRelation(this.workPackage,
	                                                scope.relationToAddId,
	                                                this.relationsId)
	                        .then(function() {
	        scope.relationToAddId = '';
	        scope.updateFocus(-1);
	        scope.$emit('workPackageRefreshRequired');
	      }, function(error) {
	        ApiNotificationsService.addError(error);
	      });
	    },

	    removeRelation: function(scope) {
	      var index = this.relations.indexOf(scope.relation);
	      var handler = this;

	      WorkPackageService.removeWorkPackageRelation(scope.relation).then(function(response){
	          handler.relations.splice(index, 1);
	          scope.updateFocus(index);
	          scope.$emit('workPackageRefreshRequired');
	        }, function(error) {
	          ApiNotificationsService.addError(scope, error);
	        });
	    },

	    applyCustomExtensions: function() {
	      if (this.canAddRelation) {
	        var workPackage = this.workPackage;
	        var relationsId = this.relationsId;
	        var handler = this;
	      }
	    },

	    getRelatedWorkPackage: function(workPackage, relation) {
	      var self = workPackage.links.self.href;

	      if (relation.links.relatedTo.href === self) {
	        return relation.links.relatedFrom.fetch();
	      } else {
	        return relation.links.relatedTo.fetch();
	      }
	    }
	  };

	  return CommonRelationsHandler;
	};


/***/ },
/* 248 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(
	    CommonRelationsHandler,
	    WorkPackageService,
	    ApiNotificationsService
	  ) {
	  function ChildrenRelationsHandler(workPackage, children) {
	      var handler = new CommonRelationsHandler(workPackage, children, undefined);

	      handler.type = 'child';
	      handler.applyCustomExtensions = undefined;

	      handler.canAddRelation = function() { return !!this.workPackage.links.addChild; };
	      handler.canDeleteRelation = function() {
	        return !!this.workPackage.links.update;
	      };
	      handler.addRelation = function() {
	        window.location = this.workPackage.links.addChild.href;
	      };
	      handler.getRelatedWorkPackage = function(workPackage, relation) { return relation.fetch(); };
	      handler.removeRelation = function(scope) {
	          var index = this.relations.indexOf(scope.relation);
	          var handler = this;
	          var params = {
	            lockVersion: scope.relation.props.lockVersion,
	            parentId: null
	          };

	          WorkPackageService.updateWithPayload(scope.relation, params).then(function(response){
	              handler.relations.splice(index, 1);
	              scope.workPackage.props.lockVersion = response.props.lockVersion;
	              scope.updateFocus(index);
	              scope.$emit('workPackageRefreshRequired');
	          }, function(error) {
	            ApiNotificationsService.addError(error);
	          });
	      };

	      return handler;
	  }

	  return ChildrenRelationsHandler;
	};


/***/ },
/* 249 */
/***/ function(module, exports) {

	//-- copyright
	// OpenProject is a project management system.
	// Copyright (C) 2012-2015 the OpenProject Foundation (OPF)
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License version 3.
	//
	// OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
	// Copyright (C) 2006-2013 Jean-Philippe Lang
	// Copyright (C) 2010-2013 the ChiliProject Team
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU General Public License
	// as published by the Free Software Foundation; either version 2
	// of the License, or (at your option) any later version.
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// You should have received a copy of the GNU General Public License
	// along with this program; if not, write to the Free Software
	// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
	//
	// See doc/COPYRIGHT.rdoc for more details.
	//++

	module.exports = function(CommonRelationsHandler, WorkPackageService, ApiNotificationsService) {
	  function ParentRelationsHandler(workPackage, parents, relationsId) {
	      var relations = parents.filter(function(parent) {
	            return parent.props.id !== workPackage.props.id;
	          }),
	          handler = new CommonRelationsHandler(workPackage, relations, relationsId);

	      handler.type = "parent";
	      handler.addRelation = undefined;
	      handler.isSingletonRelation = true;
	      handler.relationsId = relationsId;

	      handler.canAddRelation = function() { return !!this.workPackage.links.changeParent; };
	      handler.canDeleteRelation = function() { return !!this.workPackage.links.changeParent; };
	      handler.getRelatedWorkPackage = function(workPackage, relation) { return relation.fetch(); };
	      handler.addRelation = function(scope) {
	        var params = {
	          lockVersion: scope.workPackage.props.lockVersion,
	          parentId: scope.relationToAddId
	        };

	        WorkPackageService.updateWithPayload(this.workPackage, params).then(function() {
	            scope.relationToAddId = '';
	            scope.updateFocus(-1);
	            scope.$emit('workPackageRefreshRequired');
	        }, function(error) {
	            ApiNotificationsService.addError(error);
	        });
	      };
	      handler.removeRelation = function(scope) {
	          var index = this.relations.indexOf(scope.relation);
	          var handler = this;
	          var params = {
	            lockVersion: scope.workPackage.props.lockVersion,
	            parentId: null
	          };

	          WorkPackageService.updateWithPayload(scope.workPackage, params).then(function(response){
	              handler.relations.splice(index, 1);
	              scope.workPackage.props.lockVersion = response.props.lockVersion;
	              scope.updateFocus(index);
	              scope.$emit('workPackageRefreshRequired');
	          }, function(error) {
	              ApiNotificationsService.addError(error);
	          });
	      };

	      return handler;
	  }

	  return ParentRelationsHandler;
	};


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./components/accessible_checkbox.html": 251,
		"./components/accessible_element.html": 252,
		"./components/activity_comment.html": 253,
		"./components/authoring.html": 254,
		"./components/back_url.html": 255,
		"./components/empty_element.html": 256,
		"./components/icon_wrapper.html": 257,
		"./components/inplace_editor/display/boolean.html": 258,
		"./components/inplace_editor/display/date.html": 259,
		"./components/inplace_editor/display/daterange.html": 260,
		"./components/inplace_editor/display/dynamic.html": 261,
		"./components/inplace_editor/display/embedded.html": 262,
		"./components/inplace_editor/display/spent_time.html": 263,
		"./components/inplace_editor/display/text.html": 264,
		"./components/inplace_editor/display/user.html": 265,
		"./components/inplace_editor/display/version.html": 266,
		"./components/inplace_editor/display/wiki_textarea.html": 267,
		"./components/inplace_editor/editable/boolean.html": 268,
		"./components/inplace_editor/editable/date.html": 269,
		"./components/inplace_editor/editable/daterange.html": 270,
		"./components/inplace_editor/editable/dropdown.html": 271,
		"./components/inplace_editor/editable/duration.html": 272,
		"./components/inplace_editor/editable/float.html": 273,
		"./components/inplace_editor/editable/integer.html": 274,
		"./components/inplace_editor/editable/text.html": 275,
		"./components/inplace_editor/editable/textarea.html": 276,
		"./components/inplace_editor/editable/wiki_textarea.html": 277,
		"./components/modal_loading.html": 278,
		"./components/notification-box.html": 279,
		"./components/notifications.html": 280,
		"./components/progress_bar.html": 281,
		"./components/selectable_title.html": 282,
		"./components/sort_link.html": 283,
		"./components/table_pagination.html": 284,
		"./components/toggled_multiselect.html": 285,
		"./components/upload-progress.html": 286,
		"./components/user_field.html": 287,
		"./components/zoom_slider.html": 288,
		"./layout/menu_item.html": 289,
		"./timelines/timeline_column_data.html": 290,
		"./timelines/timeline_table.html": 291,
		"./timelines/timeline_table_container.html": 292,
		"./timelines/toolbar.html": 293,
		"./work_packages.html": 294,
		"./work_packages.list.details.html": 295,
		"./work_packages.list.html": 296,
		"./work_packages.list.new.html": 297,
		"./work_packages/activities/_entry.html": 298,
		"./work_packages/activities/_revision.html": 299,
		"./work_packages/activities/_user.html": 300,
		"./work_packages/attachments-edit.html": 301,
		"./work_packages/attachments.html": 302,
		"./work_packages/field.html": 303,
		"./work_packages/inplace_editor/custom/display/spent_time.html": 304,
		"./work_packages/inplace_editor/custom/display/user.html": 305,
		"./work_packages/inplace_editor/custom/display/version.html": 306,
		"./work_packages/inplace_editor/custom/editable/date.html": 307,
		"./work_packages/inplace_editor/custom/editable/daterange.html": 308,
		"./work_packages/inplace_editor/custom/editable/dropdown.html": 309,
		"./work_packages/inplace_editor/custom/editable/duration.html": 310,
		"./work_packages/inplace_editor/custom/editable/wiki_textarea.html": 311,
		"./work_packages/inplace_editor/display_pane.html": 312,
		"./work_packages/inplace_editor/edit_pane.html": 313,
		"./work_packages/inplace_editor/main_pane.html": 314,
		"./work_packages/menus/column_context_menu.html": 315,
		"./work_packages/menus/details_more_dropdown_menu.html": 316,
		"./work_packages/menus/query_select_dropdown_menu.html": 317,
		"./work_packages/menus/settings_dropdown_menu.html": 318,
		"./work_packages/menus/tasks_dropdown_menu.html": 319,
		"./work_packages/menus/work_package_context_menu.html": 320,
		"./work_packages/modals/columns.html": 321,
		"./work_packages/modals/export.html": 322,
		"./work_packages/modals/group_by.html": 323,
		"./work_packages/modals/save.html": 324,
		"./work_packages/modals/settings.html": 325,
		"./work_packages/modals/share.html": 326,
		"./work_packages/modals/sorting.html": 327,
		"./work_packages/query_columns.html": 328,
		"./work_packages/query_filters.html": 329,
		"./work_packages/sort_header.html": 330,
		"./work_packages/tabs/_add_work_package_child.html": 331,
		"./work_packages/tabs/_add_work_package_relation.html": 332,
		"./work_packages/tabs/_attachment_file_size.html": 333,
		"./work_packages/tabs/_attachment_title_cell.html": 334,
		"./work_packages/tabs/_attachment_user_cell.html": 335,
		"./work_packages/tabs/_attachments_table.html": 336,
		"./work_packages/tabs/_attachments_title.html": 337,
		"./work_packages/tabs/_editable_comment.html": 338,
		"./work_packages/tabs/_panel_expander.html": 339,
		"./work_packages/tabs/_work_package_relations.html": 340,
		"./work_packages/tabs/activity.html": 341,
		"./work_packages/tabs/overview.html": 342,
		"./work_packages/tabs/relations.html": 343,
		"./work_packages/tabs/watchers.html": 344,
		"./work_packages/watchers/lookup.html": 345,
		"./work_packages/watchers/watcher.html": 346,
		"./work_packages/work_package_column.html": 347,
		"./work_packages/work_package_details_toolbar.html": 348,
		"./work_packages/work_packages_table.html": 349
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 250;


/***/ },
/* 251 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/accessible_checkbox.html', "<span class=\"accessible-checkbox\">\n  <label for=\"{{ checkboxId }}\" class=\"hidden-for-sighted\">{{ checkboxTitle }}</label>\n  <input type=\"checkbox\"\n         ng-model=\"model\"\n         name=\"{{ name }}\"\n         value=\"{{ checkboxValue }}\"\n         id=\"{{ checkboxId }}\"/>\n</span>\n") }]);

/***/ },
/* 252 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/accessible_element.html', "<span>\n  <span aria-hidden=\"true\" role=\"presentation\" tabindex=\"-1\" ng-bind=\"visibleText\"></span>\n  <span class=\"hidden-for-sighted\" ng-bind=\"readableText\"></span>\n</span>\n") }]);

/***/ },
/* 253 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/activity_comment.html', "<div class=\"activity-comment\" ng-if=\"canAddComment\">\n  <form name=\"commentForm\">\n    <label for=\"add-comment-text\" class=\"hidden-for-sighted\">\n      {{ $parent.title }}\n    </label>\n    <textarea id=\"add-comment-text\"\n              class=\"add-comment-text\"\n              name=\"add_comment_text\"\n              ng-model=\"$parent.activity.comment\"\n              required\n              placeholder=\"{{ $parent.title }}\"\n              ng-disabled=\"$parent.processingComment\">\n    </textarea>\n    <button class=\"button\"\n            ng-click=\"$parent.createComment()\"\n            ng-disabled=\"commentForm.$invalid || $parent.processingComment\">\n      <i class=\"icon-yes icon-left\"></i>{{ $parent.buttonTitle }}\n    </button>\n  </form>\n</div>\n") }]);

/***/ },
/* 254 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/authoring.html', "<span ng-bind-html=\"I18n.t('js.label_added_time_by', { author: authorLink, age: timestamp })\"></span>\n") }]);

/***/ },
/* 255 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/back_url.html', "<input type=\"hidden\" name=\"back_url\" id=\"back_url\" value=\"{{backUrl}}\"></input>\n") }]);

/***/ },
/* 256 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/empty_element.html', "<accessible-element visible-text=\"'-'\" readable-text=\"I18n.t('js.timelines.empty')\">\n</accessible-element>\n") }]);

/***/ },
/* 257 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/icon_wrapper.html', "<span class=\"icon-context icon-button icon-{{iconName}} {{cssClass}}\" title=\"{{title}}\">\n  <span class=\"hidden-for-sighted\">{{title}}</span>\n</span>\n") }]);

/***/ },
/* 258 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/boolean.html', "<span ng-bind=\"displayPaneController.getReadValue()\"></span>\n") }]);

/***/ },
/* 259 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/date.html', "<op-date date-value=\"displayPaneController.getReadValue()\" no-date-text=\"displayPaneController.placeholder\"></op-date>\n") }]);

/***/ },
/* 260 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/daterange.html', "<op-date date-value=\"displayPaneController.getReadValue().startDate\" no-date-text=\"displayPaneController.getReadValue().noStartDate\"></op-date>&nbsp;&nbsp;-&nbsp;&nbsp;<op-date date-value=\"displayPaneController.getReadValue().dueDate\" no-date-text=\"displayPaneController.getReadValue().noEndDate\"></op-date>\n") }]);

/***/ },
/* 261 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/dynamic.html', "<work-package-dynamic-attribute\n    html-element=\"displayPaneController.getDynamicDirectiveName()\"\n    work-package=\"displayPaneController.getWorkPackage()\"\n    class=\"dynamic-attribute\">\n</work-package-dynamic-attribute>\n") }]);

/***/ },
/* 262 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/embedded.html', "<span ng-bind=\"displayPaneController.getReadValue().props.name || displayPaneController.getReadValue().props.value || displayPaneController.placeholder\"></span>\n") }]);

/***/ },
/* 263 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/spent_time.html', "<inplace-display-spent-time></inplace-display-spent-time>\n") }]);

/***/ },
/* 264 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/text.html', "<span ng-if=\"displayPaneController.isReadValueEmpty()\" ng-bind=\"displayPaneController.placeholder\"></span>\n<span ng-if=\"!displayPaneController.isReadValueEmpty()\" ng-bind=\"displayPaneController.getReadValue()\"></span>\n") }]);

/***/ },
/* 265 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/user.html', "<inplace-display-user></inplace-display-user>\n") }]);

/***/ },
/* 266 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/version.html', "<inplace-display-version></inplace-display-version>\n") }]);

/***/ },
/* 267 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/display/wiki_textarea.html', "<span ng-bind-html=\"displayPaneController.getReadValue().html || displayPaneController.placeholder\"></span>\n") }]);

/***/ },
/* 268 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/boolean.html', "<div class=\"switch\">\n  <input type=\"checkbox\"\n         class=\"focus-input\"\n         id=\"checkbox-switch-{{ fieldController.field }}\"\n         name=\"value\"\n         ng-disabled=\"fieldController.state.isBusy\"\n         title=\"{{ fieldController.editTitle }}\"\n         ng-model=\"fieldController.writeValue\" />\n  <label for=\"checkbox-switch-{{ fieldController.field }}\" title=\"{{ fieldController.editTitle }}\"></label>\n</div>\n") }]);

/***/ },
/* 269 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/date.html', "<inplace-editor-date></inplace-editor-date>\n") }]);

/***/ },
/* 270 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/daterange.html', "<inplace-editor-date-range></inplace-edit-date-range>\n") }]);

/***/ },
/* 271 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/dropdown.html', "<inplace-editor-dropdown></inplace-editor-dropdown>\n") }]);

/***/ },
/* 272 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/duration.html', "<inplace-editor-duration></inplace-editor-duration>\n") }]);

/***/ },
/* 273 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/float.html', "<input class=\"focus-input inplace-edit--text-field\"\n       name=\"value\"\n       type=\"number\"\n       step=\"0.01\"\n       ng-disabled=\"fieldController.state.isBusy\"\n       ng-required=\"editPaneController.isRequired\"\n       title=\"{{ fieldController.editTitle }}\"\n       ng-model=\"fieldController.writeValue\" />\n") }]);

/***/ },
/* 274 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/integer.html', "<input class=\"focus-input inplace-edit--text-field\"\n       name=\"value\"\n       type=\"number\"\n       ng-disabled=\"fieldController.state.isBusy\"\n       ng-required=\"editPaneController.isRequired\"\n       title=\"{{ fieldController.editTitle }}\"\n       ng-model=\"fieldController.writeValue\" />\n") }]);

/***/ },
/* 275 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/text.html', "<input class=\"focus-input inplace-edit--text-field\"\n       name=\"value\"\n       type=\"text\"\n       ng-disabled=\"fieldController.state.isBusy\"\n       ng-required=\"editPaneController.isRequired\"\n       title=\"{{ fieldController.editTitle }}\"\n       ng-model=\"fieldController.writeValue\" />\n") }]);

/***/ },
/* 276 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/textarea.html', "<textarea\n          class=\"focus-input inplace-edit--textarea\"\n          name=\"value\"\n          ng-disabled=\"fieldController.state.isBusy\"\n          ng-required=\"editPaneController.isRequired\"\n          ng-model=\"fieldController.writeValue.raw\"\n          title=\"{{ fieldController.editTitle }}\">\n</textarea>\n") }]);

/***/ },
/* 277 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/inplace_editor/editable/wiki_textarea.html', "<inplace-editor-wiki-textarea></inplace-editor-wiki-textarea>\n") }]);

/***/ },
/* 278 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/modal_loading.html', "<div ng-if=\"isLoading\"\n     id=\"ajax-indicator\">\n  <span>{{ I18n.t('js.label_loading') }}</span>\n</div>\n") }]);

/***/ },
/* 279 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/notification-box.html', "<div class=\"notification-box{{' -' + content.type}}\">\n  <div class=\"notification-box--content\">\n    <p>{{content.message}}</p>\n    <div data-ng-switch=\"content.type\" data-ng-if=\"typeable()\">\n      <div data-ng-switch-when=\"upload\">\n        <div data-ng-show=\"canBeHidden()\">\n          <a data-ng-click=\"show = true\" data-ng-hide=\"show\">\n            <i class=\"icon-arrow-right5\"></i>\n          </a>\n          <a data-ng-click=\"show = false\" data-ng-show=\"show\">\n            <i class=\"icon-arrow-right5-2\"></i>\n          </a>\n          <span>\n            {{::I18n.t('js.label_upload_counter', { done: uploadCount, count: content.uploads.length})}}\n          </span>\n        </div>\n        <div data-ng-show=\"show || !canBeHidden()\">\n          <ul class=\"notification-box--uploads\" data-ng-show=\"content.uploads.length > 0\">\n            <upload-progress data-upload=\"upload\" data-ng-repeat=\"upload in content.uploads\"></upload-progress>\n          </ul>\n        </div>\n      </div>\n      <div data-ng-switch-when=\"success\">\n        <!-- \"create another\" button -->\n      </div>\n      <div data-ng-switch-when=\"error\">\n        <ul class=\"notification-box--errors\">\n          <li data-ng-repeat=\"error in content.errors\">{{error}}</li>\n        </ul>\n        <!-- \"continue editing\" button -->\n      </div>\n    </div>\n  </div>\n  <a data-ng-click=\"remove()\" data-ng-if=\"removable()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\" class=\"notification-box--close icon-context icon-close2\"></a>\n</div>\n") }]);

/***/ },
/* 280 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/notifications.html', "<div class=\"notification-box--wrapper\">\n  <div class=\"notification-box--casing\">\n    <notification-box data-content=\"notification\" data-ng-repeat=\"notification in stack\"></notification-box>\n  </div>\n</div>\n") }]);

/***/ },
/* 281 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/progress_bar.html', "<span>\n  <span ng-style=\"{width: width}\" class=\"progress-bar\">\n    <span ng-style=\"{width: progressInPercent + '%'}\" class=\"inner-progress closed\"></span>\n    <span style=\"width: 0%\" class=\"inner-progress done\"></span>\n  </span>\n  <span class=\"progress-bar-legend\">{{ I18n.t('js.label_total_progress', { percent: progressInPercent || 0 }) }}</span>\n</span>\n") }]);

/***/ },
/* 282 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/selectable_title.html', "<div class=\"title-container\">\n  <div class=\"text\">\n    <h2 title=\"{{ selectedTitle }}\">\n      <span has-dropdown-menu target=\"QuerySelectDropdownMenu\"\n        locals=\"selectedTitle,groups,transitionMethod\">\n        <accessible-by-keyboard>\n          {{ selectedTitle | characters:50 }}<i class=\"icon-pulldown-arrow1 icon-button\"></i>\n        </accessible-by-keyboard>\n      </span>\n    </h2>\n  </div>\n</div>\n") }]);

/***/ },
/* 283 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/sort_link.html', "<a href=\"\" ng-click=\"sort()\" ng-transclude class=\"sort\" ng-class=\"sortDirection\" title=\"{{sortTitle}}\"></a>\n") }]);

/***/ },
/* 284 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/table_pagination.html', "<div class=\"pagination\">\n  <nav class=\"pagination--pages\">\n    <ul class=\"pagination--items\">\n\n      <li ng-show=\"paginationOptions.page != 1\" class=\"pagination--item\">\n        <a ng-click=\"showPage(paginationOptions.page - 1)\"\n           rel=\"prev start\"\n           href=\"\">{{ I18n.t('js.label_previous') }}\n        </a>\n      </li>\n\n      <li ng-if=\"prePageNumbers.length\" ng-repeat=\"pageNumber in prePageNumbers\"\n        class=\"pagination--item\">\n        <a ng-click=\"showPage(pageNumber)\"\n           rel=\"next\"\n           href=\"\">{{ pageNumber }}</a>\n      </li>\n      <li ng-if=\"prePageNumbers.length\" class=\"pagination--space\">…</li>\n\n      <li ng-if=\"pageNumbers.length > 1\"\n          ng-repeat=\"pageNumber in pageNumbers\"\n          ng-class=\"{ '-current': pageNumber == paginationOptions.page }\"\n          class=\"pagination--item\">\n        <em ng-if=\"pageNumber == paginationOptions.page\">{{ pageNumber }}</em>\n        <a ng-if=\"pageNumber != paginationOptions.page\"\n           ng-click=\"showPage(pageNumber)\"\n           rel=\"next\"\n           href=\"\">{{ pageNumber }}</a>\n      </li>\n\n      <li ng-if=\"postPageNumbers.length\" class=\"pagination--space\">…</li>\n\n      <li ng-if=\"postPageNumbers\" ng-repeat=\"pageNumber in postPageNumbers\" class=\"pagination--item\">\n        <a ng-click=\"showPage(pageNumber)\"\n           rel=\"next\"\n           href=\"\">{{ pageNumber }}</a>\n      </li>\n      <li ng-show=\"totalEntries && paginationOptions.page < pageNumbers[pageNumbers.length - 1]\"\n        class=\"pagination--item\">\n        <a ng-click=\"showPage(paginationOptions.page + 1)\"\n           rel=\"next\"\n           class=\"pagination--next-link\"\n           href=\"\">{{ I18n.t('js.label_next') }}\n        </a>\n      </li>\n\n      <li class=\"pagination--range\" title=\"{{ currentRange }}\">{{ currentRange }}</li>\n    </ul>\n  </nav>\n\n  <div class=\"pagination--options\">\n    <ul class=\"pagination--items\">\n      <li class=\"pagination--label\" title=\"{{ I18n.t('js.label_per_page') }}\">{{ I18n.t('js.label_per_page') }}</li>\n\n      <li ng-repeat=\"perPageOption in paginationOptions.perPageOptions\"\n          ng-class=\"{ '-current': perPageOption == paginationOptions.perPage }\"\n          class=\"pagination--item\">\n\n       <span ng-if=\"perPageOption != paginationOptions.perPage\">\n         <a href=\"\" ng-click=\"selectPerPage(perPageOption)\">{{ perPageOption }}</a>\n       </span>\n\n       <span ng-if=\"perPageOption == paginationOptions.perPage\">{{ perPageOption }}</span>\n      </li>\n    </ul>\n  </div>\n</div>\n") }]);

/***/ },
/* 285 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/toggled_multiselect.html', "<span class=\"inline-label\">\n  <select filter-value-select\n          ng-if=\"!isMultiselect\"\n          name=\"v[{{name}}][]\"\n          ng-model=\"$parent.values\"\n          ng-disabled=\"disabled\"\n          id=\"values-{{name}}\"\n          class=\"form--select -small\"\n          style=\"vertical-align: top;\"\n          require>\n    <option ng-repeat=\"value in availableOptions\" value=\"{{ value[1] }}\" ng-selected=\"isSelected(value[1])\" label=\"{{ value[0] }}\">{{ value[0] }}</option>\n  </select>\n\n  <select multiple\n          filter-value-select\n          ng-if=\"isMultiselect\"\n          name=\"v[{{name}}][]\"\n          ng-model=\"$parent.values\"\n          ng-disabled=\"disabled\"\n          id=\"values-{{name}}\"\n          class=\"form--select -small\"\n          style=\"vertical-align: top;\"\n          require>\n    <option ng-repeat=\"value in availableOptions\" value=\"{{ value[1] }}\" ng-selected=\"isSelected(value[1])\" label=\"{{ value[0] }}\">{{ value[0] }}</option>\n  </select>\n\n  <a href class=\"form-label no-decoration-on-hover -transparent\" ng-click=\"toggleMultiselect()\">\n    <icon-wrapper icon-name=\"minus2\"\n                  icon-title=\"{{I18n.t('js.work_packages.label_disable_multi_select')}}\" ng-if=\"isMultiselect\"\n                  css-class=\"icon4\">\n    </icon-wrapper>\n\n    <icon-wrapper icon-name=\"add\"\n                  icon-title=\"{{I18n.t('js.work_packages.label_enable_multi_select')}}\" ng-if=\"!isMultiselect\"\n                  css-class=\"icon4\">\n    </icon-wrapper>\n  </a>\n\n</div>\n") }]);

/***/ },
/* 286 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/upload-progress.html', "<li>\n  <span class=\"filename\">{{file}}</span>\n  <progress data-ng-hide=\"completed\" max=\"100\" value=\"{{value}}\">{{value}}%</progress>\n  <span class=\"upload-completed\" data-ng-show=\"completed || error\">\n    <i class=\"icon-close\" data-ng-show=\"error\"></i>\n    <i class=\"icon-yes\" data-ng-show=\"completed\"></i>\n  </span>\n</li>\n") }]);

/***/ },
/* 287 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/user_field.html', "<span class=\"user-avatar--container\">\n  <img class=\"user-avatar--avatar\"\n       ng-if=\"userName && user.props.avatar\"\n       ng-src=\"{{user.props.avatar}}\" alt=\"Avatar\" title=\"{{userName}}\" />\n  <span class=\"user-avatar--user-with-role\">\n    <span class=\"user-avatar--user\" ng-if=\"userName\">\n      <a ng-if=\"user.props.subtype !== 'Group'\" ng-href=\"{{ userPath(user.props.id) }}\" ng-bind=\"user.props.name\"\n         class=\"user-field-user-link\"/>\n      <span ng-if=\"user.props.subtype == 'Group'\" ng-bind=\"user.props.name\" class=\"user-field-user-link\"/>\n    </span>\n    <span class=\"user-avatar--user\" ng-if=\"!userName\"> - </span>\n    <span class=\"user-avatar--role\" ng-if=\"user.props.role\" ng-bind=\"user.props.role\"/>\n  </span>\n</span>\n") }]);

/***/ },
/* 288 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/components/zoom_slider.html', "<label for=\"{{ ::ctrl.sliderId }}\" class=\"hidden-for-sighted\"\n  ng-bind=\"::labelText\"></label>\n<input type=\"range\" id=\"{{ ::ctrl.sliderId }}\"\n  min=\"{{ ::ctrl.minValue }}\" max=\"{{ ::ctrl.maxValue }}\"\n  value=\"{{ ctrl.selectedScaleIndex + 1 }}\">\n") }]);

/***/ },
/* 289 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/layout/menu_item.html', "<li>\n  <a ng-href=\"{{path}}\"\n     class=\"icon2 icon-pin ellipsis\"\n     object-id=\"objectId\"\n     ng-class=\"[type, normalizedTitle]\"\n     data-ui-route=\"\"\n     lang=\"{{lang || 'en'}}\"\n     title=\"{{title}}\"\n     ng-bind=\"title\"></a>\n</li>\n") }]);

/***/ },
/* 290 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/timelines/timeline_column_data.html', "<span class=\"tl-historical\" ng-if=\"historicalDataDiffers\">\n  <span ng-bind=\"historicalData\" class=\"historical-data\"></span>\n  <a href=\"javascript://\" title=\"{{labelTimelineChanged}}\"\n     ng-class=\"[\n       'icon',\n       'tl-icon-' + (isDateColumn && historicalDateKind || 'changed'),\n       'icon-' + (isDateColumn && 'time' || 'arrow-left-right')\n     ]\"></a>\n  <br/>\n</span>\n\n<span ng-class=\"[\n  'tl-column',\n  isDateColumn && 'tl-current',\n  isDateColumn && historicalDataDiffers && 'tl-' + historicalDateKind\n]\" ng-bind=\"columnData\"></span>\n") }]);

/***/ },
/* 291 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/timelines/timeline_table.html', "<table class=\"tl-main-table\">\n  <thead>\n    <tr>\n      <th class=\"tl-first-column\" ng-style=\"{height: height}\">{{I18n.t('js.timelines.filter.column.name')}}</th>\n      <th timeline-column-name\n          ng-repeat=\"columnName in columns\"\n          column-name=\"columnName\"\n          locale-prefix=\"js.timelines.filter.column\"\n          custom-fields=\"timeline.custom_fields\"></th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr timeline-grouping-label\n        ng-repeat-start=\"row in rows\"\n        ng-if=\"isGrouping\"\n        ng-show=\"showGroupingLabel()\">\n      <td class=\"tl-grouping\" colspan=\"{{columns.length + 1}}\">\n        <span class=\"tl-word-ellipsis\">{{row.firstLevelGroupingName}}</span>\n      </td>\n    </tr>\n\n    <tr timeline-table-row\n        ng-repeat-end\n        ng-class=\"{\n          'tl-first-row': $first,\n          'tl-last-row': $last,\n          'tl-project-row': rowObjectType === 'Project'\n        }\"\n        ng-if=\"!(hideTreeRoot && $first || rowObjectType === 'Project' && excludeEmpty && !row.childNodes)\"\n        ng-show=\"rowObjectType === 'Project' && row.level === 1 || (row.ancestors | ancestorsExpanded)\">\n\n      <!-- tree node expansion toggle -->\n\n      <td ng-class=\"[\n            'tl-first-column',\n            'tl-indent-' + indent,\n            row.childNodes.length > 0 && (row.isExpanded() && 'tl-expanded' || 'tl-collapsed')\n          ]\">\n        <a ng-class=\"['icon-context', (row.isExpanded() && 'icon-pulldown-arrow1' || 'icon-pulldown-arrow4')]\" ng-click=\"toggleRowExpansion(row)\" ng-if=\"row.childNodes.length > 0\"></a>\n\n        <span class=\"tl-word-ellipsis\">\n          <span ng-if=\"changeDetected\">\n            <a title=\"{{I18n.t('js.timelines.change')}}\"\n               ng-class=\"{\n                 'icon icon-added': rowObject.isNewlyAdded(),\n                 'icon icon-delete2': rowObject.isDeleted(),\n                 'icon icon-arrow-left-right': !rowObject.isDeleted() && !rowObject.isNewlyAdded()\n               }\" />\n          </span>\n\n          <span>\n            <a href=\"{{row.url}}\" modal title=\"{{row.text}}\" target=\"row.url\" ng-class=\"{'tl-discreet-link': true, 'tl-project': rowObjectType === 'Project'}\">{{ row.text | characters:40 }}</a>\n          </span>\n\n          <div ng-show=\"row.lastVisible\" class=\"tl-invisible\" style=\"height: 15px; width: 15px;\"></div>\n        </span>\n      </td>\n\n      <td timeline-column-data\n          ng-repeat=\"columnName in columns\"\n          column-name=\"columnName\"\n          row-object=\"rowObject\"\n          timeline=\"timeline\"\n          custom-fields=\"timeline.custom_fields\">\n      </td>\n    </tr>\n  </tbody>\n\n</table>\n") }]);

/***/ },
/* 292 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/timelines/timeline_table_container.html', "<div ng-class=\"{timeline: !warning, 'tl-under-construction': underConstruction}\" >\n  <div class=\"tl-left\">\n    <div class=\"tl-left-top tl-decoration\"></div>\n    <div class=\"tl-left-main\">\n      <timeline-table/>\n    </div>\n  </div>\n  <div class=\"tl-right\">\n    <div class=\"tl-right-top tl-decoration\"></div>\n    <div class=\"tl-right-main\"></div>\n  </div>\n  <div class=\"tl-scrollcontainer\">\n    <!--div class=\"tl-decoration\"></div-->\n    <div class=\"tl-chart\" ng-hide=\"timeline.options.hide_chart\"></div>\n  </div>\n  <div class=\"tl-tooltip fade above in\">\n    <div class=\"tl-tooltip-inner\"></div>\n    <div class=\"tl-tooltip-arrow\"></div>\n  </div>\n</div>\n") }]);

/***/ },
/* 293 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/timelines/toolbar.html', "<div class=\"tl-toolbar legacy-actions--inline-label\" ng-show=\"!warning\">\n  <div class=\"tl-toolbar-container\">\n    <a href=\"javascript://\" ng-if='ctrl.timeline.USE_MODALS' ng-click=\"ctrl.timeline.addPlanningElement()\" title=\"{{I18n.t('js.timelines.new_work_package')}}\" class=\"icon icon-add\">\n      <span class=\"hidden-for-sighted\">{{ I18n.t('js.timelines.new_work_package') }}</span>\n    </a>\n  </div>\n\n  <div class=\"tl-toolbar-container\">\n    <a href=\"javascript://\" title=\"{{ I18n.t('js.timelines.zoom.out') }}\" class=\"icon icon-zoom-out\" ng-click=\"ctrl.decreaseZoom()\"></a>\n  </div>\n\n  <div class=\"tl-toolbar-container\" style=\"width: 100px; height: 20px;\">\n    <zoom-slider scales=\"::ctrl.timeline.ZOOM_SCALES\"\n      selected-scale=\"ctrl.currentScale\"></zoom-slider>\n  </div>\n\n  <div class=\"tl-toolbar-container\">\n    <a href=\"javascript://\" title=\"{{ I18n.t('js.timelines.zoom.in') }}\" class=\"icon icon-zoom-in\" ng-click=\"ctrl.increaseZoom()\"></a>\n  </div>\n\n\n  <div class=\"tl-toolbar-container\">\n    <form>\n      <label for=\"tl-toolbar-zooms\" class=\"hidden-for-sighted\">{{ I18n.t('js.tl_toolbar.zooms') }}</label>\n      <select id=\"tl-toolbar-zooms\" name=\"zooms\" ng-model=\"ctrl.currentScale\" ng-options=\"I18n.t('js.' + ctrl.timeline.ZOOM_CONFIGURATIONS[scale].name) for scale in ctrl.timeline.ZOOM_SCALES\">\n      </select>\n    </form>\n  </div>\n\n  <div class=\"tl-toolbar-container\">\n    <a href=\"javascript://\" title=\"{{ I18n.t('js.timelines.outline') }}\" class=\"icon icon-outline\" ng-click=\"ctrl.resetOutline()\"></a>\n  </div>\n\n  <div class=\"tl-toolbar-container\">\n    <form>\n      <label for=\"tl-toolbar-outlines\" class=\"hidden-for-sighted\">{{ I18n.t('js.tl_toolbar.outlines') }}</label>\n      <select id=\"tl-toolbar-outlines\" name=\"outlines\" ng-model=\"ctrl.currentOutlineLevel\" ng-options=\"I18n.t('js.' + ctrl.timeline.OUTLINE_CONFIGURATIONS[level].name) for level in ctrl.timeline.OUTLINE_LEVELS\">\n      </select>\n    </form>\n  </div>\n</div>\n") }]);

/***/ },
/* 294 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages.html', "<div id=\"work-packages-index\">\n\n  <div ui-view class=\"work-packages--page-container\"></div>\n\n</div>\n") }]);

/***/ },
/* 295 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages.list.details.html', "<div id=\"tabs\">\n  <ul class=\"tabrow\">\n    <!-- The hrefs with empty URLs are necessary for IE10 to focus these links\n    properly. Thus, don't remove the hrefs or the empty URLs! -->\n    <li ui-sref=\"work-packages.list.details.overview({})\"\n        ui-sref-active=\"selected\">\n      <a href=\"\" ng-bind=\"I18n.t('js.work_packages.tabs.overview')\"/>\n    </li>\n    <li ui-sref=\"work-packages.list.details.activity({})\"\n        ui-sref-active=\"selected\">\n      <a href=\"\" ng-bind=\"I18n.t('js.work_packages.tabs.activity')\"/>\n    </li>\n    <li ui-sref=\"work-packages.list.details.relations({})\"\n        ui-sref-active=\"selected\">\n      <a href=\"\" ng-bind=\"I18n.t('js.work_packages.tabs.relations')\"/>\n    </li>\n    <li ng-if=\"canViewWorkPackageWatchers()\"\n        ui-sref=\"work-packages.list.details.watchers({})\"\n        ui-sref-active=\"selected\">\n      <a href=\"\" ng-bind=\"I18n.t('js.work_packages.tabs.watchers')\"/>\n    </li>\n  </ul>\n</div>\n\n<div class=\"work-packages--details-content\">\n  <span class=\"hidden-for-sighted\" tabindex=\"-1\" focus ng-bind=\"focusAnchorLabel\">\n  </span>\n\n  <div class=\"work-packages--details--title\">\n    <work-package-field field=\"'subject'\"></work-package-field>\n  </div>\n\n  <span class=\"subtitle\">\n    <accessible-by-keyboard ng-if=\"toggleWatchLink\" execute=\"toggleWatch()\"\n      link-class=\"icon-control {{isWatched ? '-active' : ''}}\">\n      <span class=\"icon-control--icon icon-star1\"\n        title=\"{{isWatched ? I18n.t('js.label_unwatch_work_package') : I18n.t('js.label_watch_work_package')}}\">\n        <span class=\"hidden-for-sighted\"\n          ng-bind=\"isWatched ? I18n.t('js.label_unwatch_work_package') : I18n.t('js.label_watch_work_package')\">\n        </span>\n      </span>\n    </accessible-by-keyboard>\n    <a href=\"{{ showStaticPagePath }}\">{{ type.props.name }} #{{ workPackage.props.id }}</a>\n    <span ng-bind=\"I18n.t('js.label_added_by')\"/>\n      <a ng-if=\"authorActive\" ng-href=\"{{ authorPath }}\" ng-bind=\"author.props.name\"/>\n      <span ng-if=\"!authorActive\">{{ author.props.name }} </span>\n      <span ng-bind=\"I18n.t('js.label_on')\"/> <op-date date-value=\"workPackage.props.createdAt\"></op-date>.\n    <span ng-bind=\"I18n.t('js.label_last_updated_on')\"/>\n      <op-date date-value=\"workPackage.props.updatedAt\"></op-date>.\n  </span>\n\n  <div class=\"work-package-details-tab\" ui-view></div>\n\n</div>\n\n<div class=\"bottom-toolbar\">\n  <work-package-details-toolbar work-package='workPackage'>\n  </work-package-details-toolbar>\n</div>\n") }]);

/***/ },
/* 296 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages.list.html', "<div class=\"toolbar-container\">\n  <div toolbar class=\"toolbar\">\n    <selectable-title focus\n                      selected-title=\"selectedTitle\"\n                      groups=\"groups\"\n                      transition-method=\"loadQuery\">\n    </selectable-title>\n\n    <ul class=\"toolbar-items\">\n      <li class=\"toolbar-item\">\n        <button class=\"button -alt-highlight\"\n                has-dropdown-menu\n                target=\"TasksDropdownMenu\"\n                locals=\"availableTypes,projectIdentifier\"\n                ng-disabled=\"cannot('work_package', 'create')\">\n          <i class=\"button--icon icon-add\"></i>\n          <span class=\"button--text\" ng-bind=\"::I18n.t('js.toolbar.unselected_title')\"></span>\n          <i class=\"button--dropdown-indicator\"></i>\n        </button>\n      </li>\n      <li class=\"toolbar-item\">\n        <label for=\"work-packages-filter-toggle-button\" class=\"hidden-for-sighted\">\n          {{ getToggleActionLabel(showFiltersOptions) + ' ' + I18n.t('js.button_filter') }}\n        </label>\n        <button id=\"work-packages-filter-toggle-button\"\n                class=\"button\"\n                title=\"{{ getToggleActionLabel(showFiltersOptions) + ' ' + I18n.t('js.button_filter') }}\"\n                ng-click=\"toggleShowFilterOptions()\"\n                ng-class=\"{ '-active': showFiltersOptions }\">\n          <i class=\"icon-filter-big button--icon\"></i>\n          <span class=\"button--text\" ng-bind=\"::I18n.t('js.toolbar.filter')\"></span>\n          <span class=\"badge -secondary\">{{ getFilterCount() }}</span>\n        </button>\n      </li>\n      <li class=\"toolbar-item\" feature-flag=\"detailsView\">\n        <ul id=\"work-packages-view-mode-selection\" class=\"toolbar-button-group\">\n          <li>\n            <label for=\"work-packages-list-view-button\" class=\"hidden-for-sighted\">\n              {{ getActivationActionLabel(isDetailsViewActive()) + ' ' + I18n.t('js.button_list_view') }}\n            </label>\n            <button id=\"work-packages-list-view-button\"\n                    accesskey=\"{{ !isDetailsViewActive() ? '' : '8' }}\"\n                    class=\"button\"\n                    title=\"{{ getActivationActionLabel(isDetailsViewActive()) + ' ' + I18n.t('js.button_list_view') }}\"\n                    ng-click=\"closeDetailsView()\"\n                    ng-class=\"{ '-active': !isDetailsViewActive() }\">\n              <i class=\"icon-table-view button--icon\"></i>\n            </button>\n          </li>\n          <li feature-flag=\"detailsView\">\n            <label for=\"work-packages-details-view-button\" class=\"hidden-for-sighted\">\n              {{ getActivationActionLabel(!isDetailsViewActive()) + ' ' + I18n.t('js.button_details_view') }}\n            </label>\n            <button class=\"hide\"\n                    ng-click=\"openOverviewTab()\"\n                    accesskey=\"{{ isDetailsViewActive() ? '' : '8' }}\"></button>\n            <button id=\"work-packages-details-view-button\"\n                    class=\"button\"\n                    title=\"{{ getActivationActionLabel(!isDetailsViewActive()) + ' ' + I18n.t('js.button_details_view') }}\"\n                    ng-class=\"{ '-active': isDetailsViewActive() }\"\n                    ng-click=\"openLatestTab()\">\n              <i class=\"icon-table-detail-view button--icon\"></i>\n            </button>\n          </li>\n        </ul>\n      </li>\n      <li class=\"toolbar-item\">\n        <label for=\"work-packages-settings-button\" class=\"hidden-for-sighted\">\n          {{ I18n.t('js.button_settings') }}\n        </label>\n        <button id=\"work-packages-settings-button\"\n                title=\"{{ I18n.t('js.button_settings') }}\"\n                class=\"button last work-packages-settings-button\"\n                has-dropdown-menu\n                target=\"SettingsDropdownMenu\"\n                locals=\"query\">\n          <i class=\"button--icon icon-settings\"></i>\n          <i class=\"button--dropdown-indicator\"></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n</div>\n\n<div class=\"work-packages--filters-optional-container\" ng-show=\"showFiltersOptions\">\n  <div query-form id=\"query_form_content\" class=\"hide-when-print\">\n    <query-filters></query-filters>\n  </div>\n</div>\n\n<back-url></back-url>\n\n\n<div class=\"work-packages--split-view\" cg-busy=\"[settingUpPage,refreshWorkPackages]\">\n  <div class=\"work-packages--list\">\n    <div class=\"work-packages--list-table-area\">\n      <work-packages-table ng-if=\"rows && columns\"\n                           project-identifier=\"projectIdentifier\"\n                           columns=\"columns\"\n                           rows=\"rows\"\n                           query=\"query\"\n                           group-by=\"query.groupBy\"\n                           group-by-column=\"groupByColumn\"\n                           count-by-group=\"workPackageCountByGroup\"\n                           display-sums=\"query.displaySums\"\n                           total-sums=\"totalSums\"\n                           group-sums=\"groupSums\"\n                           activation-callback=\"showWorkPackageDetails(id, force)\">\n      </work-packages-table>\n    </div>\n    <div class=\"work-packages--list-pagination-area\">\n      <table-pagination total-entries=\"totalEntries\">\n      </table-pagination>\n    </div>\n    <modal-loading>\n    </modal-loading>\n  </div>\n  <div class=\"work-packages--details\" ui-view ng-show=\"workPackage\"\n    feature-flag=\"detailsView\"></div>\n</div>\n") }]);

/***/ },
/* 297 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages.list.new.html', "<div cg-busy=\"vm.loaderPromise\" class=\"work-packages--details-content -create-mode\">\n  <div ng-if=\"vm.workPackage\">\n    <h2>{{ ::I18n.t('js.work_packages.create.header') }}</h2>\n\n    <div class=\"work-packages--create--title\">\n      <work-package-field field=\"'subject'\"></work-package-field>\n    </div>\n\n    <div class=\"attributes-group--header\">\n      <div class=\"attributes-group--header-container\">\n        <h3 class=\"attributes-group--header-text\">\n          {{ ::I18n.t('js.label_description') }}\n        </h3>\n      </div>\n    </div>\n\n    <div class=\"single-attribute wiki\">\n      <work-package-field field=\"'description'\"></work-package-field>\n    </div>\n\n    <div ng-repeat=\"group in vm.groupedFields\" ng-hide=\"vm.hideEmptyFields && vm.isGroupHideable(vm.groupedFields, group.groupName, vm.workPackage)\" class=\"attributes-group\">\n\n      <div class=\"attributes-group--header\">\n        <div class=\"attributes-group--header-container\">\n          <h3 class=\"attributes-group--header-text\"\n            ng-bind=\"::I18n.t('js.work_packages.property_groups.' + group.groupName)\"></h3>\n        </div>\n        <div class=\"attributes-group--header-toggle\">\n          <panel-expander tabindex=\"-1\" ng-if=\"vm.showToggleButton() && $first\"\n            collapsed=\"vm.hideEmptyFields\"\n            expand-text=\"{{ ::I18n.t('js.label_show_attributes') }}\"\n            collapse-text=\"{{ ::I18n.t('js.label_hide_attributes') }}\">\n          </panel-expander>\n        </div>\n      </div>\n\n      <dl class=\"attributes-key-value\">\n        <dt\n          ng-hide=\"vm.hideEmptyFields && vm.isFieldHideable(vm.workPackage, field)\"\n          ng-if=\"vm.isSpecified(vm.workPackage, field) && vm.isEditable(vm.workPackage, field)\"\n          ng-repeat-start=\"field in group.attributes\" class=\"attributes-key-value--key\">\n          {{vm.getLabel(vm.workPackage, field)}}\n          <span class=\"required\" ng-if=\"vm.hasNiceStar(vm.workPackage, field)\"> *</span>\n        </dt>\n        <dd\n          ng-hide=\"vm.hideEmptyFields && vm.isFieldHideable(vm.workPackage, field)\"\n          ng-if=\"vm.isSpecified(vm.workPackage, field) && vm.isEditable(vm.workPackage, field)\"\n          ng-repeat-end\n          class=\"attributes-key-value--value-container\">\n          <work-package-field field=\"field\"></work-package-field>\n        </dd>\n      </dl>\n    </div>\n    <work-package-attachments work-package=\"vm.workPackage\" data-ng-show=\"!vm.hideEmptyFields\"></work-package-attachments>\n  </div>\n</div>\n\n<div class=\"work-packages--details-toolbar\">\n  <button class=\"button\" ng-click=\"vm.submit()\">\n    <i class=\"icon-yes\"></i>\n    <span class=\"button--text\" ng-bind=\"::I18n.t('js.inplace.button_save_all')\"></span>\n  </button>\n  <button class=\"button\" ng-click=\"vm.submit(true)\">\n    <i class=\"icon-yes\"></i>\n    <i class=\"icon-mail\"></i>\n    <span class=\"button--text\" ng-bind=\"::I18n.t('js.inplace.button_save_and_send_all')\"></span>\n  </button>\n  <button class=\"button\" ng-click=\"vm.cancel()\">\n    <i class=\"icon-close\"></i>\n    <span class=\"button--text\" ng-bind=\"::I18n.t('js.inplace.button_cancel_all')\"></span>\n  </button>\n</div>\n") }]);

/***/ },
/* 298 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/activities/_entry.html', "<div ng-switch=\"activityType\">\n  <revision-activity work-package=\"workPackage\"\n                 activity=\"activity\"\n                 activity-no=\"activityNo\"\n                 ng-switch-when=\"Revision\">\n  </revision-activity>\n  <user-activity work-package=\"workPackage\"\n            activity=\"activity\"\n            activity-no=\"activityNo\"\n            is-initial=\"isInitial\"\n            autocomplete-path=\"{{ autocompletePath }}\"\n            input-element-id=\"'add-comment-text'\"\n            ng-switch-default>\n  </user-activity>\n</div>\n") }]);

/***/ },
/* 299 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/activities/_revision.html', "<div class=\"work-package-details-activities-activity-contents\">\n  <div class=\"comments-number\">\n    <span ui-sref=\"work-packages.list.details.activity.details({ activity_no: activityNo })\">\n      <a name=\"{{ activityNo }}\"\n         ng-bind=\"'#' + activityNo\"\n         ng-href=\"#{{ activityNo }}\"></a>\n    </span>\n  </div>\n  <div ng-if=\"userAvatar\">\n    <img class=\"avatar\" ng-src=\"{{ userAvatar }}\" alt=\"Avatar\" title=\"{{userName}}\" />\n  </div>\n  <span class=\"user\" ng-if=\"userActive\"><a ng-href=\"{{ userPath(userId) }}\" name=\"{{ currentAnchor }}\" ng-bind=\"userName\"></a></span>\n  <span class=\"user\" ng-if=\"!userActive\">{{ userName }}</span>\n  <span class=\"revision-activity--revision-link date\"></span>\n  <span class=\"user-comment wiki\">\n    <span class=\"message\" ng-bind-html=\"message\"/>\n  </span>\n</div>\n") }]);

/***/ },
/* 300 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/activities/_user.html', "<div class=\"work-package-details-activities-activity-contents\"\n     ng-mouseover=\"showActions()\"\n     ng-mouseout=\"hideActions()\">\n  <div class=\"comments-number\">\n    <span ui-sref=\"work-packages.list.details.activity.details({ activity_no: activityNo })\">\n      <a name=\"{{ activityNo }}\"\n         ng-bind=\"'#' + activityNo\"\n         href=\"#{{ activityNo }}\"></a>\n    </span>\n    <div class=\"comments-icons\"\n         ng-show=\"activity.props._type == 'Activity::Comment' && (inFocus || accessibilityModeEnabled)\">\n      <accessible-by-keyboard ng-if=\"userCanQuote\" execute=\"quoteComment()\">\n        <icon-wrapper icon-name=\"quote\" icon-title=\"{{ I18n.t('js.wiki_formatting.quote') }}\" css-class=\"action-icon\">\n        </icon-wrapper>\n      </accessible-by-keyboard>\n      <accessible-by-keyboard ng-if=\"userCanEdit\" execute=\"editComment()\">\n        <icon-wrapper icon-name=\"edit\" icon-title=\"{{ I18n.t('js.button_edit') }}\" css-class=\"action-icon\">\n        </icon-wrapper>\n      </accessible-by-keyboard>\n    </div>\n  </div>\n  <div ng-if=\"userAvatar\">\n    <img class=\"avatar\" ng-src=\"{{ userAvatar }}\" alt=\"Avatar\" title=\"{{userName}}\" />\n  </div>\n  <span class=\"user\" ng-if=\"userActive\"><a ng-href=\"{{ userPath(userId) }}\" name=\"{{ currentAnchor }}\" ng-bind=\"userName\"></a></span>\n  <span class=\"user\" ng-if=\"!userActive\">{{ userName }}</span>\n  <span class=\"date\">{{ isInitial ? I18n.t('js.label_created_on') : I18n.t('js.label_updated_on') }} <op-date-time date-time-value=\"activity.props.createdAt\" /></span>\n  <span class=\"user-comment wiki\">\n    <div ng-if=\"inEdit\">\n      <form name=\"editCommentForm\">\n        <div>\n          <textarea id=\"edit-comment-text\"\n                    name=\"edit_comment_text\"\n                    class=\"add-comment-text\"\n                    ng-model=\"activity.props.comment.raw\"\n                    ng-bind-html=\"activity.props.comment.html\"\n                    rows=\"4\"\n                    required>\n          </textarea>\n        </div>\n        <div>\n          <button class=\"button\"\n                  ng-click=\"updateComment()\"\n                  ng-disabled=\"editCommentForm.$invalid\"><i class=\"icon-yes icon-left\"></i>{{ I18n.t('js.button_save') }}\n          </button>\n          <button class=\"button\" ng-disabled=\"commentForm.$invalid\" ng-click=\"cancelEdit()\"><i class=\"icon-close icon-left\"></i>{{ I18n.t('js.button_cancel') }}</button>\n        </div>\n      </form>\n    </div>\n    <span ng-if=\"!inEdit\"\n          class=\"message\"\n          ng-show=\"activity.props._type == 'Activity::Comment'\"\n          ng-bind-html=\"comment\"/>\n    <ul class=\"work-package-details-activities-messages\" ng-if=\"!isInitial\">\n      <li ng-repeat=\"detail in details track by $index\">\n        <span class=\"message\" ng-bind-html=\"detail\"/>\n      </li>\n    </ul>\n  </span>\n</div>\n") }]);

/***/ },
/* 301 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/attachments-edit.html', "<div class=\"work-packages--attachments\">\n  <div class=\"attributes-group--header\">\n    <div class=\"attributes-group--header-container\">\n      <h3 class=\"attributes-group--header-text\">\n        {{ ::I18n.t('js.label_attachments') }}\n      </h3>\n    </div>\n  </div>\n  <div data-ngf-drop\n       data-ng-model=\"files\"\n       data-ng-model-rejected=\"rejectedFiles\"\n       data-ngf-select\n       class=\"work-package--attachments--drop-box\"\n       data-ngf-multiple=\"true\"\n       data-ngf-change=\"instantUpload()\"\n       data-ngf-max-size=\"{{::maximumFileSize}}\">\n    <p class=\"work-package--attachments--label\">{{ ::I18n.t('js.label_drop_files') }}</p>\n    <p class=\"work-package--attachments--hint\">{{ ::I18n.t('js.label_drop_files_hint') }}</p>\n  </div>\n  <div class=\"work-package--attachments--files\"\n       data-ng-show=\"attachments.length > 0\">\n    <div class=\"work-package--details--long-field\">\n      <span class=\"inplace-edit--read\"\n            data-ng-repeat=\"attachment in attachments\">\n        <span class=\"inplace-editing--trigger-container\">\n          <span class=\"inplace-editing--trigger-link\"\n                ng-class=\"{'-focus': focussing(attachment)}\">\n            <span class=\"inplace-editing--container\">\n              <span class=\"inplace-edit--read-value\" >\n                <attachment-icon type=\"attachment.contentType\"></attachment-icon>\n                <a class=\"work-package--attachments--filename\"\n                   data-ng-href=\"{{attachment._links.downloadLocation.href}}\"\n                   download\n                   data-ng-focus=\"focus(attachment)\"\n                   data-ng-blur=\"focus(null)\">\n                  {{::attachment.fileName}}\n                </a>\n                <span class=\"work-package--attachments--filesize\">({{::size(attachment.fileSize)}})</span>\n              </span>\n              <a href=''\n                 class=\"inplace-edit--icon-wrapper\"\n                 data-ng-focus=\"focus(attachment)\"\n                 data-ng-blur=\"focus(null)\"\n                 data-ng-click=\"remove(attachment)\"\n                 data-confirm-popup=\"{{I18n.t('js.text_attachment_destroy_confirmation')}}\">\n\n                <icon-wrapper icon-name=\"delete\"\n                              data-icon-title=\"{{::I18n.t('js.label_remove_file',\n                                                          { fileName: attachment.fileName })}}\">\n                </icon-wrapper>\n              </a>\n            </span>\n          </span>\n        </span>\n      </span>\n    </div>\n  </div>\n</div>\n\n") }]);

/***/ },
/* 302 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/attachments.html', "<div class=\"work-packages--attachments\">\n  <div class=\"attributes-group--header\">\n    <div class=\"attributes-group--header-container\">\n      <h3 class=\"attributes-group--header-text\">\n        {{ ::I18n.t('js.label_attachments') }}\n      </h3>\n    </div>\n  </div>\n  <div data-ngf-drop data-ng-model=\"files\" data-ng-model-rejected=\"rejectedFiles\" data-ngf-select class=\"work-package--attachments--drop-box\"\n       data-ngf-multiple=\"true\" data-ngf-allow-dir=\"true\" data-ngf-keep-distinct data-ngf-max-size=\"{{::maximumFileSize}}\"\n       data-ng-disabled=\"fetchingConfiguration\" data-ngf-keep=\"true\">\n    <p data-ng-hide=\"fetchingConfiguration\" class=\"work-package--attachments--label\">{{ ::I18n.t('js.label_drop_files') }}</p>\n    <p data-ng-hide=\"fetchingConfiguration\" class=\"work-package--attachments--hint\">{{ ::I18n.t('js.label_drop_files_hint') }}</p>\n    <p data-ng-show=\"fetchingConfiguration\" class=\"work-package--attachments--label\">{{ ::I18n.t('js.label_wait') }}</p>\n  </div>\n  <div class=\"work-package--attachments--files\" data-ng-show=\"files.length > 0\">\n    <h4>{{::I18n.t('js.label_files_to_upload')}}</h4>\n    <ul>\n      <li data-ng-repeat=\"file in files\">\n        <attachment-icon type=\"file.type\"></attachment-icon> <span class=\"filename\">{{::file.name}}</span> <span class=\"filesize\">({{::size(file.size)}})</span>\n        <a data-ng-click=\"remove(file)\" class=\"button -with-icon icon-delete -tiny\" title=\"{{::I18n.t('js.label_remove_file')}}\">{{::I18n.t('js.label_remove_file')}}</a>\n      </li>\n    </ul>\n  </div>\n</div>\n") }]);

/***/ },
/* 303 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/field.html', "<div class=\"work-package-field work-packages--details--{{ fieldController.field }}\">\n    <inplace-editor-main-pane>\n      <inplace-editor-display-pane></inplace-editor-display-pane>\n      <inplace-editor-edit-pane ng-if=\"fieldController.isEditable()\"></inplace-editor-edit-pane>\n    </inplace-editor-main-pane>\n</div>\n") }]);

/***/ },
/* 304 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/display/spent_time.html', "<div class=\"spent-time-wrapper\">\n  <span ng-if=\"fieldController.isEmpty()\">{{ displayPaneController.placeholder }}</span>\n  <span ng-if=\"!fieldController.isEmpty()\">\n    <span ng-if=\"customEditorController.isLinkViewable()\">\n      <a href=\"{{ customEditorController.getPath() }}\">\n          {{ displayPaneController.getReadValue() }}\n      </a>\n    </span>\n    <span ng-if=\"!customEditorController.isLinkViewable()\">\n      {{ displayPaneController.getReadValue() }}\n    </span>\n  </span>\n</div>\n") }]);

/***/ },
/* 305 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/display/user.html', "<span class=\"user-avatar--container\">\n  <img class=\"user-avatar--avatar\"\n       ng-if=\"customEditorController.getUserName() && customEditorController.getUser().props.avatar\"\n       ng-src=\"{{customEditorController.getUser().props.avatar}}\" alt=\"Avatar\" title=\"{{customEditorController.getUserName()}}\" />\n  <span class=\"user-avatar--user-with-role\">\n    <span class=\"user-avatar--user\" ng-if=\"customEditorController.getUserName()\">\n      <a ng-if=\"customEditorController.getUser().props.subtype !== 'Group'\" ng-href=\"{{ customEditorController.userPath(customEditorController.getUser().props.id) }}\" ng-bind=\"customEditorController.getUser().props.name\"\n         class=\"user-field-user-link\"/>\n      <span ng-if=\"customEditorController.getUser().props.subtype == 'Group'\" ng-bind=\"customEditorController.getUser().props.name\" class=\"user-field-user-link\"/>\n    </span>\n    <span class=\"user-avatar--user\" ng-if=\"!customEditorController.getUserName()\"> - </span>\n    <span class=\"user-avatar--role\" ng-if=\"customEditorController.getUser().props.role\" ng-bind=\"customEditorController.getUser().props.role\"/>\n  </span>\n</span>\n") }]);

/***/ },
/* 306 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/display/version.html', "<div class=\"version-wrapper\">\n    <span ng-if=\"!displayPaneController.getReadValue()\">-</span>\n    <span ng-if=\"displayPaneController.getReadValue() && customEditorController.isVersionLinkViewable()\">\n      <a href=\"{{customEditorController.pathHelper.staticVersionPath(displayPaneController.getReadValue().props.id)}}\">\n        {{displayPaneController.getReadValue().props.name}}\n      </a>\n    </span>\n    <span ng-if=\"displayPaneController.getReadValue() && !customEditorController.isVersionLinkViewable()\">\n      {{displayPaneController.getReadValue().props.name}}\n    </span>\n</div>\n") }]);

/***/ },
/* 307 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/editable/date.html', "<div class=\"inplace-edit--date\">\n\t<input execute-on-enter=\"execute()\" \n\t\t\t\t ng-model=\"fieldController.writeValue\"\n\t\t\t\t ng-change=\"onEdit()\"\n\t\t\t\t ng-click=\"showDatepicker()\"\n\t\t\t\t title=\"{{ fieldController.editTitle }}\"\n\t\t\t\t class=\"inplace-edit--date\" \n\t\t\t\t type=\"text\" />\n\t<div class=\"inplace-edit--date-picker\"></div>\n</div>\n") }]);

/***/ },
/* 308 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/editable/daterange.html', "<div class=\"inplace-edit--date-range\">\n  <input type=\"text\" class=\"inplace-edit--date-range-start-date\" \n  \t\t\t execute-on-enter=\"execute()\" ng-change=\"onStartEdit()\" \n  \t\t\t ng-model=\"startDate\" ng-class=\"{'inplace-edit--highlight': startDateIsChanged}\" />\n  <div class=\"inplace-edit--date-range-start-date-picker\"></div>\n  <span class=\"delimeter\">-</span>\n  <input type=\"text\" class=\"inplace-edit--date-range-end-date\" \n  \t\t\t execute-on-enter=\"execute()\" ng-change=\"onEndEdit()\" \n  \t\t\t ng-model=\"endDate\" ng-class=\"{'inplace-edit--highlight': endDateIsChanged}\" />\n  <div class=\"inplace-edit--date-range-end-date-picker\"></div>\n</div>\n") }]);

/***/ },
/* 309 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/editable/dropdown.html', "<div class=\"dropdown-wrapper\">\n    <ui-select\n            class=\"inplace-edit--select\"\n            name=\"value\"\n            ng-disabled=\"fieldController.state.isBusy\"\n            ng-model=\"fieldController.writeValue.props.href\"\n            title=\"{{ fieldController.editTitle }}\"\n            reset-search-input=\"true\"\n            theme=\"select2\">\n        <ui-select-match>{{ $select.selected.name }}</ui-select-match>\n        <ui-select-choices\n                repeat=\"item.href as item in customEditorController.allowedValues | filter: $select.search\">\n            <div aria-label=\"{{ item.name || customEditorController.nullValueLabel }}\" ng-bind-html=\"item.name | highlight: $select.search\"></div>\n        </ui-select-choices>\n    </ui-select>\n</div>\n") }]);

/***/ },
/* 310 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/editable/duration.html', "<input class=\"focus-input inplace-edit--text-field\"\n       name=\"value\"\n       type=\"number\"\n       step=\"0.5\"\n       ng-disabled=\"fieldController.state.isBusy\"\n       ng-required=\"editPaneController.isRequired\"\n       title=\"{{ fieldController.editTitle }}\"\n       ng-model=\"customEditorController.writeValue\" />\n") }]);

/***/ },
/* 311 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/custom/editable/wiki_textarea.html', "<div class=\"textarea-wrapper\" ng-class=\"{'-preview': customEditorController.isPreview}\">\n    <textarea\n            wiki-toolbar\n            class=\"focus-input inplace-edit--textarea\"\n            ng-hide=\"customEditorController.isPreview && !fieldController.state.isBusy\"\n            preview-toggle=\"customEditorController.togglePreview()\"\n            name=\"value\"\n            ng-disabled=\"fieldController.state.isBusy\"\n            ng-required=\"editPaneController.isRequired\"\n            ng-model=\"fieldController.writeValue.raw\"\n            title=\"{{ fieldController.editTitle }}\">\n    </textarea>\n    <div class=\"inplace-edit--preview\" ng-if=\"customEditorController.isPreview && !fieldController.state.isBusy\">\n        <span ng-bind-html=\"customEditorController.previewHtml\"></span>\n    </div>\n</div>\n") }]);

/***/ },
/* 312 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/display_pane.html', "<div class=\"inplace-edit--read\" ng-hide=\"fieldController.isEditing\">\n    <accessible-by-keyboard\n        ng-if=\"fieldController.isEditable()\"\n        class=\"inplace-editing--trigger-container\"\n        span-class=\"inplace-editing--container\"\n        link-class=\"inplace-editing--trigger-link\"\n        execute=\"displayPaneController.startEditing()\">\n        <span\n            class=\"inplace-edit--read-value\"\n            ng-class=\"{'-default': fieldController.isEmpty()}\"\n            ng-include=\"templateUrl\">\n        </span>\n        <span class=\"inplace-edit--icon-wrapper\">\n            <icon-wrapper icon-name=\"edit\" icon-title=\"{{ fieldController.editTitle }}\">\n            </icon-wrapper>\n        </span>\n    </accessible-by-keyboard>\n    <span ng-if=\"!fieldController.isEditable()\">\n        <span\n            class=\"inplace-edit--read-value\"\n            ng-include=\"templateUrl\">\n        </span>\n    </span>\n</div>\n") }]);

/***/ },
/* 313 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/edit_pane.html', "<div class=\"inplace-edit--write edit-strategy-{{ strategy }}\" ng-show=\"fieldController.isEditing\">\n  <form class=\"inplace-edit--form\" ng-if=\"fieldController.isEditing\" name=\"editPaneController.editForm\" ng-submit=\"editPaneController.submit(false)\" novalidate>\n      <div class=\"inplace-edit--write-value\" ng-include=\"templateUrl\" ng-click=\"editPaneController.markActive()\" tabindex=\"-1\">\n      </div>\n    <div class=\"inplace-edit--dashboard\">\n      <div class=\"inplace-edit--controls\" ng-hide=\"fieldController.state.isBusy || !editPaneController.isActive()\">\n        <accessible-by-keyboard execute=\"editPaneController.submit(false)\" class=\"inplace-edit--control inplace-edit--control--save\">\n          <icon-wrapper icon-name=\"yes\" icon-title=\"{{ editPaneController.saveTitle }}\">\n          </icon-wrapper>\n        </accessible-by-keyboard>\n        <accessible-by-keyboard execute=\"editPaneController.submit(true)\" class=\"inplace-edit--control -icons-2 inplace-edit--control--send\">\n            <span title=\"{{ editPaneController.saveAndSendTitle }}\">\n              <i class=\"icon-yes\"></i>\n              <i class=\"icon-mail\"></i>\n            </span>\n        </accessible-by-keyboard>\n        <accessible-by-keyboard execute=\"editPaneController.discardEditing()\" class=\"inplace-edit--control inplace-edit--control--cancel\">\n          <icon-wrapper icon-name=\"close\" icon-title=\"{{ editPaneController.cancelTitle }}\">\n          </icon-wrapper>\n        </accessible-by-keyboard>\n      </div>\n    </div>\n  </form>\n</div>\n") }]);

/***/ },
/* 314 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/inplace_editor/main_pane.html', "<div\n  class=\"inplace-edit attribute-{{ fieldController.field }}\"\n  ng-class=\"{'-busy': fieldController.state.isBusy}\"\n  aria-busy=\"{{ fieldController.state.isBusy }}\">\n  <ng-transclude></ng-transclude>\n</div>\n") }]);

/***/ },
/* 315 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/menus/column_context_menu.html', "<div id=\"column-context-menu\"\n     role=\"menu\"\n     class=\"dropdown-relative dropdown action-menu\"\n     ng-class=\"{'dropdown-anchor-right': column && column.name !== 'id'}\">\n  <ul class=\"dropdown-menu\">\n    <li ng-if=\"canSort()\" role=\"menuitem\">\n      <a role=\"menuitem\" focus href=\"\" ng-click=\"sortAscending(column.name)\">\n        <i class=\"icon-action-menu icon-sort-ascending\"></i>\n        <span ng-bind=\"I18n.t('js.work_packages.query.sort_ascending')\"/>\n      </a>\n    </li>\n\n    <li ng-if=\"canSort()\">\n      <a role=\"menuitem\" href=\"\" ng-click=\"sortDescending(column.name)\">\n        <i class=\"icon-action-menu icon-sort-descending\"></i>\n        <span ng-bind=\"I18n.t('js.work_packages.query.sort_descending')\"/>\n      </a>\n    </li>\n\n    <li ng-if=\"isGroupable\">\n      <a role=\"menuitem\" focus=\"focusFeature('group')\" href=\"\" ng-click=\"groupBy(column.name)\">\n        <i class=\"icon-action-menu icon-group-by2\"></i>\n        <span ng-bind=\"I18n.t('js.work_packages.query.group')\"/>\n      </a>\n    </li>\n\n    <li ng-if=\"canMoveLeft()\">\n      <a role=\"menuitem\" focus=\"focusFeature('moveLeft')\" href=\"\" ng-click=\"moveLeft(column.name)\">\n        <i class=\"icon-action-menu icon-column-left\"></i>\n        <span ng-bind=\"I18n.t('js.work_packages.query.move_column_left')\"/>\n      </a>\n    </li>\n\n    <li ng-if=\"canMoveRight()\">\n      <a role=\"menuitem\" focus=\"focusFeature('moveRight')\" href=\"\" ng-click=\"moveRight(column.name)\">\n        <i class=\"icon-action-menu icon-column-right\"></i>\n        <span ng-bind=\"I18n.t('js.work_packages.query.move_column_right')\"/>\n      </a>\n    </li>\n\n    <li ng-if=\"canBeHidden()\">\n      <a role=\"menuitem\" focus=\"focusFeature('hide')\" href=\"\" ng-click=\"hideColumn(column.name)\">\n        <i class=\"icon-action-menu icon-delete2\"></i>\n        <span ng-bind=\"I18n.t('js.work_packages.query.hide_column')\"/>\n      </a>\n    </li>\n\n    <li>\n      <a role=\"menuitem\" focus=\"focusFeature('insert')\" href=\"\" ng-click=\"insertColumns()\">\n        <i class=\"icon-action-menu icon-columns\"></i>\n        <span ng-bind=\"I18n.t('js.work_packages.query.insert_columns')\"/>\n      </a>\n    </li>\n  </ul>\n</div>\n") }]);

/***/ },
/* 316 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/menus/details_more_dropdown_menu.html', "<div class=\"dropdown dropdown-relative dropdown-anchor-right dropdown-anchor-top\" id=\"moreDropdown\" role=\"menu\">\n  <ul class=\"dropdown-menu\" ng-if=\"actionsAvailable\">\n    <li ng-repeat=\"(action, properties) in permittedActions\"\n        class=\"{{action}}\">\n      <!-- The hrefs with empty URLs are necessary for IE10 to focus these links\n      properly. Thus, don't remove the hrefs or the empty URLs! -->\n      <a role=\"menuitem\" href=\"\" focus=\"{{ !$index }}\"\n         ng-click=\"triggerMoreMenuAction(action, properties.link)\"\n         ng-class=\"['icon-context'].concat(properties.css)\"\n         ng-bind=\"I18n.t('js.button_' + action)\">\n      </a>\n    </li>\n  </ul>\n</div>") }]);

/***/ },
/* 317 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/menus/query_select_dropdown_menu.html', "<div class=\"dropdown dropdown-relative\" id=\"querySelectDropdown\">\n  <div class=\"search-query-wrapper\">\n    <input type=\"search\" focus=\"\"\n           ng-model=\"filterBy\"\n           ng-change=\"filterModels(filterBy)\"\n           ng-keydown=\"handleSelection($event)\"\n           id=\"title-filter\"><i id=\"magnifier\" class=\"icon-search\"></i>\n    </input>\n  </div>\n\n  <div class=\"dropdown-scrollable\">\n    <div class=\"query-menu-container\" ng-if=\"group.models\" ng-repeat=\"group in filteredGroups\">\n      <ul class=\"query-menu\">\n        <div class=\"title-group-header\">{{ group.name }}</div>\n        <li ng-repeat=\"model in group.models\"\n            ng-class=\"{'selected': model.highlighted }\">\n          <a href=\"\" ui-sref=\"work-packages.list({ query_id: model.id, query_props: undefined })\" title=\"{{ model.label }}\" ng-bind-html=\"model.labelHtml\"></a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n") }]);

/***/ },
/* 318 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/menus/settings_dropdown_menu.html', "<div class=\"dropdown dropdown-relative dropdown-anchor-right\" id=\"settingsDropdown\" role=\"menu\">\n  <!-- The hrefs with empty URLs are necessary for IE10 to focus these links\n  properly. Thus, don't remove the hrefs or the empty URLs! -->\n  <ul class=\"dropdown-menu\">\n    <li>\n      <a role=\"menuitem\" focus=\"\" href=\"\" ng-click=\"showColumnsModal($event)\"><i class=\"icon-action-menu icon-columns\"></i>{{ I18n.t('js.toolbar.settings.columns') }}</a>\n    </li>\n    <li><a href=\"\" ng-click=\"showSortingModal($event)\"><i class=\"icon-action-menu icon-sort-by2\"></i>{{ I18n.t('js.toolbar.settings.sort_by') }}</a></li>\n    <li><a href=\"\" ng-click=\"showGroupingModal($event)\"><i class=\"icon-action-menu icon-group-by2\"></i>{{ I18n.t('js.toolbar.settings.group_by') }}</a></li>\n    <li>\n      <a role=\"menuitem\" role=\"menuitem\" href=\"\" ng-click=\"toggleDisplaySums($event)\">\n        <i ng-if=\"query.displaySums\" class=\"icon-action-menu icon-yes\"></i><i ng-if=\"!query.displaySums\" class=\"icon-action-menu no-icon\"></i>\n        <accessible-element visible-text=\"I18n.t('js.toolbar.settings.display_sums')\"\n                            readable-text=\"displaySumsLabel\">\n        </accessible-element>\n      </a>\n    </li>\n    <li class=\"dropdown-divider\"></li>\n    <li><a role=\"menuitem\" href=\"\" ng-click=\"saveQuery($event)\"\n           inaccessible-by-tab=\"saveQueryInvalid()\"\n           ng-class=\"{'inactive': saveQueryInvalid()}\">\n        <i class=\"icon-action-menu icon-save1\"></i>{{ I18n.t('js.toolbar.settings.save') }}</a>\n    </li>\n    <li><a role=\"menuitem\" href=\"\" ng-click=\"showSaveAsModal($event)\"\n           inaccessible-by-tab=\"showSaveModalInvalid()\"\n           ng-class=\"{'inactive': showSaveModalInvalid()}\">\n      <i class=\"icon-action-menu icon-save1\"></i>{{ I18n.t('js.toolbar.settings.save_as') }}</a>\n    </li>\n    <li><a role=\"menuitem\" href=\"\" ng-click=\"deleteQuery($event)\"\n           inaccessible-by-tab=\"deleteQueryInvalid()\"\n           ng-class=\"{'inactive': deleteQueryInvalid()}\">\n      <i class=\"icon-action-menu icon-delete\"></i>{{ I18n.t('js.toolbar.settings.delete') }}</a>\n    </li>\n    <li><a role=\"menuitem\" href=\"\" ng-click=\"showExportModal($event)\"\n           inaccessible-by-tab=\"showExportModalInvalid()\"\n           ng-class=\"{'inactive': showExportModalInvalid()}\">\n      <i class=\"icon-action-menu icon-export\"></i>{{ I18n.t('js.toolbar.settings.export') }}</a>\n    </li>\n    <li><a role=\"menuitem\" href=\"\" ng-click=\"showShareModal($event)\"\n           inaccessible-by-tab=\"showShareModalInvalid()\"\n           ng-class=\"{'inactive': showShareModalInvalid()}\">\n      <i class=\"icon-action-menu icon-publish\"></i>{{ I18n.t('js.toolbar.settings.share') }}</a>\n    </li>\n    <li><a role=\"menuitem\" href=\"\" ng-click=\"showSettingsModal($event)\"\n           inaccessible-by-tab=\"showSettingsModalInvalid()\"\n           ng-class=\"{'inactive': showSettingsModalInvalid()}\">\n      <i class=\"icon-action-menu icon-settings\"></i>{{ I18n.t('js.toolbar.settings.page_settings') }}</a>\n    </li>\n  </ul>\n</div>\n") }]);

/***/ },
/* 319 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/menus/tasks_dropdown_menu.html', "<div class=\"dropdown action-menu dropdown-relative dropdown-anchor-right\" id=\"tasksDropdown\" role=\"menu\">\n  <ul class=\"dropdown-menu\">\n    <li ng-repeat=\"type in availableTypes\">\n      <a role=\"menuitem\" focus=\"{{ !$index }}\" ui-sref=\"work-packages.list.new({type: type.id})\">\n        {{type.name}}\n      </a>\n    </li>\n  </ul>\n</div>\n") }]);

/***/ },
/* 320 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/menus/work_package_context_menu.html', "<div id=\"work-package-context-menu\" class=\"action-menu dropdown\" role=\"menu\">\n  <ul class=\"dropdown-menu\">\n    <li class=\"open\"\n        feature-flag=\"detailsView\">\n      <a role=\"menuitem\" focus=\"isDetailsViewLinkPresent()\" ui-sref=\"work-packages.list.details.overview({workPackageId: row.object.id})\">\n        <i ng-class=\"['icon-action-menu', 'icon-table-detail-view']\"></i>\n        <span ng-bind=\"I18n.t('js.button_open_details')\"/>\n      </a>\n    </li>\n    <li ng-repeat=\"(action, link) in permittedActions\"\n        class=\"{{action}}\">\n      <a role=\"menuitem\" focus=\"$index == 0 && !isDetailsViewLinkPresent()\" href=\"\" ng-click=\"triggerContextMenuAction(action, link)\">\n        <i ng-class=\"['icon-action-menu', 'icon-' + action]\"></i>\n        <span ng-bind=\"I18n.t('js.button_' + action)\"/>\n      </a>\n    </li>\n  </ul>\n</div>\n") }]);

/***/ },
/* 321 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/modals/columns.html', "<div class=\"ng-modal-window\">\n  <div class=\"ng-modal-inner\">\n    <div class=\"modal-header\"><i class=\"icon-close\" ng-click=\"modal.closeMe()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\"></i></div>\n\n    <h3>{{ ::I18n.t('js.label_columns') }}</h3>\n\n    <div cg-busy=\"vm.promise\" class=\"columns-modal-content\">\n      <label for=\"selected_columns\" class=\"hidden-for-sighted\">{{ ::I18n.t('js.description_selected_columns') }}</label>\n      <ui-select multiple sortable=\"true\" ng-model=\"vm.selectedColumns\" theme=\"select2\" id=\"selected_columns\" focus aria-labelledby=\"column_multiselect_description\">\n        <ui-select-match>\n          {{$item.title}}\n        </ui-select-match>\n        <ui-select-choices repeat=\"column in vm.unusedColumns | filter: { title: $select.search } | orderBy:'title'\"\n                           refresh=\"updateUnusedColumns($select.selected)\" refresh-delay=\"0\">\n          <div ng-bind-html=\"column.title | highlight: $select.search\"></div>\n        </ui-select-choices>\n      </ui-select>\n      <span class=\"tooltip--right -multiline\" tabindex=\"0\" title data-tooltip=\"{{ ::I18n.t('js.work_packages.label_column_multiselect') }}\" aria-labelledby=\"column_multiselect_description\">\n        <i class=\"icon icon-help1\"></i>\n      </span>\n      <div class=\"hidden-for-sighted\" id=\"column_multiselect_description\">\n        {{ ::I18n.t('js.work_packages.label_column_multiselect') }}\n      </div>\n    </div>\n\n    <div>\n      <button class=\"button -highlight\" ng-click=\"updateSelectedColumns()\">\n        {{ ::I18n.t('js.modals.button_apply') }}\n      </button>\n      <button class=\"button\" ng-click=\"modal.closeMe()\">\n        {{ ::I18n.t('js.modals.button_cancel') }}\n      </button>\n    </div>\n\n  </div>\n</div>\n") }]);

/***/ },
/* 322 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/modals/export.html', "<div class=\"ng-modal-window\">\n  <div class=\"ng-modal-inner\">\n    <div class=\"modal-header\"><i class=\"icon-close\" ng-click=\"modal.closeMe()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\"></i></div>\n\n    <h3>{{ ::I18n.t('js.label_export') }}</h3>\n\n    <ul class=\"export-options\">\n      <li ng-repeat=\"option in modal.exportOptions\">\n        <a ng-href=\"{{ ::option.url }}\" focus=\"$first\">\n          <i class=\"icon-page-{{ ::option.identifier }} icon-big\"></i>\n          <span class=\"export-label\">{{ ::option.label }}</span>\n        </a>\n      </li>\n    </ul>\n  </div>\n</div>\n") }]);

/***/ },
/* 323 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/modals/group_by.html', "<div class=\"ng-modal-window\">\n  <div class=\"ng-modal-inner\">\n    <div class=\"modal-header\"><i class=\"icon-close\" ng-click=\"modal.closeMe()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\"></i></div>\n\n    <h3>{{ ::I18n.t('js.label_group_by') }}</h3>\n\n    <div>\n      <ui-select ng-model=\"vm.selectedColumnName\" theme=\"select2\" focus id=\"selected_columns_new\" aria-labelledby=\"column_select_description\">\n        <ui-select-match>{{$select.selected.title}}</ui-select-match>\n        <ui-select-choices repeat=\"column.name as column in vm.groupableColumns | filter: { title: $select.search } | orderBy:'title'\">\n          <div ng-bind-html=\"column.title | highlight: $select.search\"></div>\n        </ui-select-choices>\n      </ui-select>\n      <span class=\"tooltip--right -multiline\" tabindex=\"0\" data-tooltip=\"{{ ::I18n.t('js.work_packages.label_column_select') }}\" aria-labelledby=\"column_select_description\">\n        <i class=\"icon icon-help1\"></i>\n      </span>\n      <div id=\"column_select_description\" class=\"hidden-for-sighted\">\n        {{ ::I18n.t('js.work_packages.label_column_select') }}\n      </div>\n    </div>\n    <div>\n      <button class=\"button -highlight\" ng-click=\"updateGroupBy()\">\n        {{ ::I18n.t('js.modals.button_apply') }}\n      </button>\n      <button class=\"button\" ng-click=\"modal.closeMe()\">\n        {{ ::I18n.t('js.modals.button_cancel') }}\n      </button>\n    </div>\n\n  </div>\n</div>\n") }]);

/***/ },
/* 324 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/modals/save.html', "<div class=\"ng-modal-window\">\n  <div class=\"ng-modal-inner\">\n    <div class=\"modal-header\"><i class=\"icon-close\" ng-click=\"modal.closeMe()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\"></i></div>\n\n    <h3>{{ ::I18n.t('js.label_save_as') }}</h3>\n\n    <form name=\"modalSaveForm\" class=\"form\">\n      <div class=\"form--field -required\">\n        <label class=\"form--label\">\n          {{ ::I18n.t('js.modals.label_name') }}\n        </label>\n        <div class=\"form--field-container\">\n          <div class=\"form--text-field-container\">\n            <input class=\"form--text-field\" type=\"text\" name=\"query_name\"\n              ng-model=\"queryName\" focus required></input>\n          </div>\n        </div>\n      </div>\n      <div class=\"form--space\">\n        <button class=\"button -highlight -with-icon icon-yes\"\n          ng-click=\"saveQueryAs(queryName)\"\n          ng-disabled=\"modalSaveForm.$invalid\">\n          {{ ::I18n.t('js.modals.button_save') }}\n        </button>\n        <button class=\"button\" ng-click=\"modal.closeMe()\">\n          {{ ::I18n.t('js.modals.button_cancel') }}\n        </button>\n      </div>\n    </form>\n\n  </div>\n</div>\n") }]);

/***/ },
/* 325 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/modals/settings.html', "<div class=\"ng-modal-window\">\n  <div class=\"ng-modal-inner\">\n    <div class=\"modal-header\"><i class=\"icon-close\" ng-click=\"modal.closeMe()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\"></i></div>\n\n    <h3>{{ ::I18n.t('js.modals.label_settings') }}</h3>\n\n    <form name=\"modalSettingsForm\" class=\"form\">\n      <div class=\"form--field -required\">\n        <label class=\"form--label\" for=\"query_name\">\n          {{ ::I18n.t('js.modals.label_name') }}\n        </label>\n        <div class=\"form--field-container\">\n          <div class=\"form--text-field-container\">\n            <input class=\"form--text-field\" type=\"text\" name=\"query_name\"\n              ng-model=\"queryName\" focus required id=\"query_name\"></input>\n          </div>\n        </div>\n      </div>\n      <div class=\"form--space\">\n        <button class=\"button -highlight\"\n          ng-click=\"updateQuery()\"\n          ng-disabled=\"modalSettingsForm.$invalid\">{{ ::I18n.t('js.modals.button_submit') }}</button>\n        <button class=\"button\" ng-click=\"modal.closeMe()\">{{ ::I18n.t('js.modals.button_cancel') }}</button>\n      </div>\n    </form>\n\n  </div>\n</div>\n") }]);

/***/ },
/* 326 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/modals/share.html', "<div class=\"ng-modal-window\">\n  <div class=\"ng-modal-inner\">\n    <div class=\"modal-header\"><i class=\"icon-close\" ng-click=\"modal.closeMe()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\"></i></div>\n\n    <h3>{{ ::I18n.t('js.label_share') }}</h3>\n\n    <div>\n      <label class=\"checkbox-label\">\n        <input type=\"checkbox\"\n               name=\"is_public\"\n               ng-model=\"query.isPublic\"\n               ng-disabled=\"cannot('query', 'publicize') && cannot('query', 'depublicize')\"\n               focus></input>\n        <div class=\"styled-checkbox\"></div>\n        {{ ::I18n.t('js.label_visible_for_others') }}\n      </label>\n    </div>\n    <div>\n      <label class=\"checkbox-label\">\n        <input type=\"checkbox\"\n               name=\"show_in_menu\"\n               ng-model=\"shareSettings.starred\"\n               ng-disabled=\"query.isGlobal() || cannot('query', 'star')\"></input>\n        <div class=\"styled-checkbox\"></div>\n        {{ ::I18n.t('js.label_show_in_menu') }}\n      </label>\n    </div>\n    <div>\n      <button class=\"button -highlight -with-icon icon-yes\" ng-click=\"saveQuery()\">\n        {{ ::I18n.t('js.modals.button_save') }}\n      </button>\n      <button class=\"button\" ng-click=\"modal.closeMe()\">\n        {{ ::I18n.t('js.modals.button_cancel') }}\n      </button>\n    </div>\n\n  </div>\n</div>\n") }]);

/***/ },
/* 327 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/modals/sorting.html', "<div class=\"ng-modal-window\">\n  <div class=\"ng-modal-inner modal-content\">\n    <div class=\"modal-header\"><i class=\"icon-close\" ng-click=\"modal.closeMe()\" title=\"{{ ::I18n.t('js.close_popup_title') }}\"></i></div>\n\n    <h3>{{ ::I18n.t('js.label_sorting') }}</h3>\n\n    <form name=\"modalSortingForm\">\n      <div id=\"modal-sorting\" class=\"modal-content-container\" cg-busy=\"promise\">\n        <div class=\"form--row\" ng-repeat=\"element in sortElements\">\n          <div class=\"form--field -full-width\">\n            <div class=\"form--field-container\">\n              <ui-select ng-model=\"element[0]\" theme=\"select2\" focus=\"!$index\" aria-labelledby=\"sorting_select_description\">\n                <ui-select-match>{{$select.selected.label}}</ui-select-match>\n                <ui-select-choices repeat=\"column as column in getRemainingAvailableColumnsData() | filter: { label: $select.search } | orderBy:'label'\">\n                  <div ng-bind-html=\"column.label | highlight: $select.search\"></div>\n                </ui-select-choices>\n              </ui-select>\n              <div class=\"form--tooltip-container\">\n                <span class=\"tooltip--right -multiline\" tabindex=\"0\" data-tooltip=\"{{ ::I18n.t('js.work_packages.label_column_select') }}\" aria-labelledby=\"sorting_select_description\">\n                  <i class=\"icon icon-help1\"></i>\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"form--field -full-width\">\n            <div class=\"form--field-container\">\n              <label class=\"option-label\">\n                <input type=\"radio\"\n                       tabindex=\"0\"\n                       ng-model=\"element[1]\"\n                       ng-required=\"element[0].id\"\n                       ng-disabled=\"!element[0].id\"\n                       ng-value=\"availableDirectionsData[1]\">\n                {{availableDirectionsData[1].label}}\n              </label>\n              <label class=\"option-label\">\n                <input type=\"radio\"\n                       tabindex=\"0\"\n                       ng-model=\"element[1]\"\n                       ng-required=\"element[0].id\"\n                       ng-disabled=\"!element[0].id\"\n                       ng-value=\"availableDirectionsData[0]\">\n                {{availableDirectionsData[0].label}}\n              </label>\n            </div>\n          </div>\n        </div>\n        <div id=\"sorting_select_description\" class=\"hidden-for-sighted\">\n          {{ ::I18n.t('js.work_packages.label_column_select') }}\n        </div>\n      </div>\n      <button class=\"button -highlight\"\n              ng-disabled=\"modalSortingForm.$invalid\"\n              ng-click=\"updateSortation()\">\n        {{ ::I18n.t('js.modals.button_apply') }}\n      </button>\n      <button class=\"button\" ng-click=\"modal.closeMe()\">\n        {{ ::I18n.t('js.modals.button_cancel') }}\n      </button>\n    </form>\n\n  </div>\n</div>\n") }]);

/***/ },
/* 328 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/query_columns.html', "<table style=\"border-collapse: collapse; border:0;\">\n  <tbody>\n    <tr>\n      <td style=\"padding-left:3px\">\n        <label for=\"available_columns\">{{ I18n.t('js.description_available_columns') }}</label>\n        <br/>\n        <select id=\"available_columns\"\n                multiple=\"multiple\"\n                name=\"available_columns[]\"\n                ng-model=\"markedAvailableColumns\"\n                ng-options=\"column.name as column.title for column in availableUnusedColumns\"\n                size=\"10\"\n                style=\"width:150px\">\n        </select>\n      </td>\n      <td class=\"table-buttons\" align=\"center\" valign=\"middle\">\n        <label class=\"hidden-for-sighted\" for=\"add_selected_columns\">{{ I18n.t('js.label_add_columns') }}</label>\n        <input id=\"add_selected_columns\"\n               type=\"button\"\n               value=\"→\"\n               ng-click=\"showColumns(markedAvailableColumns)\"\n               title=\"{{ I18n.t('js.label_add_columns') }}\"\n               ng-disabled=\"loading\"><br>\n        <label class=\"hidden-for-sighted\" for=\"add_selected_columns\">{{ I18n.t('js.label_remove_columns') }}</label>\n        <input type=\"button\"\n               value=\"←\"\n               ng-click=\"hideColumns(markedSelectedColumns)\"\n               title=\"{{ I18n.t('js.label_remove_columns') }}\"\n               ng-disabled=\"loading\">\n      </td>\n      <td>\n        <label for=\"selected_columns\">{{ I18n.t('js.description_selected_columns') }}</label>\n        <br/>\n        <select id=\"selected_columns\"\n                name=\"c[]\"\n                multiple=\"multiple\"\n                ng-model=\"markedSelectedColumns\"\n                name=\"c[]\"\n                size=\"10\"\n                style=\"width:150px\">\n          <option ng-repeat=\"column in columns\" value=\"{{ column.name }}\">{{ column.title }}</option>\n        </select>\n      </td>\n      <td class=\"table-buttons\" align=\"center\" valign=\"middle\">\n        <label class=\"hidden-for-sighted\" for=\"move_up\">{{ I18n.t('js.label_sort_higher') }}</label>\n        <input id=\"move_up\" type=\"button\" value=\"↑\" ng-click=\"moveSelectedColumnBy(-1);\" title=\"{{ I18n.t('js.label_sort_higher') }}\" ng-disabled=\"loading\"><br>\n        <label class=\"hidden-for-sighted\" for=\"move_up\">{{ I18n.t('js.label_sort_lower') }}</label>\n        <input id=\"move_down\" type=\"button\" value=\"↓\" ng-click=\"moveSelectedColumnBy(1);\" title=\"{{ I18n.t('js.label_sort_lower') }}\" ng-disabled=\"loading\">\n      </td>\n    </tr>\n  </tbody>\n</table>\n") }]);

/***/ },
/* 329 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/query_filters.html', "<fieldset id=\"filters\" class=\"advanced-filters--container\">\n  <legend ng-bind=\"I18n.t('js.label_selected_filter_list')\"></legend>\n\n  <ul class=\"advanced-filters--filters\">\n    <li query-filter\n        ng-repeat=\"filter in query.filters\"\n        ng-show=\"!filter.deactivated\"\n        id=\"filter_{{filter.name}}\"\n        class=\"advanced-filters--filter\">\n\n      <!-- Hidden for form -->\n      <input id=\"h_{{ filter.name }}\" name=\"f[]\" type=\"hidden\" value=\"{{ filter.name }}\" ng-disabled=\"filter.deactivated\"/>\n\n      <!-- Name -->\n      <label for=\"operators-{{filter.name}}\"\n             class=\"advanced-filters--filter-name\"\n             title=\"{{ localisedFilterName(query.availableWorkPackageFilters[filter.name]) }}\">\n        {{ localisedFilterName(query.availableWorkPackageFilters[filter.name]) }}\n      </label>\n\n      <!-- Operator -->\n      <div class=\"advanced-filters--filter-operator\">\n        <select require\n                focus=\"$index == focusElementIndex\"\n                class=\"advanced-filters--select\"\n                id=\"operators-{{filter.name}}\"\n                name=\"op[{{filter.name}}]\"\n                ng-model=\"filter.operator\"\n                style=\"vertical-align: top;\"\n                ng-disabled=\"isLoading\">\n\n          <option ng-repeat=\"option in operatorsAndLabelsByFilterType[filter.type]\" value=\"{{ option[0] }}\" ng-selected=\"option[0] == filter.operator\" label=\"{{ I18n.t('js.' + option[1]) }}\">{{ I18n.t('js.' + option[1]) }}</option>\n        </select>\n      </div>\n\n      <!-- Values -->\n      <div class=\"advanced-filters--filter-value\">\n        <div id=\"div-values-{{filter.name}}\"\n             ng-if=\"!showValueOptionsAsSelect\"\n             ng-show=\"showValuesInput\"\n             ng-switch=\"filter.type\">\n\n          <input ng-switch-when=\"string\"\n                 ng-model=\"filter.textValue\"\n                 ng-model-options=\"::filterModelOptions\"\n                 ng-required=\"true\"\n                 class=\"advanced-filters--text-field\"\n                 id=\"values-{{filter.name}}\"\n                 name=\"v[{{filter.name}}]\"\n                 size=\"30\"\n                 type=\"text\"\n                 value=\"\"\n                 ng-disabled=\"isLoading\"/>\n          <label ng-switch-when=\"string\"\n                 for=\"values_{{name}}\"\n                 class=\"hidden-for-sighted\">\n            {{ I18n.t('js.work_packages.description_enter_text') }}\n          </label>\n\n          <input ng-switch-when=\"text\"\n                 ng-model=\"filter.textValue\"\n                 ng-model-options=\"::filterModelOptions\"\n                 ng-required=\"true\"\n                 class=\"advanced-filters--text-field\"\n                 id=\"values-{{filter.name}}\"\n                 name=\"v[{{filter.name}}]\"\n                 size=\"30\"\n                 type=\"text\"\n                 value=\"\"\n                 ng-disabled=\"isLoading\"/>\n          <label ng-switch-when=\"text\" for=\"values_{{name}}\" class=\"hidden-for-sighted\">\n            {{ I18n.t('js.work_packages.description_enter_text') }}\n          </label>\n\n          <input ng-switch-when=\"integer\"\n                 ng-model=\"filter.textValue\"\n                 ng-model-options=\"::filterModelOptions\"\n                 ng-required=\"true\"\n                 class=\"advanced-filters--number-field\"\n                 id=\"values-{{filter.name}}\"\n                 name=\"v[{{filter.name}}]\"\n                 min=\"0\"\n                 type=\"number\"\n                 value=\"\"\n                 ng-disabled=\"isLoading\"/>\n          <label ng-switch-when=\"integer\" for=\"values_{{name}}\" class=\"hidden-for-sighted\">\n            {{ I18n.t('js.work_packages.description_enter_text') }}\n          </label>\n\n          <span class=\"inline-label\" ng-switch-when=\"date\">\n            <input ng-model=\"filter.textValue\"\n                   ng-model-options=\"::filterModelOptions\"\n                   ng-required=\"true\"\n                   class=\"advanced-filters--text-field\"\n                   id=\"values-{{filter.name}}\"\n                   name=\"v[{{filter.name}}]\"\n                   size=\"3\"\n                   type=\"text\"\n                   ng-disabled=\"isLoading\"/>\n            <label for=\"values_{{name}}\" class=\"form-label -transparent\">\n              {{ I18n.t('js.work_packages.time_relative.days') }}\n            </label>\n          </span>\n\n          <span class=\"inline-label\" ng-switch-when=\"date_past\">\n            <input ng-model=\"filter.textValue\"\n                   ng-model-options=\"::filterModelOptions\"\n                   ng-required=\"true\"\n                   class=\"advanced-filters--text-field\"\n                   id=\"values-{{filter.name}}\"\n                   name=\"v[{{filter.name}}]\"\n                   size=\"3\"\n                   type=\"text\"\n                   ng-disabled=\"isLoading\"/>\n            <label ng-switch-when=\"date_past\" for=\"values_{{name}}\" class=\"form-label -transparent\">\n              {{ I18n.t('js.work_packages.time_relative.days') }}\n            </label>\n          </span>\n        </div>\n\n        <div ng-if=\"showValueOptionsAsSelect\"\n             ng-show=\"showValuesInput\">\n          <toggled-multiselect available-options=\"availableFilterValueOptions\"\n                               name=\"filter.name\"\n                               values=\"filter.values\"\n                               is-multiselect=\"false\"\n                               isDisabled=\"isLoading\"/>\n\n        </div>\n      </div>\n\n      <div class=\"advanced-filters--remove-filter\">\n        <accessible-by-keyboard execute=\"deactivateFilter(filter)\">\n          <icon-wrapper icon-name=\"close\"\n                        icon-title=\"{{I18n.t('js.button_delete')}}\"\n                        css-class=\"advanced-filters--remove-filter-icon\"/>\n        </accessible-by-keyboard>\n        <!-- TODO I18n -->\n      </div>\n    </li>\n\n    <li class=\"advanced-filters--spacer\" ng-if=\"query.getActiveFilters().size() > 0\"></li>\n\n    <li class=\"advanced-filters--add-filter\">\n      <!-- Add filters -->\n      <label for=\"add_filter_select\" class=\"advanced-filters--add-filter-label\">\n        <i class=\"icon-add icon4\"></i>\n        {{ I18n.t('js.work_packages.label_filter_add') }}:\n      </label>\n      <div class=\"advanced-filters--add-filter-value\">\n        <select class=\"advanced-filters--select\"\n          id=\"add_filter_select\"\n          focus=\"focusElementIndex == -1\"\n          ng-model=\"filterToBeAdded\"\n          ng-options=\"filterName as localisedFilterName(query.availableWorkPackageFilters[filterName])\n            for filterName\n            in query.availableWorkPackageFilters | remainingFilterNames:query.filters\" />\n        </select>\n        <!-- TODO options | orderObjectBy: 'order' -->\n      </div>\n    </li>\n  </ul>\n\n  <input id=\"f_\" name=\"f[]\" type=\"hidden\" value=\"\"/>\n</fieldset>\n") }]);

/***/ },
/* 330 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/sort_header.html', "<div class=\"generic-table--sort-header-outer\">\n  <span title=\"{{ fullTitle }}\" class=\"generic-table--sort-header\">\n    <a href=\"javascript://\"\n       ng-if=\"sortable\"\n       ng-class=\"[currentSortDirection && 'sort', currentSortDirection]\"\n       lang-attribute\n       lang=\"{{locale}}\">{{headerTitle}}</a>\n    <span ng-if=\"!sortable\">{{headerTitle}}</span>\n    <icon-wrapper css-class=\"dropdown-indicator\"\n                  icon-name=\"pulldown-arrow1\"\n                  title=\"{{I18n.t('js.label_open_menu')}}\"></icon-wrapper>\n  </span>\n</div>\n") }]);

/***/ },
/* 331 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_add_work_package_child.html', "<button class=\"button add-work-package-child-button\"\n  title=\"{{ btnTitle }}\"\n  ng-bind-html=\"btnIcon + ' ' + btnTitle\"\n  ng-click=\"handler.addRelation()\"\n  focus=\"focusElementIndex === -1\">\n</button>\n") }]);

/***/ },
/* 332 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_add_work_package_relation.html', "<form name=\"add_relation_form\" class=\"form\">\n  <div class=\"choice\">\n    <div class=\"choice--select\">\n      <ui-select\n        id=\"relation_to_id-{{ handler.relationsId }}\"\n        name=\"relation[to_id][{{ handler.relationsId }}]\"\n        ng-model=\"$parent.relationToAddId\"\n        title=\"{{ I18n.t('js.field_value_enter_prompt', { field: I18n.t('js.relation_labels.' + handler.relationsId) }) }}\"\n        required\n        theme=\"select2\">\n        <ui-select-match>{{$select.selected.to_s}}</ui-select-match>\n        <ui-select-choices\n          refresh-delay=\"100\"\n          refresh=\"autocompleteWorkPackages($select.search)\"\n          repeat=\"item.id as item in options\">\n            <div ng-bind=\"item.to_s\"></div>\n        </ui-select-choices>\n      </ui-select>\n    </div>\n    <div class=\"choice--button\">\n      <button class=\"button\"\n              title=\"{{ btnTitle }}\"\n              ng-bind-html=\"btnIcon + ' ' + btnTitle\"\n              ng-click=\"handler.addRelation(this)\"\n              ng-disabled=\"add_relation_form.$invalid\">\n      </button>\n    </div>\n  </div>\n</form>\n") }]);

/***/ },
/* 333 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_attachment_file_size.html', "<span>{{ displayFileSize }}</span>\n") }]);

/***/ },
/* 334 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_attachment_title_cell.html', "<a ng-href=\"{{ attachmentPath }}\" title=\"{{ attachment.props.fileName }}\">{{ attachment.props.fileName }}</a>\n") }]);

/***/ },
/* 335 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_attachment_user_cell.html', "<a ng-href=\"{{ userPath }}\" ng-bind=\"authorName\"></a>\n") }]);

/***/ },
/* 336 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_attachments_table.html', "<table ng-if=\"attachments.length\" class=\"attributes-table attachments-table\">\n  <colgroup>\n    <col style=\"width: 20%\">\n    <col style=\"width: 10%\">\n    <col style=\"width: 20%\">\n    <col style=\"width: 15%\">\n    <col style=\"width: 25%\">\n  </colgroup>\n  <thead>\n    <tr>\n      <td title=\"{{ I18n.t('js.label_filename')}}\">{{ I18n.t('js.label_filename')}}</td>\n      <td title=\"{{ I18n.t('js.label_filesize')}}\">{{ I18n.t('js.label_filesize')}}</td>\n      <td title=\"{{ I18n.t('js.label_uploaded_by')}}\">{{ I18n.t('js.label_uploaded_by')}}</td>\n      <td title=\"{{ I18n.t('js.label_description')}}\">{{ I18n.t('js.label_description')}}</td>\n      <td title=\"{{ I18n.t('js.label_date')}}\">{{ I18n.t('js.label_date')}}</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat=\"attachment in attachments\"\n        attachment=\"attachment\">\n      <td attachment-title-cell attachment=\"attachment\"></td>\n      <td attachment-file-size attachment=\"attachment\"></td>\n      <td attachment-user-cell attachment=\"attachment\"></td>\n      <td title=\"{{ attachment.props.description.raw }}\" ng-bind=\"attachment.props.description.raw\"></td>\n      <td><op-date-time date-time-value=\"attachment.props.createdAt\"></op-date-time></td>\n    </tr>\n  </tbody>\n</table>\n") }]);

/***/ },
/* 337 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_attachments_title.html', "<h3>{{ attachmentsTitle }}</h3>\n") }]);

/***/ },
/* 338 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_editable_comment.html', "<span class=\"message\"\n      ng-show=\"activity.props._type == 'Activity::Comment'\"\n      ng-bind-html=\"activity.props.comment\"/>\n<textarea ng-if=\"commentInEdit = activity.props.id\" id=\"edit-comment-text\"></textarea>\n") }]);

/***/ },
/* 339 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_panel_expander.html', "<div class=\"panel-toggler\"\n     ng-click=\"collapsed = !collapsed\" tabindex=\"-1\">\n  <accessible-by-keyboard link-class=\"button -small -transparent {{ !collapsed ? '-active' : '' }}\">\n    <span ng-if=\"!collapsed\">\n      <span ng-bind=\"collapseText\"/>\n    </span>\n    <span ng-if=\"collapsed\">\n      <span ng-bind=\"expandText\"/>\n    </span>\n  </accessible-by-keyboard>\n</div>\n") }]);

/***/ },
/* 340 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/_work_package_relations.html', "<div class=\"relation\">\n  <h3>\n    <accessible-by-keyboard execute=\"toggleExpand()\">\n      <i class=\"icon-pull-content\" ng-class=\"stateClass\"></i> {{ title }}\n      <span ng-if=\"!handler.isSingletonRelation\">({{ handler.getCount() }})</span>\n    </accessible-by-keyboard>\n  </h3>\n  <div class=\"content\" ng-show=\"expand\">\n    <div class=\"workpackages\">\n      <div ng-if=\"handler.relations\">\n        <table class=\"attributes-table\">\n          <colgroup>\n            <col style=\"width: 50%\" />\n            <col style=\"width: 15%\" />\n            <col />\n            <col style=\"width: 1rem\" />\n          </colgroup>\n          <thead>\n            <tr>\n              <td title=\"{{ I18n.t('js.work_packages.properties.subject')}}\">{{ I18n.t('js.work_packages.properties.subject') }}</td>\n              <td title=\"{{ I18n.t('js.work_packages.properties.status')}}\">{{ I18n.t('js.work_packages.properties.status') }}</td>\n              <td title=\"{{ I18n.t('js.work_packages.properties.assignee')}}\">{{ I18n.t('js.work_packages.properties.assignee') }}</td>\n              <td></td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr related-work-package-table-row\n                ng-repeat=\"relation in handler.relations\">\n              <td focus=\"isFocused($index)\">\n                <a title=\"{{ fullIdentifier }}\" class=\"work_package\" ng-class=\"state\" href=\"{{ workPackagePath(relatedWorkPackage.props.id) }}\">\n                  {{ fullIdentifier }}\n                </a>\n              </td>\n              <td title=\"{{ relatedWorkPackage.embedded.status.props.name }}\">{{ relatedWorkPackage.embedded.status.props.name }}</td>\n              <td>\n                <a ng-if=\"relatedWorkPackage.embedded.assignee && relatedWorkPackage.embedded.assignee.props.subtype != 'Group'\" title=\"{{ relatedWorkPackage.embedded.assignee.props.name }}\" href=\"{{ userPath(relatedWorkPackage.embedded.assignee.props.id) }}\">\n                  {{ relatedWorkPackage.embedded.assignee.props.name }}\n                </a>\n                <span ng-if=\"relatedWorkPackage.embedded.assignee && relatedWorkPackage.embedded.assignee.props.subtype == 'Group'\">\n                  {{ relatedWorkPackage.embedded.assignee.props.name }}\n                </span>\n                <empty-element ng-if=\"!relatedWorkPackage.embedded.assignee\"></empty-element>\n              </td>\n              <td class=\"icon\">\n                <accessible-by-keyboard ng-if=\"handler.canDeleteRelation(relation)\"\n                                        execute=\"handler.removeRelation(this)\">\n                  <icon-wrapper icon-name=\"delete\"\n                                icon-title=\"{{ I18n.t('js.relations.delete') }}\">\n                  </icon-wrapper>\n                </accessible-by-keyboard>\n              </td>\n            </tr>\n\n          </tbody>\n        </table>\n      </div>\n      <div ng-if=\"handler.isEmpty()\">\n        {{ I18n.t('js.relations.empty') }}\n      </div>\n    </div>\n    <div class=\"add-relation\" ng-if=\"handler.canAddRelation()\" ng-switch=\"handler.type\" focus=\"isFocused(-1)\">\n      <add-work-package-child ng-switch-when=\"child\"></add-work-package-child>\n      <add-work-package-relation ng-switch-default></add-work-package-relation>\n    </div>\n  </div>\n</div>\n") }]);

/***/ },
/* 341 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/activity.html', "  <exclusive-edit>\n    <div class=\"detail-activity\">\n      <ul class=\"work-package-details-activities-list\">\n        <li ng-repeat=\"activity in activities\"\n            class=\"work-package-details-activities-activity\"\n            ng-init=\"activityNo    = activitiesSortedInDescendingOrder && activities.length - $index || $index + 1;\n                     isInitial     = isInitialActivity(activity, activityNo);\n                     currentDate   = (activity.props.createdAt|date:'longDate');\n                     currentAnchor = 'note-' + activityNo\">\n          <h3 class=\"activity-date\"\n              ng-if=\"currentDate !== (activities[$index-1].props.createdAt | date:'longDate')\"\n              ng-bind=\"currentDate\"/>\n            <activity-entry work-package=\"workPackage\"\n                           activity=\"activity\"\n                           activity-no=\"activityNo\"\n                           is-initial=\"isInitial\"\n                           autocomplete-path=\"autocompletePath\"\n                           input-element-id=\"'add-comment-text'\">\n            </activity-entry>\n          </div>\n        </li>\n      </ul>\n    </div>\n    <activity-comment work-package=\"workPackage\"\n                      activities=\"activities\">\n    </activity-comment>\n  </exclusive-edit>\n") }]);

/***/ },
/* 342 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/overview.html', "<div class=\"attributes-group\">\n\n  <div class=\"attributes-group--header\">\n    <div class=\"attributes-group--header-container\">\n      <h3 class=\"attributes-group--header-text\">\n        {{ I18n.t('js.label_description') }}\n      </h3>\n    </div>\n  </div>\n\n  <div class=\"single-attribute wiki\">\n    <work-package-field field=\"'description'\"></work-package-field>\n  </div>\n</div>\n\n<div ng-repeat=\"group in vm.groupedFields\" ng-hide=\"vm.hideEmptyFields && vm.isGroupHideable(vm.groupedFields, group.groupName, vm.workPackage)\" class=\"attributes-group\">\n\n  <div class=\"attributes-group--header\">\n    <div class=\"attributes-group--header-container\">\n      <h3 class=\"attributes-group--header-text\"\n        ng-bind=\"I18n.t('js.work_packages.property_groups.' + group.groupName)\"></h3>\n    </div>\n    <div class=\"attributes-group--header-toggle\">\n      <panel-expander tabindex=\"-1\" ng-if=\"vm.showToggleButton() && $first\"\n        collapsed=\"vm.hideEmptyFields\"\n        expand-text=\"{{ I18n.t('js.label_show_attributes') }}\"\n        collapse-text=\"{{ I18n.t('js.label_hide_attributes') }}\">\n      </panel-expander>\n    </div>\n  </div>\n\n  <dl class=\"attributes-key-value\">\n    <dt\n        ng-hide=\"vm.hideEmptyFields && vm.isFieldHideable(vm.workPackage, field)\"\n        ng-if=\"vm.isSpecified(vm.workPackage, field)\"\n        ng-repeat-start=\"field in group.attributes\" class=\"attributes-key-value--key\">\n        {{vm.getLabel(vm.workPackage, field)}}\n        <span class=\"required\" ng-if=\"vm.hasNiceStar(vm.workPackage, field)\"> *</span>\n    </dt>\n    <dd\n        ng-hide=\"vm.hideEmptyFields && vm.isFieldHideable(vm.workPackage, field)\"\n        ng-if=\"vm.isSpecified(vm.workPackage, field)\"\n        ng-repeat-end\n        class=\"attributes-key-value--value-container\">\n      <work-package-field field=\"field\"></work-package-field>\n    </dd>\n  </dl>\n</div>\n\n<work-package-attachments edit work-package=\"vm.workPackage\" data-ng-show=\"!vm.hideEmptyFields || vm.filesExist\"></work-package-attachments>\n\n<div class=\"attributes-group\">\n  <div class=\"attributes-group--header\">\n    <div class=\"attributes-group--header-container\">\n      <h3 class=\"attributes-group--header-text\">{{ I18n.t('js.label_latest_activity') }}</h3>\n    </div>\n  </div>\n\n  <exclusive-edit>\n    <ul class='work-package-details-activities-list'>\n      <li ng-repeat=\"activity in activities | latestItems:activitiesSortedInDescendingOrder:3\"\n          class=\"work-package-details-activities-activity\"\n          ng-init=\"currentAnchor = 'note-' + ($index+1);\n                   activityNo = activities.length - $index;\n                   isInitial = isInitialActivity(activity, activityNo);\">\n        <activity-entry work-package=\"workPackage\"\n                        activity=\"activity\"\n                        activity-no=\"activityNo\"\n                        is-initial=\"isInitial\"\n                        autocomplete-path=\"autocompletePath\"\n                        input-element-id=\"'add-comment-text'\">\n        </activity-entry>\n      </li>\n    </ul>\n    <activity-comment work-package=\"workPackage\"\n                      activities=\"activities\"\n                      autocomplete-path=\"{{ autocompletePath }}\">\n    </activity-comment>\n  </exclusive-edit>\n</div>\n") }]);

/***/ },
/* 343 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/relations.html', "<div class=\"detail-panel-description\">\n  <div class=\"detail-panel-description-content\">\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.parent') }}\"\n                         handler=\"wpParent\"\n                         button-title=\"{{ I18n.t('js.relation_buttons.change_parent') }}\"\n                         button-icon=\"<i class='icon-hierarchy icon-edit'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.children') }}\"\n                            handler=\"wpChildren\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_child') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.relates') }}\"\n                            handler=\"relatedTo\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_related_to') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.duplicates') }}\"\n                            handler=\"duplicates\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_duplicates') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.duplicated') }}\"\n                            handler=\"duplicated\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_duplicated_by') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.blocks') }}\"\n                            handler=\"blocks\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_blocks') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.blocked') }}\"\n                            handler=\"blocked\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_blocked_by') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.precedes') }}\"\n                            handler=\"precedes\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_precedes') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n\n    <work-package-relations title=\"{{ I18n.t('js.relation_labels.follows') }}\"\n                            handler=\"follows\"\n                            button-title=\"{{ I18n.t('js.relation_buttons.add_follows') }}\"\n                            button-icon=\"<i class='icon-hierarchy icon-add'></i>\">\n    </work-package-relations>\n  </div>\n</div>\n") }]);

/***/ },
/* 344 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/tabs/watchers.html', "<div id=\"detail-panel-watchers\">\n  <div class=\"notification-box -error\" data-ng-show=\"watchers.error\">\n    <div class=\"notification-box--content\">\n      <p>{{::I18n.t('js.watchers.label_error_loading')}}</p>\n    </div>\n  </div>\n  <div data-ng-show=\"watchers.loading\">\n    <p>{{I18n.t('js.watchers.label_loading')}}</p>\n  </div>\n  <div data-ng-hide=\"watchers.loading || watchers.error\">\n    <div class=\"work-package--watchers work-package--details--long-field\">\n      <work-package-watcher data-watcher=\"watcher\" data-ng-repeat=\"watcher in watchers.watching track by watcher.id\"></work-package-watcher>\n    </div>\n    <work-package-watchers-lookup data-watchers=\"watchers.available\" data-ng-show=\"watchers.available.length\"></work-package-watchers-lookup>\n  </div>\n</div>\n") }]);

/***/ },
/* 345 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/watchers/lookup.html', "<div class=\"work-package--watchers-lookup work-package--details--long-field\">\n  <!-- taken from ./frontend/app/templates/work_packages/inplace_editor/display_pane.html -->\n  <div class=\"inplace-edit--read\" ng-hide=\"editMode\">\n    <accessible-by-keyboard\n        class=\"inplace-editing--trigger-container\"\n        span-class=\"inplace-editing--container\"\n        link-class=\"inplace-editing--trigger-link\"\n        execute=\"intoEditMode()\">\n        <span class=\"inplace-edit--read-value\">{{ ::I18n.t('js.watchers.label_click_to_add') }}</span>\n        <span class=\"inplace-edit--icon-wrapper\">\n            <icon-wrapper icon-name=\"edit\" icon-title=\"{{ fieldController.editTitle }}\">\n            </icon-wrapper>\n        </span>\n    </accessible-by-keyboard>\n  </div>\n  <!-- taken from ./frontend/app/templates/work_packages/inplace_editor/edit_pane.html -->\n  <form class=\"inplace-edit--form\" ng-if=\"editMode\" name=\"watcherForm\" ng-submit=\"addWatcher()\" novalidate>\n    <div class=\"inplace-edit--write-value\" tabindex=\"-1\">\n      <div class=\"dropdown-wrapper\">\n          <ui-select\n                  class=\"inplace-edit--select -full-width\"\n                  name=\"value\"\n                  ng-disabled=\"locked\"\n                  ng-model=\"selection.watcher\"\n                  title=\"{{ ::I18n.t('js.watchers.label_search_watchers') }}\"\n                  reset-search-input=\"true\"\n                  theme=\"select2\">\n              <ui-select-match>{{ $select.selected.name }}</ui-select-match>\n              <ui-select-choices\n                      repeat=\"watcher as watcher in watchers | filter: $select.search\">\n                  <div aria-label=\"{{ watcher.name }}\" ng-bind-html=\"watcher.name | highlight: $select.search\"></div>\n              </ui-select-choices>\n          </ui-select>\n      </div>\n    </div>\n    <div class=\"inplace-edit--dashboard\">\n      <div class=\"inplace-edit--controls\" ng-hide=\"locked\">\n        <accessible-by-keyboard execute=\"addWatcher()\" class=\"inplace-edit--control inplace-edit--control--save\">\n          <icon-wrapper icon-name=\"yes\" icon-title=\"{{ ::I18n.t('js.watchers.label_add') }}\">\n          </icon-wrapper>\n        </accessible-by-keyboard>\n        <accessible-by-keyboard execute=\"changeEditMode()\" class=\"inplace-edit--control inplace-edit--control--cancel\">\n          <icon-wrapper icon-name=\"close\" icon-title=\"{{ ::I18n.t('js.watchers.label_discard') }}\">\n          </icon-wrapper>\n        </accessible-by-keyboard>\n      </div>\n    </div>\n  </form>\n\n</div>\n\n") }]);

/***/ },
/* 346 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/watchers/watcher.html', "<span class=\"inplace-edit--read\">\n  <span class=\"inplace-editing--trigger-container\">\n    <span class=\"inplace-editing--trigger-link\"\n          data-ng-class=\"{'-focus': focussing()}\">\n      <span class=\"inplace-editing--container\">\n        <span class=\"inplace-edit--read-value\" >\n          <span data-ng-class=\"{'loading':watcher.loading,'deleting':deleting}\">\n            <a ng-href=\"/users/{{watcher.id}}\"\n               data-ng-focus=\"focus()\"\n               data-ng-blur=\"blur()\"\n               title=\"{{watcher.name}}\">\n              <img data-ng-src=\"{{watcher.avatar}}\" alt=\"{{watcher.name}}\" data-ng-show=\"watcher.avatar\" class=\"avatar-mini\">\n              <span class=\"work-package--watcher-name\">{{watcher.name}}</span>\n            </a>\n          </span>\n        </span>\n        <a href = ''\n           class=\"inplace-edit--icon-wrapper\"\n           data-ng-click=\"remove()\"\n           data-ng-focus=\"focus()\"\n           data-ng-blur=\"blur()\">\n          <icon-wrapper icon-name=\"delete\"\n                        data-icon-title=\"{{::I18n.t('js.label_remove_watcher',\n                                                    { name: watcher.name })}}\">\n          </icon-wrapper>\n        </a>\n      </span>\n    </span>\n  </span>\n</span>\n\n\n\n") }]);

/***/ },
/* 347 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/work_package_column.html', "<span ng-switch=\"displayType\">\n  <progress-bar ng-switch-when=\"progress_bar\"\n                progress=\"displayText\"\n                width=\"80px\">\n  </progress-bar>\n\n  <a ng-switch-when=\"link\" href=\"{{ url }}\" title=\"{{ displayText }}\">{{ displayText }}</a>\n\n  <span ng-switch-default title=\"{{ displayText }}\">{{ displayText }}</span>\n</span>\n") }]);

/***/ },
/* 348 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/work_package_details_toolbar.html', "<div class=\"work-packages--details-toolbar\">\n  <button class=\"button\"\n          accesskey=\"3\"\n          ng-click=\"editWorkPackage()\">\n    <i class=\"button--icon icon-edit\"></i>\n    <span class=\"button--text\" ng-bind=\"::I18n.t('js.button_edit')\"></span>\n  </button>\n  <button class=\"button dropdown-relative\"\n          ng-disabled=\"!(actionsAvailable || pluginActionsAvailable)\"\n          has-dropdown-menu\n          accesskey=\"7\"\n          target=\"DetailsMoreDropdownMenu\"\n          locals=\"permittedActions,actionsAvailable,triggerMoreMenuAction\">\n    <span class=\"button--text\" ng-bind=\"::I18n.t('js.button_more')\"></span>\n    <i class=\"button--dropdown-indicator\"></i>\n  </button>\n</div>\n") }]);

/***/ },
/* 349 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/templates/work_packages/work_packages_table.html', "<div class=\"generic-table--container work-package-table--container\"\n  ng-class=\"{ '-with-footer': displaySums }\">\n  <div class=\"generic-table--results-container\" ng-if=\"rows.length\">\n    <table interactive-table class=\"keyboard-accessible-list generic-table\">\n      <colgroup>\n        <col highlight-col />\n        <col highlight-col ng-repeat=\"column in columns\" />\n      </colgroup>\n      <thead>\n        <tr>\n          <th class=\"checkbox -short hide-when-print\">\n            <div class=\"generic-table--header-outer\">\n              <a href\n                 alt=\"{{toggleRowsLabel}}\"\n                 class=\"no-decoration-on-hover\"\n                 ng-click=\"setCheckedStateForAllRows(!(rows | allRowsChecked))\"\n                 title=\"{{toggleRowsLabel}}\">\n                <icon-wrapper icon-title=\"{{toggleRowsLabel}}\"\n                              icon-name=\"yes\"></icon-wrapper>\n              </a>\n            </div>\n          </th>\n\n          <th sort-header ng-repeat=\"column in columns\"\n                          has-dropdown-menu\n                          position-relative-to=\".generic-table--sort-header-outer\"\n                          target=\"ColumnContextMenu\"\n                          locals=\"columns, column\"\n                          locale=\"column.custom_field && columns.custom_field.name_locale || I18n.locale\"\n                          header-name=\"column.name\"\n                          header-title=\"column.title\"\n                          sortable=\"column.sortable\"\n                          query=\"query\"\n                          ng-class=\"column.name == 'id' && '-short' \">\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        <!-- Group headers -->\n\n        <tr work-package-group-header\n            ng-repeat-start=\"row in rows\"\n            ng-if=\"!!groupByColumn &&\n                   ($first || row.groupName !== rows[$index-1].groupName)\"\n            ng-class=\"{\n              group: true,\n              open: groupExpanded[currentGroup],\n              closed: !groupExpanded[currentGroup],\n              keyboard_hover: true\n            }\"\n            id=\"group-header-{{ row.groupName }}\">\n          <td colspan=\"{{ columns.length + 2 - (!!hideWorkPackageDetails * 1) }}\">\n            <div ng-class=\"[\n                    'expander',\n                    'icon-context',\n                    'icon-' + (groupExpanded[currentGroup] && 'minus' || 'plus')\n                  ]\"\n                  ng-click=\"toggleCurrentGroup()\">\n              <span ng-class=\"{\n                'hidden-for-sighted': true,\n                expand: !groupExpanded[currentGroup],\n                collapse: groupExpanded[currentGroup]\n              }\">\n                {{ groupExpanded[currentGroup] && I18n.t('js.label_collapse') || I18n.t('js.label_expand') }}\n              </span>\n              <span class=\"hidden-for-sighted collapse\">{{ I18n.t('js.label_collapse') }}</span>\n            </div>\n\n            <div>\n              <span work-package-column\n                    work-package=\"row.object\"\n                    column=\"groupByColumn\"\n                    display-type=\"{{ groupByColumn.name }}\"\n                    display-empty=\"-\">\n              </span>\n\n              <span class=\"count\">\n                ({{ countByGroup[row.groupName] }})\n\n                <span aria-hidden=\"true\" role=\"presentation\" tabindex=\"-1\">\n                  <a class=\"toggle-all\" href ng-click=\"toggleAllGroups()\">\n                    {{ groupExpanded[currentGroup] && I18n.t('js.label_collapse_all') || I18n.t('js.label_expand_all') }}\n                  </a>\n                </span>\n              </span>\n            </div>\n\n          </td>\n        </tr>\n\n        <!-- Work package rows -->\n\n        <tr work-package-row\n            id=\"work-package-{{ row.object.id }}\"\n            has-dropdown-menu\n            trigger-on-event=\"contextmenu\"\n            target=\"WorkPackageContextMenu\"\n            locals=\"rows,row\"\n            after-focus-on=\".id a\"\n            single-click=\"selectWorkPackage(row, $event)\"\n            ng-dblclick=\"showWorkPackageDetails(row)\"\n            ng-class=\"[\n              'issue',\n              'hascontextmenu',\n              row.checked && 'context-menu-selection',\n              !row.object['leaf?'] && 'parent' || '',\n              row.level > 0 && 'child idnt' || '',\n              row.level > 0 && ('idnt-' + row.level) || ''\n            ]\"\n            ng-show=\"!groupByColumn || groupExpanded[row.groupName]\">\n\n          <td class=\"checkbox hide-when-print\">\n            <accessible-checkbox name=\"ids[]\"\n                                 checkbox-id=\"work_package{{row.object.id}}\"\n                                 checkbox-value=\"row.object.id\"\n                                 checkbox-title=\"{{checkboxTitle}}\"\n                                 model=\"row.checked\"/>\n          </td>\n\n          <td ng-repeat=\"column in columns\" class=\"{{column.name}}\" lang=\"{{column.custom_field && column.custom_field.name_locale || I18n.locale}}\">\n            <span work-package-column\n                  work-package=\"row.object\"\n                  column=\"column\"\n                  display-type=\"{{column.meta_data.data_type}}\"\n                  ng-class=\"[row.level > 0 && column.name == 'subject' && 'icon-context icon-pulldown-arrow4']\"/>\n          </td>\n        </tr>\n\n\n        <!-- Sums for groups -->\n\n        <tr work-package-group-sums\n            ng-repeat-end\n            ng-if=\"displaySums && !!groupByColumn &&\n                   ($last || row.groupName !== rows[$index+1].groupName)\"\n            ng-show=\"!groupByColumn || groupExpanded[row.groupName]\"\n            ng-class=\"[\n              'group-sum',\n              'sum',\n              'grouped',\n              'group',\n              'issue',\n              'work_package'\n            ]\">\n            <td colspan=\"{{1  - (!!hideWorkPackageDetails * 1)}}\">\n              {{ I18n.t('js.label_sum_for') }}\n              <span work-package-column\n                    work-package=\"row.object\"\n                    column=\"groupByColumn\"\n                    display-empty=\"-\"/>\n            </td>\n            <td ng-repeat=\"column in columns\">\n              {{ column.group_sums[row.groupName] }}\n            </td>\n        </tr>\n\n      </tbody>\n      <tfoot>\n\n        <!-- Total sums -->\n\n        <tr work-package-total-sums\n            ng-if=\"displaySums\"\n            class=\"sum group all issue work_package\">\n          <td colspan=\"{{1  - (!!hideWorkPackageDetails * 1)}}\">\n            <div class=\"generic-table--footer-outer\">\n              {{ I18n.t('js.label_sum_for') }} {{ I18n.t('js.label_all_work_packages') }}\n            </div>\n          </td>\n          <td ng-repeat=\"column in columns\">\n            <div class=\"generic-table--footer-outer\">\n              {{ column.total_sum }}\n            </div>\n          </td>\n        </tr>\n\n      </tfoot>\n    </table>\n    <div class=\"generic-table--header-background\"></div>\n    <div class=\"generic-table--footer-background\" ng-if=\"displaySums\"></div>\n  </div>\n  <div class=\"generic-table--no-results-container\" ng-if=\"!rows.length\">\n    <h2 class=\"generic-table--no-results-title\">\n      <i class=\"icon-info\"></i>\n      {{ I18n.t('js.work_packages.no_results.title') }}\n    </h2>\n    <div class=\"generic-table--no-results-description\"\n      ng-bind-html=\"I18n.t('js.work_packages.no_results.description_html')\"></div>\n  </div>\n</div>\n") }]);

/***/ },
/* 350 */
/***/ function(module, exports) {

	angular.module('openproject.templates').run(['$templateCache', function(c) { c.put('/home/amerov/projects/Source_Code/frontend/bower_components/angular-busy/angular-busy.html', "<div class=\"cg-busy-default-wrapper\">\n\n   <div class=\"cg-busy-default-sign\">\n\n      <div class=\"cg-busy-default-spinner\">\n         <div class=\"bar1\"></div>\n         <div class=\"bar2\"></div>\n         <div class=\"bar3\"></div>\n         <div class=\"bar4\"></div>\n         <div class=\"bar5\"></div>\n         <div class=\"bar6\"></div>\n         <div class=\"bar7\"></div>\n         <div class=\"bar8\"></div>\n         <div class=\"bar9\"></div>\n         <div class=\"bar10\"></div>\n         <div class=\"bar11\"></div>\n         <div class=\"bar12\"></div>\n      </div>\n\n      <div class=\"cg-busy-default-text\">{{$message}}</div>\n\n   </div>\n\n</div>") }]);

/***/ }
/******/ ]);